{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _objectSpread = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _awaitAsyncGenerator = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _asyncIterator = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nconst CID = require('cids');\n\nconst multiaddr = require('multiaddr');\n\nconst toCamel = require('../lib/object-to-camel');\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\nmodule.exports = configure(api => {\n  /**\n   * @type {import('..').ImplementsMethod<'provide', import('ipfs-core/src/components/dht')>}\n   */\n  function provide(_x) {\n    return _provide.apply(this, arguments);\n  }\n\n  function _provide() {\n    _provide = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(cids, options = {}) {\n      var res, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, message;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            cids = Array.isArray(cids) ? cids : [cids];\n            _context.next = 3;\n            return _awaitAsyncGenerator(api.post('dht/provide', {\n              timeout: options.timeout,\n              signal: options.signal,\n              searchParams: toUrlSearchParams(_objectSpread({\n                arg: cids.map(cid => new CID(cid).toString())\n              }, options)),\n              headers: options.headers\n            }));\n\n          case 3:\n            res = _context.sent;\n            _iteratorNormalCompletion = true;\n            _didIteratorError = false;\n            _context.prev = 6;\n            _iterator = _asyncIterator(res.ndjson());\n\n          case 8:\n            _context.next = 10;\n            return _awaitAsyncGenerator(_iterator.next());\n\n          case 10:\n            _step = _context.sent;\n            _iteratorNormalCompletion = _step.done;\n            _context.next = 14;\n            return _awaitAsyncGenerator(_step.value);\n\n          case 14:\n            _value = _context.sent;\n\n            if (_iteratorNormalCompletion) {\n              _context.next = 25;\n              break;\n            }\n\n            message = _value;\n            message = toCamel(message);\n            message.id = new CID(message.id);\n\n            if (message.responses) {\n              message.responses = message.responses.map(({\n                ID,\n                Addrs\n              }) => ({\n                id: ID,\n                addrs: (Addrs || []).map(a => multiaddr(a))\n              }));\n            } else {\n              message.responses = [];\n            }\n\n            _context.next = 22;\n            return message;\n\n          case 22:\n            _iteratorNormalCompletion = true;\n            _context.next = 8;\n            break;\n\n          case 25:\n            _context.next = 31;\n            break;\n\n          case 27:\n            _context.prev = 27;\n            _context.t0 = _context[\"catch\"](6);\n            _didIteratorError = true;\n            _iteratorError = _context.t0;\n\n          case 31:\n            _context.prev = 31;\n            _context.prev = 32;\n\n            if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n              _context.next = 36;\n              break;\n            }\n\n            _context.next = 36;\n            return _awaitAsyncGenerator(_iterator.return());\n\n          case 36:\n            _context.prev = 36;\n\n            if (!_didIteratorError) {\n              _context.next = 39;\n              break;\n            }\n\n            throw _iteratorError;\n\n          case 39:\n            return _context.finish(36);\n\n          case 40:\n            return _context.finish(31);\n\n          case 41:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee, null, [[6, 27, 31, 41], [32,, 36, 40]]);\n    }));\n    return _provide.apply(this, arguments);\n  }\n\n  return provide;\n});","map":{"version":3,"sources":["C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/ipfs-http-client/src/dht/provide.js"],"names":["CID","require","multiaddr","toCamel","configure","toUrlSearchParams","module","exports","api","provide","cids","options","Array","isArray","post","timeout","signal","searchParams","arg","map","cid","toString","headers","res","ndjson","message","id","responses","ID","Addrs","addrs","a"],"mappings":"AAAA;;;;;;;;;;;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,MAAD,CAAnB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,WAAD,CAAzB;;AACA,MAAME,OAAO,GAAGF,OAAO,CAAC,wBAAD,CAAvB;;AACA,MAAMG,SAAS,GAAGH,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAMI,iBAAiB,GAAGJ,OAAO,CAAC,6BAAD,CAAjC;;AAEAK,MAAM,CAACC,OAAP,GAAiBH,SAAS,CAACI,GAAG,IAAI;AAChC;AACF;AACA;AAHkC,WAIfC,OAJe;AAAA;AAAA;;AAAA;AAAA,0EAIhC,iBAA0BC,IAA1B,EAAgCC,OAAO,GAAG,EAA1C;AAAA;;AAAA;AAAA;AAAA;AACED,YAAAA,IAAI,GAAGE,KAAK,CAACC,OAAN,CAAcH,IAAd,IAAsBA,IAAtB,GAA6B,CAACA,IAAD,CAApC;AADF;AAAA,wCAGoBF,GAAG,CAACM,IAAJ,CAAS,aAAT,EAAwB;AACxCC,cAAAA,OAAO,EAAEJ,OAAO,CAACI,OADuB;AAExCC,cAAAA,MAAM,EAAEL,OAAO,CAACK,MAFwB;AAGxCC,cAAAA,YAAY,EAAEZ,iBAAiB;AAC7Ba,gBAAAA,GAAG,EAAER,IAAI,CAACS,GAAL,CAASC,GAAG,IAAI,IAAIpB,GAAJ,CAAQoB,GAAR,EAAaC,QAAb,EAAhB;AADwB,iBAE1BV,OAF0B,EAHS;AAOxCW,cAAAA,OAAO,EAAEX,OAAO,CAACW;AAPuB,aAAxB,CAHpB;;AAAA;AAGQC,YAAAA,GAHR;AAAA;AAAA;AAAA;AAAA,uCAa4BA,GAAG,CAACC,MAAJ,EAb5B;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAaiBC,YAAAA,OAbjB;AAcIA,YAAAA,OAAO,GAAGtB,OAAO,CAACsB,OAAD,CAAjB;AACAA,YAAAA,OAAO,CAACC,EAAR,GAAa,IAAI1B,GAAJ,CAAQyB,OAAO,CAACC,EAAhB,CAAb;;AACA,gBAAID,OAAO,CAACE,SAAZ,EAAuB;AACrBF,cAAAA,OAAO,CAACE,SAAR,GAAoBF,OAAO,CAACE,SAAR,CAAkBR,GAAlB,CAAsB,CAAC;AAAES,gBAAAA,EAAF;AAAMC,gBAAAA;AAAN,eAAD,MAAoB;AAC5DH,gBAAAA,EAAE,EAAEE,EADwD;AAE5DE,gBAAAA,KAAK,EAAE,CAACD,KAAK,IAAI,EAAV,EAAcV,GAAd,CAAkBY,CAAC,IAAI7B,SAAS,CAAC6B,CAAD,CAAhC;AAFqD,eAApB,CAAtB,CAApB;AAID,aALD,MAKO;AACLN,cAAAA,OAAO,CAACE,SAAR,GAAoB,EAApB;AACD;;AAvBL;AAwBI,mBAAMF,OAAN;;AAxBJ;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAJgC;AAAA;AAAA;;AAgChC,SAAOhB,OAAP;AACD,CAjCyB,CAA1B","sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst multiaddr = require('multiaddr')\nconst toCamel = require('../lib/object-to-camel')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\nmodule.exports = configure(api => {\n  /**\n   * @type {import('..').ImplementsMethod<'provide', import('ipfs-core/src/components/dht')>}\n   */\n  async function * provide (cids, options = {}) {\n    cids = Array.isArray(cids) ? cids : [cids]\n\n    const res = await api.post('dht/provide', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: cids.map(cid => new CID(cid).toString()),\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    for await (let message of res.ndjson()) {\n      message = toCamel(message)\n      message.id = new CID(message.id)\n      if (message.responses) {\n        message.responses = message.responses.map(({ ID, Addrs }) => ({\n          id: ID,\n          addrs: (Addrs || []).map(a => multiaddr(a))\n        }))\n      } else {\n        message.responses = []\n      }\n      yield message\n    }\n  }\n\n  return provide\n})\n"]},"metadata":{},"sourceType":"script"}