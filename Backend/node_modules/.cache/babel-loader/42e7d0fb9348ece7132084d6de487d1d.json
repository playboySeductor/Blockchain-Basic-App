{"ast":null,"code":"'use strict';\n\nconst withIs = require('class-is');\n\nconst sortLinks = require('./sortLinks');\n\nconst DAGLink = require('../dag-link/dagLink');\n\nconst _require = require('../serialize.js'),\n      serializeDAGNode = _require.serializeDAGNode;\n\nconst toDAGLink = require('./toDagLink');\n\nconst addLink = require('./addLink');\n\nconst rmLink = require('./rmLink');\n\nconst uint8ArrayFromString = require('uint8arrays/from-string');\n\nconst uint8ArrayToString = require('uint8arrays/to-string');\n\nclass DAGNode {\n  constructor(data, links = [], serializedSize = null) {\n    if (!data) {\n      data = new Uint8Array(0);\n    }\n\n    if (typeof data === 'string') {\n      data = uint8ArrayFromString(data);\n    }\n\n    if (!(data instanceof Uint8Array)) {\n      throw new Error('Passed \\'data\\' is not a Uint8Array or a String!');\n    }\n\n    if (serializedSize !== null && typeof serializedSize !== 'number') {\n      throw new Error('Passed \\'serializedSize\\' must be a number!');\n    }\n\n    links = links.map(link => {\n      return DAGLink.isDAGLink(link) ? link : DAGLink.util.createDagLinkFromB58EncodedHash(link);\n    });\n    sortLinks(links);\n    Object.defineProperties(this, {\n      Data: {\n        value: data,\n        writable: false,\n        enumerable: true\n      },\n      Links: {\n        value: links,\n        writable: false,\n        enumerable: true\n      },\n      _serializedSize: {\n        value: serializedSize,\n        writable: true,\n        enumerable: false\n      },\n      _size: {\n        value: null,\n        writable: true,\n        enumerable: false\n      }\n    });\n  }\n\n  toJSON() {\n    if (!this._json) {\n      this._json = Object.freeze({\n        data: this.Data,\n        links: this.Links.map(l => l.toJSON()),\n        size: this.size\n      });\n    }\n\n    return Object.assign({}, this._json);\n  }\n\n  toString() {\n    return \"DAGNode <data: \\\"\".concat(uint8ArrayToString(this.Data, 'base64urlpad'), \"\\\", links: \").concat(this.Links.length, \", size: \").concat(this.size, \">\");\n  }\n\n  _invalidateCached() {\n    this._serializedSize = null;\n    this._size = null;\n  }\n\n  addLink(link) {\n    this._invalidateCached();\n\n    return addLink(this, link);\n  }\n\n  rmLink(link) {\n    this._invalidateCached();\n\n    return rmLink(this, link);\n  } // @returns {Promise.<DAGLink>}\n\n\n  toDAGLink(options) {\n    return toDAGLink(this, options);\n  }\n\n  serialize() {\n    return serializeDAGNode(this);\n  }\n\n  get size() {\n    if (this._size === null) {\n      if (this._serializedSize === null) {\n        this._serializedSize = this.serialize().length;\n      }\n\n      this._size = this.Links.reduce((sum, l) => sum + l.Tsize, this._serializedSize);\n    }\n\n    return this._size;\n  }\n\n  set size(size) {\n    throw new Error(\"Can't set property: 'size' is immutable\");\n  }\n\n}\n\nexports = module.exports = withIs(DAGNode, {\n  className: 'DAGNode',\n  symbolName: '@ipld/js-ipld-dag-pb/dagnode'\n});","map":{"version":3,"sources":["C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/ipld-dag-pb/src/dag-node/dagNode.js"],"names":["withIs","require","sortLinks","DAGLink","serializeDAGNode","toDAGLink","addLink","rmLink","uint8ArrayFromString","uint8ArrayToString","DAGNode","constructor","data","links","serializedSize","Uint8Array","Error","map","link","isDAGLink","util","createDagLinkFromB58EncodedHash","Object","defineProperties","Data","value","writable","enumerable","Links","_serializedSize","_size","toJSON","_json","freeze","l","size","assign","toString","length","_invalidateCached","options","serialize","reduce","sum","Tsize","exports","module","className","symbolName"],"mappings":"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","sourcesContent":["'use strict'\n\nconst withIs = require('class-is')\nconst sortLinks = require('./sortLinks')\nconst DAGLink = require('../dag-link/dagLink')\nconst { serializeDAGNode } = require('../serialize.js')\nconst toDAGLink = require('./toDagLink')\nconst addLink = require('./addLink')\nconst rmLink = require('./rmLink')\nconst uint8ArrayFromString = require('uint8arrays/from-string')\nconst uint8ArrayToString = require('uint8arrays/to-string')\n\nclass DAGNode {\n  constructor (data, links = [], serializedSize = null) {\n    if (!data) {\n      data = new Uint8Array(0)\n    }\n    if (typeof data === 'string') {\n      data = uint8ArrayFromString(data)\n    }\n\n    if (!(data instanceof Uint8Array)) {\n      throw new Error('Passed \\'data\\' is not a Uint8Array or a String!')\n    }\n\n    if (serializedSize !== null && typeof serializedSize !== 'number') {\n      throw new Error('Passed \\'serializedSize\\' must be a number!')\n    }\n\n    links = links.map((link) => {\n      return DAGLink.isDAGLink(link)\n        ? link\n        : DAGLink.util.createDagLinkFromB58EncodedHash(link)\n    })\n    sortLinks(links)\n\n    Object.defineProperties(this, {\n      Data: { value: data, writable: false, enumerable: true },\n      Links: { value: links, writable: false, enumerable: true },\n      _serializedSize: { value: serializedSize, writable: true, enumerable: false },\n      _size: { value: null, writable: true, enumerable: false }\n    })\n  }\n\n  toJSON () {\n    if (!this._json) {\n      this._json = Object.freeze({\n        data: this.Data,\n        links: this.Links.map((l) => l.toJSON()),\n        size: this.size\n      })\n    }\n\n    return Object.assign({}, this._json)\n  }\n\n  toString () {\n    return `DAGNode <data: \"${uint8ArrayToString(this.Data, 'base64urlpad')}\", links: ${this.Links.length}, size: ${this.size}>`\n  }\n\n  _invalidateCached () {\n    this._serializedSize = null\n    this._size = null\n  }\n\n  addLink (link) {\n    this._invalidateCached()\n    return addLink(this, link)\n  }\n\n  rmLink (link) {\n    this._invalidateCached()\n    return rmLink(this, link)\n  }\n\n  // @returns {Promise.<DAGLink>}\n  toDAGLink (options) {\n    return toDAGLink(this, options)\n  }\n\n  serialize () {\n    return serializeDAGNode(this)\n  }\n\n  get size () {\n    if (this._size === null) {\n      if (this._serializedSize === null) {\n        this._serializedSize = this.serialize().length\n      }\n      this._size = this.Links.reduce((sum, l) => sum + l.Tsize, this._serializedSize)\n    }\n\n    return this._size\n  }\n\n  set size (size) {\n    throw new Error(\"Can't set property: 'size' is immutable\")\n  }\n}\n\nexports = module.exports = withIs(DAGNode, { className: 'DAGNode', symbolName: '@ipld/js-ipld-dag-pb/dagnode' })\n"]},"metadata":{},"sourceType":"script"}