{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _objectSpread from \"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _regeneratorRuntime from \"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"C:\\\\Users\\\\SAINIK\\\\Desktop\\\\LEARNING BTC\\\\NFT-Auction-Marketplace\\\\src\\\\pages\\\\MarketPlaceBuy.js\";\nimport { MDBAnimation, MDBBtn, MDBCard, MDBCol, MDBContainer, MDBIcon, MDBRow } from 'mdbreact';\nimport React, { Component } from 'react';\nimport ArtTable from '../components/ArtTable';\nimport ArtListItem from '../components/ArtListItem';\nimport HelperFunctions from '../utils/Util';\nimport TimeAgo from 'javascript-time-ago';\nimport Validator from '../utils/validator';\nimport ArtAlert from '../components/ArtAlert';\nimport Spinner from '../components/Spinner';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass MarketPlaceBuy extends Component {\n  constructor(props) {\n    var _this;\n\n    super(props);\n    _this = this;\n\n    this.handleChange = event => {\n      event.preventDefault();\n      let key = event.target.name;\n      let value = event.target.value;\n      this.setState({\n        [key]: value\n      });\n    };\n\n    this.componentWillMount = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var contract, util, response;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            contract = _this.state.contract;\n\n            if (contract) {\n              _context.next = 7;\n              break;\n            }\n\n            util = new HelperFunctions();\n            _context.next = 5;\n            return util.reloadContractAndAccounts();\n\n          case 5:\n            response = _context.sent;\n\n            _this.setState({\n              web3: response.web3,\n              accounts: response.accounts,\n              contract: response.contract,\n              priceContract: response.priceFeed\n            });\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n\n    this.backgroundDataSync = () => {\n      //sync every 20 seconds\n      setInterval(() => {\n        const contract = this.state.contract;\n\n        if (contract.methods) {\n          this.fetchArtItems();\n          this.fetchMyBids();\n        }\n      }, 20000);\n    };\n\n    this.newBid = (itemId, name, price, seller = null) => event => {\n      event.preventDefault();\n      this.setState({\n        showNewBid: true\n      });\n      this.setState({\n        bidItemId: itemId\n      });\n      this.setState({\n        bidItemOwner: seller\n      });\n      console.log('itemID clicked', itemId);\n      let newBidObj = {\n        name: name,\n        itemId: itemId,\n        currentHighestBid: price\n      };\n      this.setState({\n        newBid: newBidObj\n      });\n      event.stopPropagation();\n    };\n\n    this.reBid = (itemId, name, price, currentHighestBidder, isCancelled) => {\n      this.setState({\n        showNewBid: true\n      });\n      this.setState({\n        bidItemId: itemId\n      });\n      console.log('itemID clicked', itemId);\n      let newBidObj = {\n        name: name,\n        itemId: itemId,\n        currentHighestBid: price,\n        currentHighestBidder: currentHighestBidder,\n        isCancelled: isCancelled\n      };\n      this.setState({\n        newBid: newBidObj\n      });\n    };\n\n    this.selectBid = event => {\n      event.preventDefault();\n      let itemId = event.target.value;\n      let bidItem = this.state.myBids.find(item => item.itemId === itemId);\n      let name = bidItem.name;\n      let currentHighestBid = bidItem.currentHighestBid;\n      let currentHighestBidder = bidItem.currentHighestBidder;\n      let isCancelled = bidItem.isCancelled;\n      console.log('item selected name', name);\n      console.log('item selected id', itemId);\n      console.log('item selected price', currentHighestBid);\n      console.log('item selected isCanclled', currentHighestBid);\n      this.reBid(itemId, name, currentHighestBid, currentHighestBidder, isCancelled);\n      event.stopPropagation();\n    };\n\n    this.getArtItem = itemId => {\n      console.log(\"get bid method\");\n      const contract = this.state.contract;\n      if (!this.state.accounts) return;\n      const account = this.state.accounts[0];\n      return contract.methods.getArtItem(itemId).call({\n        from: account\n      });\n    };\n\n    this.fetchMyBids = () => {\n      console.log(\"fetch my bids method\");\n      const contract = this.state.contract;\n      if (!this.state.accounts) return;\n      const account = this.state.accounts[0]; // get added items through events emitted\n\n      contract.getPastEvents('LogBid', {\n        filter: {\n          bidder: account\n        },\n        fromBlock: 0,\n        toBlock: 'latest'\n      }, (error, events) => {\n        if (!error) {\n          console.log('events', events); //pick the last user bid for unique items                \n          //(address indexed bidder, uint artItemId, uint indexed bid, address indexed highestBidder, uint highestBid, uint highestBindingBid);  \n\n          let myBids = [];\n          let myBidsSet = new Set();\n\n          for (let i = events.length - 1; i >= 0; i--) {\n            let itemId = events[i].returnValues[1];\n            let currentHighestBid = events[i].returnValues[4];\n            let currentHighestBidder = events[i].returnValues[3];\n            let name = '';\n            let expiry = 0; //if item bid has been saved, skip\n\n            if (myBidsSet.has(itemId)) {\n              continue;\n            }\n\n            myBidsSet.add(itemId);\n            let response = this.getArtItem(itemId);\n            response.then(result => {\n              console.log('place bid: ', result);\n\n              if (result) {\n                name = result[7];\n                expiry = result[5];\n                let isCancelled = result[6];\n                console.log('art item fetched');\n                myBids.push({\n                  itemId: itemId,\n                  name: name,\n                  currentHighestBid: currentHighestBid,\n                  currentHighestBidder: currentHighestBidder,\n                  expiry: expiry,\n                  isCancelled: isCancelled\n                });\n              }\n\n              this.setState({\n                myBids: myBids\n              });\n            }).catch(error => {\n              console.log('get art item error', error);\n            });\n          }\n        } else {\n          console.log(error);\n        }\n      });\n    };\n\n    this.placeBid = event => {\n      event.preventDefault();\n      const contract = this.state.contract;\n      const account = this.state.accounts[0];\n      let bidAmount = this.state.bidAmount;\n      let itemId = this.state.bidItemId;\n      let itemOwner = this.state.bidItemOwner;\n      let currentHighestBid = this.state.newBid.currentHighestBid;\n      let validator = new Validator();\n\n      if (account === itemOwner) {\n        this.setState(prevState => ({\n          error: _objectSpread(_objectSpread({}, prevState.error), {}, {\n            placeBid: 'Error — You can not bid for your own art'\n          })\n        }));\n        return;\n      }\n\n      if (!validator.isValidBidAmount(bidAmount, currentHighestBid)) {\n        this.setState(prevState => ({\n          error: _objectSpread(_objectSpread({}, prevState.error), {}, {\n            placeBid: 'Error — Invalid Bid Amount was placed'\n          })\n        }));\n        return;\n      }\n\n      if (bidAmount < currentHighestBid) {\n        this.setState(prevState => ({\n          error: _objectSpread(_objectSpread({}, prevState.error), {}, {\n            placeBid: 'Error — Bid Amount is smaller than current highest bid price'\n          })\n        }));\n        return;\n      }\n\n      if (isNaN(itemId) || isNaN(bidAmount)) {\n        console.log(\"invalid input was detected!\");\n        return null;\n      }\n\n      let response = contract.methods.placeBid(itemId).send({\n        from: account,\n        value: bidAmount\n      });\n      response.then(result => {\n        console.log('place bid: ', result);\n\n        if (result.status && result.events.LogBid) {\n          this.setState(prevState => ({\n            success: _objectSpread(_objectSpread({}, prevState.success), {}, {\n              placeBid: 'Success — New Bid was placed successfully!'\n            })\n          }));\n          this.fetchArtItems();\n          this.fetchMyBids();\n        } else {\n          console.log('place bid contract call error occured');\n          this.setState(prevState => ({\n            error: _objectSpread(_objectSpread({}, prevState.error), {}, {\n              placeBid: 'Error — A minor error occured. Take a look at the log'\n            })\n          }));\n        }\n      }).catch(error => {\n        console.log('place bid error: ', error);\n        this.setState(prevState => ({\n          error: _objectSpread(_objectSpread({}, prevState.error), {}, {\n            placeBid: error.message\n          })\n        }));\n      });\n    };\n\n    this.resetMessage = () => {\n      let errors = Object.keys(this.state.error);\n\n      for (var propIndex in errors) {\n        let prop = errors[propIndex];\n        console.log(prop);\n        this.setState(prevState => ({\n          error: _objectSpread(_objectSpread({}, prevState.error), {}, {\n            [prop]: ''\n          })\n        }));\n      }\n    };\n\n    this.fetchArtItems = () => {\n      // if(!this.state._isMount) return;\n      const timeAgo = new TimeAgo('en-US');\n      this.setState(prevState => ({\n        loading: _objectSpread(_objectSpread({}, prevState.loading), {}, {\n          fetchArtItems: true\n        })\n      }));\n      console.log(\"fetch art items method\");\n      const contract = this.state.contract;\n      if (!this.state.contract) return;\n      let count = this.state.count; //get last art items added\n\n      contract.getPastEvents('LogAddItem', {\n        fromBlock: 0,\n        toBlock: this.state.latestFetchBlock\n      }, (error, events) => {\n        if (!error) {\n          // console.log('events', events);                \n          let oldArtItems = [];\n          let util = new HelperFunctions();\n\n          var _iterator = _createForOfIteratorHelper(events),\n              _step;\n\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              let event = _step.value;\n              let itemId = event.returnValues[0];\n              let name = event.returnValues[1];\n              let seller = event.returnValues[2];\n              let price = event.returnValues[3];\n              let created = event.returnValues[4];\n              let expiry = event.returnValues[5];\n              let expiryDate = timeAgo.format(util.GetDateFromUNIXTime(Number(created) + Number(expiry))); // console.log('expiring', expiry);\n              // console.log('created', created);\n\n              let createdDate = util.GetDateFromUNIXTime(created).toDateString() + ' ' + util.GetDateFromUNIXTime(created).toLocaleTimeString();\n              let isExpired = false;\n\n              if (new Date() - util.GetDateFromUNIXTime(Number(created) + Number(expiry)) >= 0) {\n                isExpired = true;\n              } //check for existing bids on item, and update price with current highest bid on the item\n              //address indexed bidder, uint indexed artItemId, uint bid, address indexed highestBidder, uint highestBid, uint highestBindingBid);  \n\n\n              contract.getPastEvents('LogBid', {\n                filter: {\n                  artItemId: itemId\n                },\n                fromBlock: 0,\n                toBlock: 'latest'\n              }, (error, events) => {\n                if (!error) {\n                  console.log('events', events); //pick the last bid on item\n\n                  let lastBid = events[events.length - 1];\n\n                  if (lastBid) {\n                    let lastBidCurrentHighestBid = lastBid.returnValues[4];\n\n                    if (lastBidCurrentHighestBid) {\n                      price = lastBidCurrentHighestBid;\n                    }\n                  } //check if auction is closed already                            \n\n\n                  let response = this.getArtItem(itemId);\n                  response.then(result => {\n                    console.log('get art - fetch my arts ', result); // if(result){\n\n                    let isCancelled = result[6];\n                    let specialStatus = null;\n\n                    if (isCancelled) {\n                      specialStatus = /*#__PURE__*/_jsxDEV(MDBBtn, {\n                        className: \"disabled\",\n                        color: \"warning\",\n                        size: \"sm\",\n                        children: \"CANCELLED\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 417,\n                        columnNumber: 57\n                      }, this);\n                    } else if (isExpired) {\n                      specialStatus = /*#__PURE__*/_jsxDEV(MDBBtn, {\n                        className: \"disabled\",\n                        color: \"danger\",\n                        size: \"sm\",\n                        children: \"EXPIRED\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 419,\n                        columnNumber: 57\n                      }, this);\n                    } //excluse canceled autions\n                    // if(!isCancelled){\n\n\n                    oldArtItems.push({\n                      itemId: itemId,\n                      name: name,\n                      owner: util.GetMaskedAccount(seller),\n                      price: new Intl.NumberFormat().format(price),\n                      created: createdDate,\n                      expiry: expiryDate,\n                      join: /*#__PURE__*/_jsxDEV(\"section\", {\n                        children: specialStatus ? specialStatus : /*#__PURE__*/_jsxDEV(MDBBtn, {\n                          color: \"success\",\n                          size: \"sm\",\n                          onClick: this.newBid(itemId, name, price, seller),\n                          children: \"JOIN\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 432,\n                          columnNumber: 51\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 431,\n                        columnNumber: 51\n                      }, this)\n                    });\n                    count--;\n\n                    if (count < 1) {\n                      this.setState({\n                        latestFetchBlock: event.blockNumber\n                      }); // break; limit fetched items\n                    }\n\n                    this.setState({\n                      latestFetchBlock: event.blockNumber\n                    });\n                    this.setState({\n                      artItems: oldArtItems\n                    }); // }\n                    // }\n                  }).catch(error => {\n                    console.log('get art item for fetchMyArtItems error', error);\n                  });\n                }\n              });\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n\n          this.setState(prevState => ({\n            loading: _objectSpread(_objectSpread({}, prevState.loading), {}, {\n              fetchArtItems: false\n            })\n          }));\n        } else {\n          console.log(error);\n        }\n      });\n    };\n\n    this.withdrawFunds = itemId => event => {\n      event.preventDefault();\n      const contract = this.state.contract;\n      const account = this.state.accounts[0];\n      let response = contract.methods.withdraw(itemId).send({\n        from: account\n      });\n      response.then(result => {\n        console.log('withdraw bid: ', result);\n\n        if (result.status && result.events.LogWithdrawal) {\n          let amount = result.events.LogWithdrawal.returnValues[2];\n          this.setState(prevState => ({\n            success: _objectSpread(_objectSpread({}, prevState.success), {}, {\n              withdrawFunds: \"Success \\u2014 All your staked funds (\".concat(amount, \") have been withdrawn!\")\n            })\n          }));\n          this.fetchArtItems();\n          this.fetchMyBids();\n        } else {\n          console.log('withdraw call error occured');\n          this.setState(prevState => ({\n            error: _objectSpread(_objectSpread({}, prevState.error), {}, {\n              withdrawFunds: 'Error — You do not have any funds staked for this art item.'\n            })\n          }));\n        }\n      }).catch(error => {\n        console.log('withdraw error: ', error);\n        this.setState(prevState => ({\n          error: _objectSpread(_objectSpread({}, prevState.error), {}, {\n            withdrawFunds: error.message\n          })\n        }));\n      });\n    };\n\n    this.onFetchArtItems = event => {\n      event.preventDefault();\n      this.fetchArtItems();\n      event.stopPropagation();\n    };\n\n    this.state = {\n      _isMount: false,\n      accounts: this.props.baseAppState.accounts,\n      contract: this.props.baseAppState.contract,\n      priceContract: this.props.baseAppState.priceFeed,\n      price: 0,\n      bidAmount: 0,\n      artHash: [],\n      count: 10,\n      myBids: [],\n      //contains art items already bidded for\n      newBid: null,\n      artItems: [],\n      latestFetchBlock: 'latest',\n      showNewBid: false,\n      loading: {\n        expiringItems: false,\n        items: false,\n        placeBidBtn: false,\n        withdrawBtn: false,\n        fetchArtItems: false\n      },\n      columns: [{\n        label: 'Name',\n        field: 'name',\n        sort: 'asc',\n        width: 150\n      }, {\n        label: 'Owner',\n        field: 'owner',\n        sort: 'asc',\n        width: 270\n      }, {\n        label: 'Price',\n        field: 'price',\n        sort: 'asc',\n        width: 200\n      }, {\n        label: 'Start date',\n        field: 'created',\n        sort: 'asc',\n        width: 250\n      }, {\n        label: 'Auction Ending',\n        field: 'expiry',\n        sort: 'asc',\n        width: 80\n      }, {\n        label: 'Join Auction',\n        field: 'join',\n        sort: 'asc',\n        width: 120\n      }],\n      error: {\n        placeBid: '',\n        withdrawFunds: ''\n      },\n      success: {\n        placeBid: '',\n        withdrawFunds: ''\n      }\n    };\n    this.newBid = this.newBid.bind(this);\n    this.placeBid = this.placeBid.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.selectBid = this.selectBid.bind(this);\n    this.onFetchArtItems = this.onFetchArtItems.bind(this);\n    this.fetchMyBids();\n    this.fetchArtItems();\n  }\n\n  componentWillUnmount() {\n    this.setState({\n      _isMount: false\n    }); // clearInterval(()=>this.backgroundDataSync());\n  }\n\n  componentDidMount() {\n    this.setState({\n      _isMount: true\n    }); // setInterval(()=>{\n    //     if(this.state.contract && this.state.artItems.length < 1){\n    //         this.fetchArtItems();\n    //         //window.location.href='/marketplace/buy';\n    //     }            \n    // }, 10000); \n  }\n\n  componentDidUpdate() {// setInterval(()=>{\n    //     if(!this.state.contract){\n    //         window.location.href='/marketplace/buy';\n    //     }\n    // }, 5000); \n  }\n\n  render() {\n    let util = new HelperFunctions();\n    return /*#__PURE__*/_jsxDEV(MDBContainer, {\n      className: \"page-container\",\n      children: /*#__PURE__*/_jsxDEV(MDBRow, {\n        children: [/*#__PURE__*/_jsxDEV(MDBCol, {\n          md: \"9\",\n          lg: \"9\",\n          xl: \"9\",\n          children: /*#__PURE__*/_jsxDEV(MDBRow, {\n            children: /*#__PURE__*/_jsxDEV(MDBCard, {\n              className: \"p-5 w-100 mr-2\",\n              children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n                children: \"Buy an Art (NFT)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 512,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(MDBCol, {\n                className: \"p-2 mt-4\",\n                children: /*#__PURE__*/_jsxDEV(MDBAnimation, {\n                  type: \"\",\n                  children: [/*#__PURE__*/_jsxDEV(\"section\", {\n                    children: /*#__PURE__*/_jsxDEV(MDBBtn, {\n                      rounded: true,\n                      style: {\n                        position: 'absolute',\n                        right: '10px',\n                        top: '-45px'\n                      },\n                      onClick: this.onFetchArtItems,\n                      color: \"info\",\n                      children: this.state.loading.fetchArtItems ? /*#__PURE__*/_jsxDEV(Spinner, {\n                        style: {\n                          position: 'relative',\n                          left: '-15px'\n                        },\n                        size: \"small\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 516,\n                        columnNumber: 199\n                      }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n                        children: [\"Reload \", /*#__PURE__*/_jsxDEV(MDBIcon, {\n                          className: \"ml-2\",\n                          icon: \"sync-alt\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 516,\n                          columnNumber: 284\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 516,\n                        columnNumber: 271\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 516,\n                      columnNumber: 45\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 515,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(ArtTable, {\n                    rows: this.state.artItems,\n                    columns: this.state.columns\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 518,\n                    columnNumber: 41\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 514,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 513,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 511,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 510,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 509,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(MDBCol, {\n          md: \"3\",\n          lg: \"3\",\n          xl: \"3\",\n          className: \"sidebar\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"MY BIDS\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 529,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 530,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(MDBCard, {\n            className: \"p-4\",\n            children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n              children: \"My Current Bids\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 532,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              className: \"browser-default custom-select\",\n              onChange: this.selectBid,\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                children: \"-- Select Auction --\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 534,\n                columnNumber: 33\n              }, this), this.state.myBids.length > 0 ? this.state.myBids.map((bidItem, index) => {\n                console.log('mybids', this.state.myBids);\n                return /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: bidItem.itemId,\n                  children: [bidItem.name, \"  (\", bidItem.currentHighestBid, \")\"]\n                }, index, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 538,\n                  columnNumber: 48\n                }, this);\n              }) : null]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 533,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 531,\n            columnNumber: 25\n          }, this), this.state.showNewBid && this.state.newBid ? /*#__PURE__*/_jsxDEV(\"section\", {\n            className: \"mt-3\",\n            children: /*#__PURE__*/_jsxDEV(MDBCard, {\n              className: \"p-4\",\n              children: [this.state.error.withdrawFunds ? /*#__PURE__*/_jsxDEV(ArtAlert, {\n                onCloseCallback: this.resetMessage,\n                type: \"danger\",\n                message: this.state.error.withdrawFunds\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 549,\n                columnNumber: 41\n              }, this) : null, this.state.success.withdrawFunds ? /*#__PURE__*/_jsxDEV(ArtAlert, {\n                onCloseCallback: this.resetMessage,\n                type: \"success\",\n                message: this.state.success.withdrawFunds\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 552,\n                columnNumber: 41\n              }, this) : null, this.state.error.placeBid ? /*#__PURE__*/_jsxDEV(ArtAlert, {\n                onCloseCallback: this.resetMessage,\n                type: \"danger\",\n                message: this.state.error.placeBid\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 555,\n                columnNumber: 41\n              }, this) : null, this.state.success.placeBid ? /*#__PURE__*/_jsxDEV(ArtAlert, {\n                onCloseCallback: this.resetMessage,\n                type: \"success\",\n                message: this.state.success.placeBid\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 558,\n                columnNumber: 41\n              }, this) : null, /*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"bidAmount\",\n                className: \"grey-text small text-uppercase\",\n                children: \"Art Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 560,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                disabled: true,\n                value: this.state.newBid.name,\n                id: \"artName\",\n                name: \"artName\",\n                className: \"form-control\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 563,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"highestBidder\",\n                className: \"grey-text small text-uppercase\",\n                children: \"Highest Bidder (Current)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 564,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                disabled: true,\n                value: util.GetMaskedAccount(this.state.newBid.currentHighestBidder) ? util.GetMaskedAccount(this.state.newBid.currentHighestBidder) : '-- Not Available --',\n                id: \"highestBidder\",\n                name: \"artName\",\n                className: \"form-control\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 567,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"currentHighestBid\",\n                className: \"grey-text mt-2 small text-uppercase\",\n                children: \"Highest Bid (Current)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 568,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"number\",\n                disabled: true,\n                value: this.state.newBid.currentHighestBid,\n                id: \"currentHighestBid\",\n                name: \"currentHighestBid\",\n                className: \"form-control\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 571,\n                columnNumber: 41\n              }, this), !this.state.newBid.isCancelled ? /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  htmlFor: \"bidAmount\",\n                  className: \"grey-text mt-2 small text-uppercase\",\n                  children: \"Bid Amount\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 577,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"number\",\n                  min: 0,\n                  value: this.state.bidAmount,\n                  onChange: this.handleChange,\n                  id: \"bidAmount\",\n                  name: \"bidAmount\",\n                  className: \"form-control\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 580,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(MDBRow, {\n                  children: /*#__PURE__*/_jsxDEV(MDBContainer, {\n                    className: \"mt-2\",\n                    children: /*#__PURE__*/_jsxDEV(MDBBtn, {\n                      onClick: this.placeBid,\n                      block: true,\n                      color: \"info\",\n                      children: this.state.loading.placeBidBtn ? /*#__PURE__*/_jsxDEV(Spinner, {\n                        size: \"small\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 584,\n                        columnNumber: 135\n                      }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n                        children: \"Place Bid\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 584,\n                        columnNumber: 161\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 584,\n                      columnNumber: 49\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 583,\n                    columnNumber: 45\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 582,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true) : /*#__PURE__*/_jsxDEV(MDBRow, {\n                children: /*#__PURE__*/_jsxDEV(MDBContainer, {\n                  className: \"mt-2\",\n                  children: /*#__PURE__*/_jsxDEV(MDBBtn, {\n                    onClick: this.withdrawFunds(this.state.newBid.itemId),\n                    block: true,\n                    color: \"info\",\n                    children: this.state.loading.withdrawBtn ? /*#__PURE__*/_jsxDEV(Spinner, {\n                      size: \"small\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 591,\n                      columnNumber: 166\n                    }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n                      children: \"Withdraw\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 591,\n                      columnNumber: 192\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 591,\n                    columnNumber: 49\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 590,\n                  columnNumber: 45\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 589,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 547,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 546,\n            columnNumber: 29\n          }, this) : null]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 527,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 508,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 507,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default MarketPlaceBuy;","map":{"version":3,"sources":["C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/src/pages/MarketPlaceBuy.js"],"names":["MDBAnimation","MDBBtn","MDBCard","MDBCol","MDBContainer","MDBIcon","MDBRow","React","Component","ArtTable","ArtListItem","HelperFunctions","TimeAgo","Validator","ArtAlert","Spinner","MarketPlaceBuy","constructor","props","handleChange","event","preventDefault","key","target","name","value","setState","componentWillMount","contract","state","util","reloadContractAndAccounts","response","web3","accounts","priceContract","priceFeed","backgroundDataSync","setInterval","methods","fetchArtItems","fetchMyBids","newBid","itemId","price","seller","showNewBid","bidItemId","bidItemOwner","console","log","newBidObj","currentHighestBid","stopPropagation","reBid","currentHighestBidder","isCancelled","selectBid","bidItem","myBids","find","item","getArtItem","account","call","from","getPastEvents","filter","bidder","fromBlock","toBlock","error","events","myBidsSet","Set","i","length","returnValues","expiry","has","add","then","result","push","catch","placeBid","bidAmount","itemOwner","validator","prevState","isValidBidAmount","isNaN","send","status","LogBid","success","message","resetMessage","errors","Object","keys","propIndex","prop","timeAgo","loading","count","latestFetchBlock","oldArtItems","created","expiryDate","format","GetDateFromUNIXTime","Number","createdDate","toDateString","toLocaleTimeString","isExpired","Date","artItemId","lastBid","lastBidCurrentHighestBid","specialStatus","owner","GetMaskedAccount","Intl","NumberFormat","join","blockNumber","artItems","withdrawFunds","withdraw","LogWithdrawal","amount","onFetchArtItems","_isMount","baseAppState","artHash","expiringItems","items","placeBidBtn","withdrawBtn","columns","label","field","sort","width","bind","componentWillUnmount","componentDidMount","componentDidUpdate","render","position","right","top","left","map","index"],"mappings":"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","sourcesContent":["import { MDBAnimation, MDBBtn, MDBCard, MDBCol, MDBContainer, MDBIcon, MDBRow } from 'mdbreact';\r\nimport React, { Component } from 'react';\r\nimport ArtTable from '../components/ArtTable';\r\nimport ArtListItem from '../components/ArtListItem';\r\nimport HelperFunctions from '../utils/Util';\r\nimport TimeAgo from 'javascript-time-ago';\r\nimport Validator from '../utils/validator';\r\nimport ArtAlert from '../components/ArtAlert';\r\nimport Spinner from '../components/Spinner';\r\nclass MarketPlaceBuy extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            _isMount: false,\r\n            accounts: this.props.baseAppState.accounts,\r\n            contract: this.props.baseAppState.contract,\r\n            priceContract: this.props.baseAppState.priceFeed,\r\n            price: 0,\r\n            bidAmount: 0,\r\n            artHash: [],\r\n            count: 10,\r\n            myBids:[],//contains art items already bidded for\r\n            newBid: null,\r\n            artItems: [],\r\n            latestFetchBlock: 'latest',\r\n            showNewBid: false,\r\n            loading: {\r\n                expiringItems: false,\r\n                items: false,\r\n                placeBidBtn: false,\r\n                withdrawBtn: false,\r\n                fetchArtItems: false\r\n            },\r\n            columns: [\r\n                {\r\n                  label: 'Name',\r\n                  field: 'name',\r\n                  sort: 'asc',\r\n                  width: 150\r\n                },\r\n                {\r\n                  label: 'Owner',\r\n                  field: 'owner',\r\n                  sort: 'asc',\r\n                  width: 270\r\n                },\r\n                {\r\n                  label: 'Price',\r\n                  field: 'price',\r\n                  sort: 'asc',\r\n                  width: 200\r\n                },\r\n                {\r\n                  label: 'Start date',\r\n                  field: 'created',\r\n                  sort: 'asc',\r\n                  width: 250\r\n                },      \r\n                {\r\n                  label: 'Auction Ending',\r\n                  field: 'expiry',\r\n                  sort: 'asc',\r\n                  width: 80\r\n                },\r\n                {\r\n                    label: 'Join Auction',\r\n                    field: 'join',\r\n                    sort: 'asc',\r\n                    width: 120\r\n                }\r\n            ],            \r\n            error: {\r\n                placeBid: '',\r\n                withdrawFunds: ''                \r\n            },\r\n            success: {\r\n                placeBid: '',\r\n                withdrawFunds: ''\r\n            }\r\n        };\r\n        \r\n        this.newBid = this.newBid.bind(this);\r\n        this.placeBid = this.placeBid.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.selectBid = this.selectBid.bind(this);\r\n        this.onFetchArtItems = this.onFetchArtItems.bind(this);\r\n\r\n        this.fetchMyBids();\r\n        this.fetchArtItems();        \r\n    }\r\n\r\n    handleChange = (event)=>{\r\n        event.preventDefault();\r\n        let key = event.target.name;\r\n        let value = event.target.value;\r\n        this.setState({[key]: value});\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        this.setState({_isMount: false});\r\n        // clearInterval(()=>this.backgroundDataSync());\r\n    }\r\n\r\n    componentWillMount= async ()=>{\r\n        const contract = this.state.contract;\r\n        if ( !contract ) {\r\n            let util = new HelperFunctions();\r\n            let response = await util.reloadContractAndAccounts();\r\n            this.setState({ web3: response.web3, accounts: response.accounts, contract: response.contract, priceContract: response.priceFeed });\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.setState({_isMount: true});    \r\n        // setInterval(()=>{\r\n        //     if(this.state.contract && this.state.artItems.length < 1){\r\n        //         this.fetchArtItems();\r\n        //         //window.location.href='/marketplace/buy';\r\n        //     }            \r\n        // }, 10000); \r\n    }\r\n\r\n    componentDidUpdate(){\r\n        // setInterval(()=>{\r\n        //     if(!this.state.contract){\r\n        //         window.location.href='/marketplace/buy';\r\n        //     }\r\n        // }, 5000); \r\n    }\r\n\r\n    backgroundDataSync =()=>{ //sync every 20 seconds\r\n        setInterval(()=>{\r\n            const contract = this.state.contract;\r\n            if ( contract.methods ) {\r\n                this.fetchArtItems();\r\n                this.fetchMyBids();\r\n            }\r\n        }, 20000); \r\n    }\r\n\r\n    //button fire up card to input new bid details\r\n    newBid = (itemId, name, price, seller=null) => event =>{\r\n        event.preventDefault();\r\n        this.setState({showNewBid: true});\r\n        this.setState({bidItemId: itemId});\r\n        this.setState({bidItemOwner: seller});\r\n        console.log('itemID clicked', itemId);\r\n\r\n        let newBidObj = {name: name, itemId: itemId, currentHighestBid: price};\r\n        this.setState({newBid: newBidObj});\r\n        event.stopPropagation();\r\n    }\r\n\r\n    reBid = (itemId, name, price, currentHighestBidder, isCancelled) =>{\r\n        this.setState({showNewBid: true});\r\n        this.setState({bidItemId: itemId});        \r\n        console.log('itemID clicked', itemId);\r\n\r\n        let newBidObj = {name: name, itemId: itemId, currentHighestBid: price, currentHighestBidder: currentHighestBidder, isCancelled: isCancelled};\r\n        this.setState({newBid: newBidObj});\r\n    }\r\n\r\n    // selects existing bid\r\n    selectBid=(event)=>{\r\n        event.preventDefault();\r\n        let itemId = event.target.value;\r\n\r\n        let bidItem  = this.state.myBids.find(item => item.itemId === itemId);\r\n\r\n        let name = bidItem.name;\r\n        let currentHighestBid = bidItem.currentHighestBid;\r\n        let currentHighestBidder = bidItem.currentHighestBidder;\r\n        let isCancelled = bidItem.isCancelled;\r\n        console.log('item selected name', name);\r\n        console.log('item selected id', itemId);\r\n        console.log('item selected price',currentHighestBid);\r\n        console.log('item selected isCanclled',currentHighestBid);\r\n        this.reBid(itemId, name, currentHighestBid, currentHighestBidder, isCancelled);\r\n        event.stopPropagation();\r\n    }\r\n\r\n    getArtItem = (itemId)=>{\r\n        console.log(\"get bid method\");\r\n        const contract = this.state.contract;\r\n        if(!this.state.accounts) return;\r\n        const account = this.state.accounts[0];    \r\n\r\n        return contract.methods.getArtItem(itemId).call({from: account});\r\n    }\r\n\r\n    fetchMyBids = () => {\r\n        console.log(\"fetch my bids method\");\r\n        const contract = this.state.contract;\r\n        if(!this.state.accounts) return;\r\n        const account = this.state.accounts[0];        \r\n\r\n        // get added items through events emitted\r\n        contract.getPastEvents('LogBid', {\r\n            filter: {bidder: account},  \r\n            fromBlock: 0,\r\n            toBlock: 'latest'\r\n        }, (error, events) => {       \r\n            if (!error){\r\n                console.log('events', events);                \r\n                \r\n                //pick the last user bid for unique items                \r\n                //(address indexed bidder, uint artItemId, uint indexed bid, address indexed highestBidder, uint highestBid, uint highestBindingBid);  \r\n                let myBids = [];\r\n                let myBidsSet = new Set();\r\n\r\n                for(let i = events.length - 1; i >= 0; i--){\r\n                    let itemId = events[i].returnValues[1];\r\n                    let currentHighestBid = events[i].returnValues[4];\r\n                    let currentHighestBidder = events[i].returnValues[3];\r\n                    let name = '';\r\n                    let expiry = 0;\r\n\r\n                    //if item bid has been saved, skip\r\n                    if(myBidsSet.has(itemId)){\r\n                        continue;\r\n                    }\r\n                    myBidsSet.add(itemId);\r\n                    \r\n                    let response = this.getArtItem(itemId);\r\n                    response.then(result => {\r\n                        console.log('place bid: ', result);\r\n                        if(result){\r\n                            name = result[7];\r\n                            expiry = result[5];\r\n                            let isCancelled = result[6];   \r\n                            console.log('art item fetched');\r\n                            myBids.push({\r\n                                itemId: itemId, \r\n                                name: name,\r\n                                currentHighestBid: currentHighestBid, \r\n                                currentHighestBidder: currentHighestBidder, \r\n                                expiry: expiry,\r\n                                isCancelled: isCancelled\r\n                            });\r\n                        }\r\n\r\n                        this.setState({myBids: myBids});\r\n\r\n                    }).catch(error=>{\r\n                        console.log('get art item error', error);\r\n                    });                    \r\n                }\r\n            }\r\n            else {\r\n                console.log(error)\r\n            }\r\n        })\r\n    }\r\n\r\n    placeBid = event =>{\r\n        event.preventDefault();\r\n        \r\n        const contract = this.state.contract;\r\n        const account = this.state.accounts[0];\r\n        let bidAmount = this.state.bidAmount;\r\n        let itemId = this.state.bidItemId;  \r\n        let itemOwner = this.state.bidItemOwner;\r\n        let currentHighestBid = this.state.newBid.currentHighestBid;\r\n        \r\n        let validator = new Validator();\r\n        \r\n        if(account === itemOwner){\r\n            this.setState(prevState => ({\r\n                error: {\r\n                    ...prevState.error,\r\n                    placeBid: 'Error — You can not bid for your own art'\r\n            }})); \r\n            return;\r\n        }\r\n\r\n        if(!validator.isValidBidAmount(bidAmount, currentHighestBid)){\r\n            this.setState(prevState => ({\r\n                error: {\r\n                    ...prevState.error,\r\n                    placeBid: 'Error — Invalid Bid Amount was placed'\r\n            }})); \r\n            return;\r\n        }\r\n\r\n        if(bidAmount < currentHighestBid){\r\n            this.setState(prevState => ({\r\n                error: {\r\n                    ...prevState.error,\r\n                    placeBid: 'Error — Bid Amount is smaller than current highest bid price'\r\n            }})); \r\n            return;\r\n        }\r\n\r\n        if(isNaN(itemId) || isNaN(bidAmount)){\r\n            console.log(\"invalid input was detected!\");\r\n            return null;\r\n        }\r\n\r\n        let response = contract.methods.placeBid(itemId).send({from: account, value: bidAmount});\r\n        \r\n        response.then(result => {\r\n            console.log('place bid: ', result);\r\n            if(result.status && result.events.LogBid){\r\n                this.setState(prevState => ({\r\n                    success: {\r\n                        ...prevState.success,\r\n                        placeBid: 'Success — New Bid was placed successfully!'\r\n                }}));\r\n                this.fetchArtItems();\r\n                this.fetchMyBids();\r\n            }else{\r\n                console.log('place bid contract call error occured')\r\n                this.setState(prevState => ({\r\n                    error: {\r\n                        ...prevState.error,\r\n                        placeBid: 'Error — A minor error occured. Take a look at the log'\r\n                }})); \r\n            }\r\n        }).catch(error=>{\r\n            console.log('place bid error: ', error);\r\n            this.setState(prevState => ({\r\n                error: {\r\n                    ...prevState.error,\r\n                    placeBid: error.message\r\n            }})); \r\n        }); \r\n    }\r\n\r\n    resetMessage = () =>{\r\n        let errors = Object.keys(this.state.error);\r\n        for(var propIndex in errors){\r\n\r\n            let prop = errors[propIndex];\r\n            console.log(prop);\r\n\r\n            this.setState(prevState => ({\r\n                error: {\r\n                    ...prevState.error,\r\n                    [prop]: ''\r\n            }}));\r\n         \r\n        }        \r\n    }\r\n\r\n    fetchArtItems = () =>{\r\n        // if(!this.state._isMount) return;\r\n        const timeAgo = new TimeAgo('en-US');\r\n        this.setState(prevState => ({\r\n            loading: {\r\n                ...prevState.loading,\r\n                fetchArtItems: true\r\n        }}));\r\n\r\n        console.log(\"fetch art items method\");\r\n        const contract = this.state.contract;\r\n        if(!this.state.contract) return;        \r\n\r\n        let count = this.state.count;\r\n\r\n        //get last art items added\r\n        contract.getPastEvents('LogAddItem', {\r\n            fromBlock: 0,\r\n            toBlock: this.state.latestFetchBlock\r\n        }, (error, events) => {       \r\n            if (!error){\r\n                // console.log('events', events);                \r\n                \r\n                let oldArtItems = [];\r\n                let util = new HelperFunctions();\r\n\r\n                for(let event of events){\r\n                    let itemId = event.returnValues[0];\r\n                    let name = event.returnValues[1];\r\n                    let seller = event.returnValues[2];\r\n                    let price = event.returnValues[3];\r\n                    let created = event.returnValues[4];\r\n                    let expiry = event.returnValues[5];\r\n\r\n                    let expiryDate = timeAgo.format(util.GetDateFromUNIXTime(Number(created) + Number(expiry)));\r\n                    // console.log('expiring', expiry);\r\n                    // console.log('created', created);\r\n                    let createdDate = util.GetDateFromUNIXTime(created).toDateString() + ' ' + util.GetDateFromUNIXTime(created).toLocaleTimeString();\r\n                    \r\n                    let isExpired = false;\r\n                    if(new Date() - util.GetDateFromUNIXTime(Number(created) + Number(expiry)) >= 0){\r\n                        isExpired = true;\r\n                    }\r\n\r\n                    //check for existing bids on item, and update price with current highest bid on the item\r\n                    //address indexed bidder, uint indexed artItemId, uint bid, address indexed highestBidder, uint highestBid, uint highestBindingBid);  \r\n                    contract.getPastEvents('LogBid', {\r\n                        filter: {artItemId: itemId},  \r\n                        fromBlock: 0,\r\n                        toBlock: 'latest'\r\n                    }, (error, events) => {       \r\n                        if (!error){\r\n                            console.log('events', events); \r\n\r\n                            //pick the last bid on item\r\n                            let lastBid = events[events.length - 1];\r\n                            if(lastBid){\r\n                                let lastBidCurrentHighestBid = lastBid.returnValues[4];\r\n                                if(lastBidCurrentHighestBid){\r\n                                    price = lastBidCurrentHighestBid;\r\n                                }\r\n                            }\r\n\r\n                            //check if auction is closed already                            \r\n                            let response = this.getArtItem(itemId);\r\n                            response.then(result =>{\r\n                                console.log('get art - fetch my arts ',result);\r\n                                // if(result){\r\n                                    let isCancelled = result[6];   \r\n\r\n                                    let specialStatus = null; \r\n                                    if(isCancelled){\r\n                                        specialStatus = <MDBBtn className=\"disabled\" color=\"warning\" size=\"sm\">CANCELLED</MDBBtn>;\r\n                                    }else if(isExpired){\r\n                                        specialStatus = <MDBBtn className=\"disabled\" color=\"danger\" size=\"sm\">EXPIRED</MDBBtn>;\r\n                                    }\r\n                                    \r\n                                    //excluse canceled autions\r\n                                    // if(!isCancelled){\r\n                                        oldArtItems.push({\r\n                                            itemId: itemId, \r\n                                            name: name, \r\n                                            owner: util.GetMaskedAccount(seller), \r\n                                            price: new Intl.NumberFormat().format(price), \r\n                                            created: createdDate, \r\n                                            expiry: expiryDate,\r\n                                            join: <section>{ specialStatus ?  specialStatus\r\n                                                : <MDBBtn color=\"success\" size=\"sm\" onClick={this.newBid(itemId, name, price, seller)}>JOIN</MDBBtn>}</section>\r\n                                        });\r\n                                        \r\n                                        count--;                    \r\n                                        if(count < 1) {\r\n                                            this.setState({latestFetchBlock: event.blockNumber});\r\n                                            // break; limit fetched items\r\n                                        }\r\n                                        this.setState({latestFetchBlock: event.blockNumber});\r\n                                        this.setState({artItems: oldArtItems});\r\n                                    // }\r\n                                // }\r\n                            }).catch(error=>{\r\n                                console.log('get art item for fetchMyArtItems error', error);\r\n                            });                            \r\n                        }\r\n                    });                    \r\n                }       \r\n                this.setState(prevState => ({\r\n                    loading: {\r\n                        ...prevState.loading,\r\n                        fetchArtItems: false\r\n                }}));                         \r\n            }\r\n            else {\r\n                console.log(error)\r\n            }\r\n        })\r\n    }\r\n\r\n    withdrawFunds =(itemId)=>event=>{\r\n        event.preventDefault();\r\n        const contract = this.state.contract;\r\n        const account = this.state.accounts[0];\r\n\r\n        let response = contract.methods.withdraw(itemId).send({from: account});\r\n        \r\n        response.then(result => {\r\n            console.log('withdraw bid: ', result);\r\n            if(result.status && result.events.LogWithdrawal){\r\n                let amount = result.events.LogWithdrawal.returnValues[2];\r\n                this.setState(prevState => ({\r\n                    success: {\r\n                        ...prevState.success,\r\n                        withdrawFunds: `Success — All your staked funds (${amount}) have been withdrawn!`\r\n                }}));\r\n                this.fetchArtItems();\r\n                this.fetchMyBids();\r\n            }else{\r\n                console.log('withdraw call error occured')\r\n                this.setState(prevState => ({\r\n                    error: {\r\n                        ...prevState.error,\r\n                        withdrawFunds: 'Error — You do not have any funds staked for this art item.'\r\n                }})); \r\n            }\r\n        }).catch(error=>{\r\n            console.log('withdraw error: ', error);\r\n            this.setState(prevState => ({\r\n                error: {\r\n                    ...prevState.error,\r\n                    withdrawFunds: error.message\r\n            }})); \r\n        }); \r\n    }\r\n\r\n    onFetchArtItems =event=>{\r\n        event.preventDefault();\r\n        this.fetchArtItems();\r\n        event.stopPropagation();\r\n    }\r\n\r\n    render() {\r\n        let util = new HelperFunctions();\r\n        return (\r\n            <MDBContainer className=\"page-container\">\r\n                <MDBRow>\r\n                    <MDBCol md=\"9\" lg=\"9\" xl=\"9\">\r\n                        <MDBRow>\r\n                            <MDBCard className=\"p-5 w-100 mr-2\">\r\n                                <h1>Buy an Art (NFT)</h1>\r\n                                <MDBCol className=\"p-2 mt-4\">\r\n                                    <MDBAnimation type=\"\">\r\n                                        <section>\r\n                                            <MDBBtn rounded style={{position:'absolute', right:'10px', top:'-45px'}} onClick={this.onFetchArtItems} color=\"info\" >{this.state.loading.fetchArtItems ? <Spinner style={{position: 'relative', left: '-15px'}} size=\"small\"/> : <span>Reload <MDBIcon className=\"ml-2\" icon=\"sync-alt\" /></span> }</MDBBtn>\r\n                                        </section>\r\n                                        <ArtTable rows={this.state.artItems} columns={this.state.columns}/>\r\n                                        \r\n                                    </MDBAnimation>\r\n                                </MDBCol>  \r\n                            </MDBCard>                                                              \r\n                        </MDBRow>\r\n                    </MDBCol>\r\n                    \r\n                    {/* show closing and latest auctions */}\r\n                    <MDBCol md=\"3\" lg=\"3\" xl=\"3\" className=\"sidebar\">\r\n                        {/* AUCTION BIDDING */}\r\n                        <h2>MY BIDS</h2>\r\n                        <hr />\r\n                        <MDBCard className=\"p-4\">\r\n                            <h5>My Current Bids</h5>\r\n                            <select className=\"browser-default custom-select\" onChange={this.selectBid}>\r\n                                <option>-- Select Auction --</option> \r\n                                {this.state.myBids.length > 0 ?\r\n                                    this.state.myBids.map((bidItem, index)=>{\r\n                                        console.log('mybids', this.state.myBids);\r\n                                        return <option key={index} value={bidItem.itemId}>\r\n                                            {bidItem.name}  ({bidItem.currentHighestBid})\r\n                                         </option>;\r\n                                    })\r\n                                :null}\r\n                            </select>                                    \r\n                        </MDBCard>\r\n                        {this.state.showNewBid && this.state.newBid ?\r\n                            <section className=\"mt-3\">                                \r\n                                <MDBCard className=\"p-4\">\r\n                                    {this.state.error.withdrawFunds ? \r\n                                        <ArtAlert onCloseCallback={this.resetMessage} type=\"danger\" message={this.state.error.withdrawFunds} />                                        \r\n                                    :null}\r\n                                    {this.state.success.withdrawFunds ? \r\n                                        <ArtAlert onCloseCallback={this.resetMessage} type=\"success\" message={this.state.success.withdrawFunds} />                                        \r\n                                    :null}   \r\n                                    {this.state.error.placeBid ? \r\n                                        <ArtAlert onCloseCallback={this.resetMessage} type=\"danger\" message={this.state.error.placeBid} />                                        \r\n                                    :null}\r\n                                    {this.state.success.placeBid ? \r\n                                        <ArtAlert onCloseCallback={this.resetMessage} type=\"success\" message={this.state.success.placeBid} />                                        \r\n                                    :null}   \r\n                                    <label htmlFor=\"bidAmount\" className=\"grey-text small text-uppercase\">\r\n                                        Art Name\r\n                                    </label>                                    \r\n                                    <input type=\"text\" disabled value={this.state.newBid.name} id=\"artName\" name=\"artName\" className=\"form-control\" />\r\n                                    <label htmlFor=\"highestBidder\" className=\"grey-text small text-uppercase\">\r\n                                        Highest Bidder (Current)\r\n                                    </label>                                    \r\n                                    <input type=\"text\" disabled value={util.GetMaskedAccount(this.state.newBid.currentHighestBidder) ? util.GetMaskedAccount(this.state.newBid.currentHighestBidder) : '-- Not Available --'} id=\"highestBidder\" name=\"artName\" className=\"form-control\" />\r\n                                    <label htmlFor=\"currentHighestBid\" className=\"grey-text mt-2 small text-uppercase\">\r\n                                            Highest Bid (Current)\r\n                                        </label>                                    \r\n                                        <input type=\"number\" disabled value={this.state.newBid.currentHighestBid}  \r\n                                                id=\"currentHighestBid\" \r\n                                                name=\"currentHighestBid\" className=\"form-control\" />\r\n\r\n                                    {!this.state.newBid.isCancelled ? \r\n                                    <>\r\n                                        <label htmlFor=\"bidAmount\" className=\"grey-text mt-2 small text-uppercase\">\r\n                                            Bid Amount\r\n                                        </label>\r\n                                        <input type=\"number\" min={0} value={this.state.bidAmount} onChange={this.handleChange} id=\"bidAmount\" name=\"bidAmount\" className=\"form-control\" />\r\n                                        \r\n                                        <MDBRow>\r\n                                            <MDBContainer className=\"mt-2\">\r\n                                                <MDBBtn onClick={this.placeBid} block color=\"info\" >{this.state.loading.placeBidBtn ? <Spinner size=\"small\"/> : <span>Place Bid</span> }</MDBBtn>\r\n                                            </MDBContainer>\r\n                                        </MDBRow>\r\n                                    </>\r\n                                    : \r\n                                        <MDBRow>\r\n                                            <MDBContainer className=\"mt-2\">\r\n                                                <MDBBtn onClick={this.withdrawFunds(this.state.newBid.itemId)} block color=\"info\" >{this.state.loading.withdrawBtn ? <Spinner size=\"small\"/> : <span>Withdraw</span> }</MDBBtn>\r\n                                            </MDBContainer>\r\n                                        </MDBRow>\r\n                                    }\r\n                                    \r\n                                </MDBCard>\r\n                            </section>                            \r\n                        :null}\r\n                        {/* <div className=\"art-side-bar-wrapper pr-2\">\r\n                            {this.state.myBids.length > 0 ?\r\n                                this.state.myBids.map((item, index) => {\r\n                                    return(\r\n                                        <ArtListItem key={index} artTitle={item.name} currentHighestBid=\"\" timeLeft={\"\"} />\r\n                                    );\r\n                                })\r\n                            : <h6 className=\"mt-3\">There are no bids</h6>}\r\n                        </div> */}\r\n                    </MDBCol>\r\n                </MDBRow>\r\n            </MDBContainer>\r\n    \r\n        );\r\n    }\r\n}\r\n\r\nexport default MarketPlaceBuy;"]},"metadata":{},"sourceType":"module"}