{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nconst CID = require('cids');\n\nconst util = require('./util');\n/**\n * Resolves a path within a CBOR block.\n *\n * Returns the value or a link and the partial mising path. This way the\n * IPLD Resolver can fetch the link and continue to resolve.\n *\n * @param {Uint8Array} binaryBlob - Binary representation of a CBOR block\n * @param {string} [path='/'] - Path that should be resolved\n * @returns {Object} result - Result of the path it it was resolved successfully\n * @returns {*} result.value - Value the path resolves to\n * @returns {string} result.remainderPath - If the path resolves half-way to a\n *   link, then the `remainderPath` is the part after the link that can be used\n *   for further resolving\n */\n\n\nexports.resolve = (binaryBlob, path) => {\n  let node = util.deserialize(binaryBlob);\n  const parts = path.split('/').filter(Boolean);\n\n  while (parts.length) {\n    const key = parts.shift();\n\n    if (node[key] === undefined) {\n      throw new Error(\"Object has no property '\".concat(key, \"'\"));\n    }\n\n    node = node[key];\n\n    if (CID.isCID(node)) {\n      return {\n        value: node,\n        remainderPath: parts.join('/')\n      };\n    }\n  }\n\n  return {\n    value: node,\n    remainderPath: ''\n  };\n};\n\nconst traverse = /*#__PURE__*/_regeneratorRuntime.mark(function traverse(node, path) {\n  var _i, _Object$keys, item, nextpath;\n\n  return _regeneratorRuntime.wrap(function traverse$(_context) {\n    while (1) switch (_context.prev = _context.next) {\n      case 0:\n        if (!(node instanceof Uint8Array || CID.isCID(node) || typeof node === 'string' || node === null)) {\n          _context.next = 2;\n          break;\n        }\n\n        return _context.abrupt(\"return\");\n\n      case 2:\n        _i = 0, _Object$keys = Object.keys(node);\n\n      case 3:\n        if (!(_i < _Object$keys.length)) {\n          _context.next = 12;\n          break;\n        }\n\n        item = _Object$keys[_i];\n        nextpath = path === undefined ? item : path + '/' + item;\n        _context.next = 8;\n        return nextpath;\n\n      case 8:\n        return _context.delegateYield(traverse(node[item], nextpath), \"t0\", 9);\n\n      case 9:\n        _i++;\n        _context.next = 3;\n        break;\n\n      case 12:\n      case \"end\":\n        return _context.stop();\n    }\n  }, traverse);\n});\n/**\n * Return all available paths of a block.\n *\n * @generator\n * @param {Uint8Array} binaryBlob - Binary representation of a CBOR block\n * @yields {string} - A single path\n */\n\n\nexports.tree = /*#__PURE__*/_regeneratorRuntime.mark(function _callee(binaryBlob) {\n  var node;\n  return _regeneratorRuntime.wrap(function _callee$(_context2) {\n    while (1) switch (_context2.prev = _context2.next) {\n      case 0:\n        node = util.deserialize(binaryBlob);\n        return _context2.delegateYield(traverse(node), \"t0\", 2);\n\n      case 2:\n      case \"end\":\n        return _context2.stop();\n    }\n  }, _callee);\n});","map":{"version":3,"sources":["C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/ipld-dag-cbor/src/resolver.js"],"names":["CID","require","util","exports","resolve","binaryBlob","path","node","deserialize","parts","split","filter","Boolean","length","key","shift","undefined","Error","isCID","value","remainderPath","join","traverse","Uint8Array","Object","keys","item","nextpath","tree"],"mappings":"AAAA;;;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,MAAD,CAAnB;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,QAAD,CAApB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAE,OAAO,CAACC,OAAR,GAAkB,CAACC,UAAD,EAAaC,IAAb,KAAsB;AACtC,MAAIC,IAAI,GAAGL,IAAI,CAACM,WAAL,CAAiBH,UAAjB,CAAX;AAEA,QAAMI,KAAK,GAAGH,IAAI,CAACI,KAAL,CAAW,GAAX,EAAgBC,MAAhB,CAAuBC,OAAvB,CAAd;;AACA,SAAOH,KAAK,CAACI,MAAb,EAAqB;AACnB,UAAMC,GAAG,GAAGL,KAAK,CAACM,KAAN,EAAZ;;AACA,QAAIR,IAAI,CAACO,GAAD,CAAJ,KAAcE,SAAlB,EAA6B;AAC3B,YAAM,IAAIC,KAAJ,mCAAqCH,GAArC,OAAN;AACD;;AAEDP,IAAAA,IAAI,GAAGA,IAAI,CAACO,GAAD,CAAX;;AACA,QAAId,GAAG,CAACkB,KAAJ,CAAUX,IAAV,CAAJ,EAAqB;AACnB,aAAO;AACLY,QAAAA,KAAK,EAAEZ,IADF;AAELa,QAAAA,aAAa,EAAEX,KAAK,CAACY,IAAN,CAAW,GAAX;AAFV,OAAP;AAID;AACF;;AAED,SAAO;AACLF,IAAAA,KAAK,EAAEZ,IADF;AAELa,IAAAA,aAAa,EAAE;AAFV,GAAP;AAID,CAvBD;;AAyBA,MAAME,QAAQ,yCAAG,SAAXA,QAAW,CAAYf,IAAZ,EAAkBD,IAAlB;AAAA;;AAAA;AAAA;AAAA;AAAA,cAEXC,IAAI,YAAYgB,UAAhB,IAA8BvB,GAAG,CAACkB,KAAJ,CAAUX,IAAV,CAA9B,IAAiD,OAAOA,IAAP,KAAgB,QAAjE,IACAA,IAAI,KAAK,IAHE;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,+BAMIiB,MAAM,CAACC,IAAP,CAAYlB,IAAZ,CANJ;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAMJmB,QAAAA,IANI;AAOPC,QAAAA,QAPO,GAOIrB,IAAI,KAAKU,SAAT,GAAqBU,IAArB,GAA4BpB,IAAI,GAAG,GAAP,GAAaoB,IAP7C;AAAA;AAQb,eAAMC,QAAN;;AARa;AASb,sCAAQL,QAAQ,CAACf,IAAI,CAACmB,IAAD,CAAL,EAAaC,QAAb,CAAhB;;AATa;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,KAAXL,QAAW;AAAA,CAAH,CAAd;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAnB,OAAO,CAACyB,IAAR,yCAAe,iBAAYvB,UAAZ;AAAA;AAAA;AAAA;AAAA;AACPE,QAAAA,IADO,GACAL,IAAI,CAACM,WAAL,CAAiBH,UAAjB,CADA;AAGb,uCAAQiB,QAAQ,CAACf,IAAD,CAAhB;;AAHa;AAAA;AAAA;AAAA;AAAA;AAAA,CAAf","sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst util = require('./util')\n\n/**\n * Resolves a path within a CBOR block.\n *\n * Returns the value or a link and the partial mising path. This way the\n * IPLD Resolver can fetch the link and continue to resolve.\n *\n * @param {Uint8Array} binaryBlob - Binary representation of a CBOR block\n * @param {string} [path='/'] - Path that should be resolved\n * @returns {Object} result - Result of the path it it was resolved successfully\n * @returns {*} result.value - Value the path resolves to\n * @returns {string} result.remainderPath - If the path resolves half-way to a\n *   link, then the `remainderPath` is the part after the link that can be used\n *   for further resolving\n */\nexports.resolve = (binaryBlob, path) => {\n  let node = util.deserialize(binaryBlob)\n\n  const parts = path.split('/').filter(Boolean)\n  while (parts.length) {\n    const key = parts.shift()\n    if (node[key] === undefined) {\n      throw new Error(`Object has no property '${key}'`)\n    }\n\n    node = node[key]\n    if (CID.isCID(node)) {\n      return {\n        value: node,\n        remainderPath: parts.join('/')\n      }\n    }\n  }\n\n  return {\n    value: node,\n    remainderPath: ''\n  }\n}\n\nconst traverse = function * (node, path) {\n  // Traverse only objects and arrays\n  if (node instanceof Uint8Array || CID.isCID(node) || typeof node === 'string' ||\n      node === null) {\n    return\n  }\n  for (const item of Object.keys(node)) {\n    const nextpath = path === undefined ? item : path + '/' + item\n    yield nextpath\n    yield * traverse(node[item], nextpath)\n  }\n}\n\n/**\n * Return all available paths of a block.\n *\n * @generator\n * @param {Uint8Array} binaryBlob - Binary representation of a CBOR block\n * @yields {string} - A single path\n */\nexports.tree = function * (binaryBlob) {\n  const node = util.deserialize(binaryBlob)\n\n  yield * traverse(node)\n}\n"]},"metadata":{},"sourceType":"script"}