{"ast":null,"code":"'use strict';\n\nconst varint = require('varint');\n\nconst encoder = require('./encoder');\n\nfunction int64Encode(val, buffer, dataView, offset) {\n  if (val < 0) {\n    const last = offset + 9;\n    varint.encode(val * -1, buffer, offset);\n    offset += varint.encode.bytes - 1;\n    buffer[offset] = buffer[offset] | 0x80;\n\n    while (offset < last - 1) {\n      offset++;\n      buffer[offset] = 0xff;\n    }\n\n    buffer[last] = 0x01;\n    int64Encode.bytes = 10;\n  } else {\n    varint.encode(val, buffer, offset);\n    int64Encode.bytes = varint.encode.bytes;\n  }\n}\n\nfunction int64Decode(buffer, dataView, offset) {\n  let val = varint.decode(buffer, offset);\n\n  if (val >= Math.pow(2, 63)) {\n    let limit = 9;\n\n    while (buffer[offset + limit - 1] === 0xff) limit--;\n\n    limit = limit || 9;\n    const subset = buffer.subarray(offset, offset + limit);\n    subset[limit - 1] = subset[limit - 1] & 0x7f;\n    val = -1 * varint.decode(subset, 0);\n    int64Decode.bytes = 10;\n  } else {\n    int64Decode.bytes = varint.decode.bytes;\n  }\n\n  return val;\n}\n\nfunction int64EncodingLength(val) {\n  return val < 0 ? 10 : varint.encodingLength(val);\n}\n\nmodule.exports = encoder(0, int64Encode, int64Decode, int64EncodingLength);","map":{"version":3,"sources":["C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/protons/src/compile/encodings/int64.js"],"names":["varint","require","encoder","int64Encode","val","buffer","dataView","offset","last","encode","bytes","int64Decode","decode","Math","pow","limit","subset","subarray","int64EncodingLength","encodingLength","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,WAAD,CAAvB;;AAEA,SAASE,WAAT,CAAsBC,GAAtB,EAA2BC,MAA3B,EAAmCC,QAAnC,EAA6CC,MAA7C,EAAqD;AACnD,MAAIH,GAAG,GAAG,CAAV,EAAa;AACX,UAAMI,IAAI,GAAGD,MAAM,GAAG,CAAtB;AACAP,IAAAA,MAAM,CAACS,MAAP,CAAcL,GAAG,GAAG,CAAC,CAArB,EAAwBC,MAAxB,EAAgCE,MAAhC;AAEAA,IAAAA,MAAM,IAAIP,MAAM,CAACS,MAAP,CAAcC,KAAd,GAAsB,CAAhC;AACAL,IAAAA,MAAM,CAACE,MAAD,CAAN,GAAiBF,MAAM,CAACE,MAAD,CAAN,GAAiB,IAAlC;;AAEA,WAAOA,MAAM,GAAGC,IAAI,GAAG,CAAvB,EAA0B;AACxBD,MAAAA,MAAM;AACNF,MAAAA,MAAM,CAACE,MAAD,CAAN,GAAiB,IAAjB;AACD;;AACDF,IAAAA,MAAM,CAACG,IAAD,CAAN,GAAe,IAAf;AAEAL,IAAAA,WAAW,CAACO,KAAZ,GAAoB,EAApB;AACD,GAdD,MAcO;AACLV,IAAAA,MAAM,CAACS,MAAP,CAAcL,GAAd,EAAmBC,MAAnB,EAA2BE,MAA3B;AACAJ,IAAAA,WAAW,CAACO,KAAZ,GAAoBV,MAAM,CAACS,MAAP,CAAcC,KAAlC;AACD;AACF;;AAED,SAASC,WAAT,CAAsBN,MAAtB,EAA8BC,QAA9B,EAAwCC,MAAxC,EAAgD;AAC9C,MAAIH,GAAG,GAAGJ,MAAM,CAACY,MAAP,CAAcP,MAAd,EAAsBE,MAAtB,CAAV;;AAEA,MAAIH,GAAG,IAAIS,IAAI,CAACC,GAAL,CAAS,CAAT,EAAY,EAAZ,CAAX,EAA4B;AAC1B,QAAIC,KAAK,GAAG,CAAZ;;AACA,WAAOV,MAAM,CAACE,MAAM,GAAGQ,KAAT,GAAiB,CAAlB,CAAN,KAA+B,IAAtC,EAA4CA,KAAK;;AACjDA,IAAAA,KAAK,GAAGA,KAAK,IAAI,CAAjB;AACA,UAAMC,MAAM,GAAGX,MAAM,CAACY,QAAP,CAAgBV,MAAhB,EAAwBA,MAAM,GAAGQ,KAAjC,CAAf;AACAC,IAAAA,MAAM,CAACD,KAAK,GAAG,CAAT,CAAN,GAAoBC,MAAM,CAACD,KAAK,GAAG,CAAT,CAAN,GAAoB,IAAxC;AACAX,IAAAA,GAAG,GAAG,CAAC,CAAD,GAAKJ,MAAM,CAACY,MAAP,CAAcI,MAAd,EAAsB,CAAtB,CAAX;AACAL,IAAAA,WAAW,CAACD,KAAZ,GAAoB,EAApB;AACD,GARD,MAQO;AACLC,IAAAA,WAAW,CAACD,KAAZ,GAAoBV,MAAM,CAACY,MAAP,CAAcF,KAAlC;AACD;;AAED,SAAON,GAAP;AACD;;AAED,SAASc,mBAAT,CAA8Bd,GAA9B,EAAmC;AACjC,SAAOA,GAAG,GAAG,CAAN,GAAU,EAAV,GAAeJ,MAAM,CAACmB,cAAP,CAAsBf,GAAtB,CAAtB;AACD;;AAEDgB,MAAM,CAACC,OAAP,GAAiBnB,OAAO,CAAC,CAAD,EAAIC,WAAJ,EAAiBQ,WAAjB,EAA8BO,mBAA9B,CAAxB","sourcesContent":["'use strict'\n\nconst varint = require('varint')\nconst encoder = require('./encoder')\n\nfunction int64Encode (val, buffer, dataView, offset) {\n  if (val < 0) {\n    const last = offset + 9\n    varint.encode(val * -1, buffer, offset)\n\n    offset += varint.encode.bytes - 1\n    buffer[offset] = buffer[offset] | 0x80\n\n    while (offset < last - 1) {\n      offset++\n      buffer[offset] = 0xff\n    }\n    buffer[last] = 0x01\n\n    int64Encode.bytes = 10\n  } else {\n    varint.encode(val, buffer, offset)\n    int64Encode.bytes = varint.encode.bytes\n  }\n}\n\nfunction int64Decode (buffer, dataView, offset) {\n  let val = varint.decode(buffer, offset)\n\n  if (val >= Math.pow(2, 63)) {\n    let limit = 9\n    while (buffer[offset + limit - 1] === 0xff) limit--\n    limit = limit || 9\n    const subset = buffer.subarray(offset, offset + limit)\n    subset[limit - 1] = subset[limit - 1] & 0x7f\n    val = -1 * varint.decode(subset, 0)\n    int64Decode.bytes = 10\n  } else {\n    int64Decode.bytes = varint.decode.bytes\n  }\n\n  return val\n}\n\nfunction int64EncodingLength (val) {\n  return val < 0 ? 10 : varint.encodingLength(val)\n}\n\nmodule.exports = encoder(0, int64Encode, int64Decode, int64EncodingLength)\n"]},"metadata":{},"sourceType":"script"}