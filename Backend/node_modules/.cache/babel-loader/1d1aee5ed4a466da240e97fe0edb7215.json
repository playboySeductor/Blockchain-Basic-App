{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _objectSpread = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _asyncToGenerator = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nconst CID = require('cids');\n\nconst multihash = require('multihashes');\n\nconst configure = require('../lib/configure');\n\nconst multipartRequest = require('../lib/multipart-request');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\nconst abortSignal = require('../lib/abort-signal');\n\nconst _require = require('native-abort-controller'),\n      AbortController = _require.AbortController;\n\nconst multicodec = require('multicodec');\n\nconst loadFormat = require('../lib/ipld-formats');\n\nmodule.exports = configure((api, opts) => {\n  const load = loadFormat(opts.ipld);\n  /**\n   * @type {import('..').Implements<typeof import('ipfs-core/src/components/dag/put')>}\n   */\n\n  const put = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dagNode, options = {}) {\n      var encodingOptions, cid, settings, format, serialized, controller, signal, res, data;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            if (!(options.cid && (options.format || options.hashAlg))) {\n              _context.next = 4;\n              break;\n            }\n\n            throw new Error('Failed to put DAG node. Provide either `cid` OR `format` and `hashAlg` options');\n\n          case 4:\n            if (!(options.format && !options.hashAlg || !options.format && options.hashAlg)) {\n              _context.next = 6;\n              break;\n            }\n\n            throw new Error('Failed to put DAG node. Provide `format` AND `hashAlg` options');\n\n          case 6:\n            if (options.cid) {\n              cid = new CID(options.cid);\n              encodingOptions = _objectSpread(_objectSpread({}, options), {}, {\n                format: multicodec.getName(cid.code),\n                hashAlg: multihash.decode(cid.multihash).name\n              });\n              delete options.cid;\n            } else {\n              encodingOptions = options;\n            }\n\n            settings = _objectSpread({\n              format: 'dag-cbor',\n              hashAlg: 'sha2-256',\n              inputEnc: 'raw'\n            }, encodingOptions);\n            _context.next = 10;\n            return load(settings.format);\n\n          case 10:\n            format = _context.sent;\n            serialized = format.util.serialize(dagNode); // allow aborting requests on body errors\n\n            controller = new AbortController();\n            signal = abortSignal(controller.signal, settings.signal); // @ts-ignore https://github.com/ipfs/js-ipfs-utils/issues/90\n\n            _context.t0 = api;\n            _context.t1 = _objectSpread;\n            _context.t2 = {\n              timeout: settings.timeout,\n              signal,\n              searchParams: toUrlSearchParams(settings)\n            };\n            _context.next = 19;\n            return multipartRequest(serialized, controller, settings.headers);\n\n          case 19:\n            _context.t3 = _context.sent;\n            _context.t4 = (0, _context.t1)(_context.t2, _context.t3);\n            _context.next = 23;\n            return _context.t0.post.call(_context.t0, 'dag/put', _context.t4);\n\n          case 23:\n            res = _context.sent;\n            _context.next = 26;\n            return res.json();\n\n          case 26:\n            data = _context.sent;\n            return _context.abrupt(\"return\", new CID(data.Cid['/']));\n\n          case 28:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n\n    return function put(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return put;\n});","map":{"version":3,"sources":["C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/ipfs-http-client/src/dag/put.js"],"names":["CID","require","multihash","configure","multipartRequest","toUrlSearchParams","abortSignal","AbortController","multicodec","loadFormat","module","exports","api","opts","load","ipld","put","dagNode","options","cid","format","hashAlg","Error","encodingOptions","getName","code","decode","name","settings","inputEnc","serialized","util","serialize","controller","signal","timeout","searchParams","headers","post","res","json","data","Cid"],"mappings":"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","sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst multihash = require('multihashes')\nconst configure = require('../lib/configure')\nconst multipartRequest = require('../lib/multipart-request')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\nconst abortSignal = require('../lib/abort-signal')\nconst { AbortController } = require('native-abort-controller')\nconst multicodec = require('multicodec')\nconst loadFormat = require('../lib/ipld-formats')\n\nmodule.exports = configure((api, opts) => {\n  const load = loadFormat(opts.ipld)\n\n  /**\n   * @type {import('..').Implements<typeof import('ipfs-core/src/components/dag/put')>}\n   */\n  const put = async (dagNode, options = {}) => {\n    if (options.cid && (options.format || options.hashAlg)) {\n      throw new Error('Failed to put DAG node. Provide either `cid` OR `format` and `hashAlg` options')\n    } else if ((options.format && !options.hashAlg) || (!options.format && options.hashAlg)) {\n      throw new Error('Failed to put DAG node. Provide `format` AND `hashAlg` options')\n    }\n\n    let encodingOptions\n    if (options.cid) {\n      const cid = new CID(options.cid)\n      encodingOptions = {\n        ...options,\n        format: multicodec.getName(cid.code),\n        hashAlg: multihash.decode(cid.multihash).name\n      }\n      delete options.cid\n    } else {\n      encodingOptions = options\n    }\n\n    const settings = {\n      format: 'dag-cbor',\n      hashAlg: 'sha2-256',\n      inputEnc: 'raw',\n      ...encodingOptions\n    }\n\n    const format = await load(settings.format)\n    const serialized = format.util.serialize(dagNode)\n\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, settings.signal)\n\n    // @ts-ignore https://github.com/ipfs/js-ipfs-utils/issues/90\n    const res = await api.post('dag/put', {\n      timeout: settings.timeout,\n      signal,\n      searchParams: toUrlSearchParams(settings),\n      ...(\n        await multipartRequest(serialized, controller, settings.headers)\n      )\n    })\n    const data = await res.json()\n\n    return new CID(data.Cid['/'])\n  }\n\n  return put\n})\n"]},"metadata":{},"sourceType":"script"}