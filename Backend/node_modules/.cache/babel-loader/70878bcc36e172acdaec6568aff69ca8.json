{"ast":null,"code":"'use strict';\n\nvar _objectSpread = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _asyncToGenerator = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _regeneratorRuntime = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncIterator = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nconst uint8ArrayFromString = require('uint8arrays/from-string');\n\nconst uint8ArrayToString = require('uint8arrays/to-string');\n\nconst log = require('debug')('ipfs-http-client:pubsub:subscribe');\n\nconst SubscriptionTracker = require('./subscription-tracker');\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\nmodule.exports = configure((api, options) => {\n  const subsTracker = SubscriptionTracker.singleton();\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(topic, handler, options = {}) {\n      var done, fail, result, ffWorkaround;\n      return _regeneratorRuntime.wrap(function _callee$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            // eslint-disable-line require-await\n            options.signal = subsTracker.subscribe(topic, handler, options.signal);\n            result = new Promise((resolve, reject) => {\n              done = resolve;\n              fail = reject;\n            }); // In Firefox, the initial call to fetch does not resolve until some data\n            // is received. If this doesn't happen within 1 second assume success\n\n            ffWorkaround = setTimeout(() => done(), 1000); // Do this async to not block Firefox\n\n            setTimeout(() => {\n              api.post('pubsub/sub', {\n                timeout: options.timeout,\n                signal: options.signal,\n                searchParams: toUrlSearchParams(_objectSpread({\n                  arg: topic\n                }, options)),\n                headers: options.headers\n              }).catch(err => {\n                // Initial subscribe fail, ensure we clean up\n                subsTracker.unsubscribe(topic, handler);\n                fail(err);\n              }).then(response => {\n                clearTimeout(ffWorkaround);\n\n                if (!response) {\n                  // if there was no response, the subscribe failed\n                  return;\n                }\n\n                readMessages(response.ndjson(), {\n                  onMessage: handler,\n                  onEnd: () => subsTracker.unsubscribe(topic, handler),\n                  onError: options.onError\n                });\n                done();\n              });\n            }, 0);\n            return _context2.abrupt(\"return\", result);\n\n          case 5:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee);\n    }));\n\n    return function (_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n});\n\nfunction readMessages(msgStream, {\n  onMessage,\n  onEnd,\n  onError\n}) {\n  var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, msg;\n\n  return _regeneratorRuntime.async(function readMessages$(_context) {\n    while (1) switch (_context.prev = _context.next) {\n      case 0:\n        onError = onError || log;\n        _context.prev = 1;\n        _iteratorNormalCompletion = true;\n        _didIteratorError = false;\n        _context.prev = 4;\n        _iterator = _asyncIterator(msgStream);\n\n      case 6:\n        _context.next = 8;\n        return _regeneratorRuntime.awrap(_iterator.next());\n\n      case 8:\n        _step = _context.sent;\n        _iteratorNormalCompletion = _step.done;\n        _context.next = 12;\n        return _regeneratorRuntime.awrap(_step.value);\n\n      case 12:\n        _value = _context.sent;\n\n        if (_iteratorNormalCompletion) {\n          _context.next = 28;\n          break;\n        }\n\n        msg = _value;\n        _context.prev = 15;\n\n        if (msg.from) {\n          _context.next = 18;\n          break;\n        }\n\n        return _context.abrupt(\"continue\", 25);\n\n      case 18:\n        onMessage({\n          from: uint8ArrayToString(uint8ArrayFromString(msg.from, 'base64pad'), 'base58btc'),\n          data: uint8ArrayFromString(msg.data, 'base64pad'),\n          seqno: uint8ArrayFromString(msg.seqno, 'base64pad'),\n          topicIDs: msg.topicIDs\n        });\n        _context.next = 25;\n        break;\n\n      case 21:\n        _context.prev = 21;\n        _context.t0 = _context[\"catch\"](15);\n        _context.t0.message = \"Failed to parse pubsub message: \".concat(_context.t0.message);\n        onError(_context.t0, false, msg); // Not fatal\n\n      case 25:\n        _iteratorNormalCompletion = true;\n        _context.next = 6;\n        break;\n\n      case 28:\n        _context.next = 34;\n        break;\n\n      case 30:\n        _context.prev = 30;\n        _context.t1 = _context[\"catch\"](4);\n        _didIteratorError = true;\n        _iteratorError = _context.t1;\n\n      case 34:\n        _context.prev = 34;\n        _context.prev = 35;\n\n        if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n          _context.next = 39;\n          break;\n        }\n\n        _context.next = 39;\n        return _regeneratorRuntime.awrap(_iterator.return());\n\n      case 39:\n        _context.prev = 39;\n\n        if (!_didIteratorError) {\n          _context.next = 42;\n          break;\n        }\n\n        throw _iteratorError;\n\n      case 42:\n        return _context.finish(39);\n\n      case 43:\n        return _context.finish(34);\n\n      case 44:\n        _context.next = 49;\n        break;\n\n      case 46:\n        _context.prev = 46;\n        _context.t2 = _context[\"catch\"](1);\n\n        // FIXME: In testing with Chrome, err.type is undefined (should not be!)\n        // Temporarily use the name property instead.\n        if (_context.t2.type !== 'aborted' && _context.t2.name !== 'AbortError') {\n          onError(_context.t2, true); // Fatal\n        }\n\n      case 49:\n        _context.prev = 49;\n        onEnd();\n        return _context.finish(49);\n\n      case 52:\n      case \"end\":\n        return _context.stop();\n    }\n  }, null, null, [[1, 46, 49, 52], [4, 30, 34, 44], [15, 21], [35,, 39, 43]], Promise);\n}","map":{"version":3,"sources":["C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/ipfs-http-client/src/pubsub/subscribe.js"],"names":["uint8ArrayFromString","require","uint8ArrayToString","log","SubscriptionTracker","configure","toUrlSearchParams","module","exports","api","options","subsTracker","singleton","topic","handler","signal","subscribe","result","Promise","resolve","reject","done","fail","ffWorkaround","setTimeout","post","timeout","searchParams","arg","headers","catch","err","unsubscribe","then","response","clearTimeout","readMessages","ndjson","onMessage","onEnd","onError","msgStream","msg","from","data","seqno","topicIDs","message","type","name"],"mappings":"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","sourcesContent":["'use strict'\n\nconst uint8ArrayFromString = require('uint8arrays/from-string')\nconst uint8ArrayToString = require('uint8arrays/to-string')\nconst log = require('debug')('ipfs-http-client:pubsub:subscribe')\nconst SubscriptionTracker = require('./subscription-tracker')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\nmodule.exports = configure((api, options) => {\n  const subsTracker = SubscriptionTracker.singleton()\n\n  return async (topic, handler, options = {}) => { // eslint-disable-line require-await\n    options.signal = subsTracker.subscribe(topic, handler, options.signal)\n\n    let done\n    let fail\n\n    const result = new Promise((resolve, reject) => {\n      done = resolve\n      fail = reject\n    })\n\n    // In Firefox, the initial call to fetch does not resolve until some data\n    // is received. If this doesn't happen within 1 second assume success\n    const ffWorkaround = setTimeout(() => done(), 1000)\n\n    // Do this async to not block Firefox\n    setTimeout(() => {\n      api.post('pubsub/sub', {\n        timeout: options.timeout,\n        signal: options.signal,\n        searchParams: toUrlSearchParams({\n          arg: topic,\n          ...options\n        }),\n        headers: options.headers\n      })\n        .catch((err) => {\n          // Initial subscribe fail, ensure we clean up\n          subsTracker.unsubscribe(topic, handler)\n\n          fail(err)\n        })\n        .then((response) => {\n          clearTimeout(ffWorkaround)\n\n          if (!response) {\n            // if there was no response, the subscribe failed\n            return\n          }\n\n          readMessages(response.ndjson(), {\n            onMessage: handler,\n            onEnd: () => subsTracker.unsubscribe(topic, handler),\n            onError: options.onError\n          })\n\n          done()\n        })\n    }, 0)\n\n    return result\n  }\n})\n\nasync function readMessages (msgStream, { onMessage, onEnd, onError }) {\n  onError = onError || log\n\n  try {\n    for await (const msg of msgStream) {\n      try {\n        if (!msg.from) {\n          continue\n        }\n\n        onMessage({\n          from: uint8ArrayToString(uint8ArrayFromString(msg.from, 'base64pad'), 'base58btc'),\n          data: uint8ArrayFromString(msg.data, 'base64pad'),\n          seqno: uint8ArrayFromString(msg.seqno, 'base64pad'),\n          topicIDs: msg.topicIDs\n        })\n      } catch (err) {\n        err.message = `Failed to parse pubsub message: ${err.message}`\n        onError(err, false, msg) // Not fatal\n      }\n    }\n  } catch (err) {\n    // FIXME: In testing with Chrome, err.type is undefined (should not be!)\n    // Temporarily use the name property instead.\n    if (err.type !== 'aborted' && err.name !== 'AbortError') {\n      onError(err, true) // Fatal\n    }\n  } finally {\n    onEnd()\n  }\n}\n"]},"metadata":{},"sourceType":"script"}