{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SAINIK\\\\Desktop\\\\LEARNING BTC\\\\NFT-Auction-Marketplace\\\\src\\\\components\\\\LightBox.js\";\nimport React, { Component } from 'react';\nimport FsLightbox from 'fslightbox-react';\nimport ArtView from './ArtView';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass LightBox extends Component {\n  constructor(props) {\n    super(props);\n\n    this.setToggler = () => {\n      this.setState({\n        toggler: !this.state.toggler\n      });\n    };\n\n    this.state = {\n      toggler: false,\n      files: [],\n      groupFilesSources: [],\n      key: 0,\n      shouldOpenOnMount: true\n    };\n  }\n\n  // lightbox requires a remount of component in order to update its props apart from \"toggler\"\n  remountLightbox() {\n    this.setState({\n      shouldOpenOnMount: true\n    }, this.setState({\n      key: this.state.key + 1\n    }));\n  }\n\n  componentDidMount() {\n    this.setToggler();\n    this.remountLightbox();\n  }\n\n  componentWillMount() {\n    //INDIVIDUAL FILES (NOT GROUPS)\n    let newSources = /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: '100%'\n      },\n      children: /*#__PURE__*/_jsxDEV(ArtView, {\n        url: 'https://ipfs.infura.io/ipfs/' + this.props.toView.ipfsHash,\n        artName: this.props.toView.name,\n        children: this.props.children\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 17\n    }, this);\n\n    this.setState({\n      groupFilesSources: [newSources]\n    });\n  }\n\n  closeLightBox() {\n    this.props.closeLightBoxCallback();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"light-box-container\",\n      children: [(console.log('sources to fetch from', this.state.groupFilesSources), console.log('component toggler', this.state.toggler)), this.state.groupFilesSources.length > 0 ? /*#__PURE__*/_jsxDEV(FsLightbox, {\n        toggler: this.state.toggler,\n        onClose: () => this.closeLightBox(),\n        sources: this.state.groupFilesSources,\n        openOnMount: this.state.shouldOpenOnMount // loadOnlyCurrentSource={true}\n\n      }, this.state.key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(FsLightbox, {\n        toggler: this.state.toggler,\n        onClose: () => this.closeLightBox(),\n        sources: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            width: '100%'\n          },\n          children: /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Art file is not available!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 29\n        }, this)]\n      }, this.state.key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default LightBox;","map":{"version":3,"sources":["C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/src/components/LightBox.js"],"names":["React","Component","FsLightbox","ArtView","LightBox","constructor","props","setToggler","setState","toggler","state","files","groupFilesSources","key","shouldOpenOnMount","remountLightbox","componentDidMount","componentWillMount","newSources","width","toView","ipfsHash","name","children","closeLightBox","closeLightBoxCallback","render","console","log","length"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport FsLightbox from 'fslightbox-react';\r\nimport ArtView from './ArtView';\r\n\r\nclass LightBox extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            toggler: false,\r\n            files: [],\r\n            groupFilesSources: [],\r\n            key: 0,\r\n            shouldOpenOnMount: true\r\n        }\r\n    }\r\n\r\n    setToggler=()=>{\r\n        this.setState({toggler: !this.state.toggler});\r\n    }\r\n\r\n    // lightbox requires a remount of component in order to update its props apart from \"toggler\"\r\n    remountLightbox() {\r\n        this.setState({\r\n            shouldOpenOnMount: true\r\n        }, this.setState({\r\n            key: this.state.key + 1\r\n        }));        \r\n    }\r\n\r\n    componentDidMount(){\r\n        this.setToggler();        \r\n        this.remountLightbox();\r\n    }\r\n\r\n    componentWillMount(){        \r\n        //INDIVIDUAL FILES (NOT GROUPS)\r\n        let newSources = \r\n                <div style={{width:'100%'}}>\r\n                    <ArtView url={'https://ipfs.infura.io/ipfs/'+ this.props.toView.ipfsHash} artName={this.props.toView.name}>\r\n                        {this.props.children}\r\n                    </ArtView>\r\n                </div>\r\n            ;\r\n        this.setState({groupFilesSources: [newSources]});                  \r\n    }\r\n\r\n    closeLightBox(){\r\n        this.props.closeLightBoxCallback();\r\n    }\r\n\r\n    render() {\r\n        \r\n        return (\r\n            <div className=\"light-box-container\">\r\n                \r\n                {console.log('sources to fetch from',this.state.groupFilesSources),\r\n                console.log('component toggler', this.state.toggler)}\r\n                {this.state.groupFilesSources.length > 0 ? \r\n                    <FsLightbox\r\n                        toggler={this.state.toggler}            \r\n                        onClose={ () => this.closeLightBox()}\r\n                        sources={this.state.groupFilesSources}\r\n                        key={this.state.key}\r\n                        openOnMount={this.state.shouldOpenOnMount}\r\n                        // loadOnlyCurrentSource={true}\r\n                    />:\r\n                    <FsLightbox\r\n                        toggler={this.state.toggler}            \r\n                        onClose={ () => this.closeLightBox()}\r\n                        sources={[\r\n                            <div style={{width:'100%'}}>\r\n                                <h3>Art file is not available!</h3>\r\n                            </div>\r\n                        ]}\r\n                        key={this.state.key}\r\n                    />\r\n                }   \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LightBox;"]},"metadata":{},"sourceType":"module"}