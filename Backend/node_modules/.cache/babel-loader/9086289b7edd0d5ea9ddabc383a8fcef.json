{"ast":null,"code":"/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\nmodule.exports = function (chai, util) {\n  var Assertion = chai.Assertion;\n\n  function loadShould() {\n    // explicitly define this method as function as to have it's name to include as `ssfi`\n    function shouldGetter() {\n      if (this instanceof String || this instanceof Number || this instanceof Boolean || typeof Symbol === 'function' && this instanceof Symbol) {\n        return new Assertion(this.valueOf(), null, shouldGetter);\n      }\n\n      return new Assertion(this, null, shouldGetter);\n    }\n\n    function shouldSetter(value) {\n      // See https://github.com/chaijs/chai/issues/86: this makes\n      // `whatever.should = someValue` actually set `someValue`, which is\n      // especially useful for `global.should = require('chai').should()`.\n      //\n      // Note that we have to use [[DefineProperty]] instead of [[Put]]\n      // since otherwise we would trigger this very setter!\n      Object.defineProperty(this, 'should', {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n    } // modify Object.prototype to have `should`\n\n\n    Object.defineProperty(Object.prototype, 'should', {\n      set: shouldSetter,\n      get: shouldGetter,\n      configurable: true\n    });\n    var should = {};\n    /**\n     * ### .fail([message])\n     * ### .fail(actual, expected, [message], [operator])\n     *\n     * Throw a failure.\n     *\n     *     should.fail();\n     *     should.fail(\"custom error message\");\n     *     should.fail(1, 2);\n     *     should.fail(1, 2, \"custom error message\");\n     *     should.fail(1, 2, \"custom error message\", \">\");\n     *     should.fail(1, 2, undefined, \">\");\n     *\n     *\n     * @name fail\n     * @param {Mixed} actual\n     * @param {Mixed} expected\n     * @param {String} message\n     * @param {String} operator\n     * @namespace BDD\n     * @api public\n     */\n\n    should.fail = function (actual, expected, message, operator) {\n      if (arguments.length < 2) {\n        message = actual;\n        actual = undefined;\n      }\n\n      message = message || 'should.fail()';\n      throw new chai.AssertionError(message, {\n        actual: actual,\n        expected: expected,\n        operator: operator\n      }, should.fail);\n    };\n    /**\n     * ### .equal(actual, expected, [message])\n     *\n     * Asserts non-strict equality (`==`) of `actual` and `expected`.\n     *\n     *     should.equal(3, '3', '== coerces values to strings');\n     *\n     * @name equal\n     * @param {Mixed} actual\n     * @param {Mixed} expected\n     * @param {String} message\n     * @namespace Should\n     * @api public\n     */\n\n\n    should.equal = function (val1, val2, msg) {\n      new Assertion(val1, msg).to.equal(val2);\n    };\n    /**\n     * ### .throw(function, [constructor/string/regexp], [string/regexp], [message])\n     *\n     * Asserts that `function` will throw an error that is an instance of\n     * `constructor`, or alternately that it will throw an error with message\n     * matching `regexp`.\n     *\n     *     should.throw(fn, 'function throws a reference error');\n     *     should.throw(fn, /function throws a reference error/);\n     *     should.throw(fn, ReferenceError);\n     *     should.throw(fn, ReferenceError, 'function throws a reference error');\n     *     should.throw(fn, ReferenceError, /function throws a reference error/);\n     *\n     * @name throw\n     * @alias Throw\n     * @param {Function} function\n     * @param {ErrorConstructor} constructor\n     * @param {RegExp} regexp\n     * @param {String} message\n     * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n     * @namespace Should\n     * @api public\n     */\n\n\n    should.Throw = function (fn, errt, errs, msg) {\n      new Assertion(fn, msg).to.Throw(errt, errs);\n    };\n    /**\n     * ### .exist\n     *\n     * Asserts that the target is neither `null` nor `undefined`.\n     *\n     *     var foo = 'hi';\n     *\n     *     should.exist(foo, 'foo exists');\n     *\n     * @name exist\n     * @namespace Should\n     * @api public\n     */\n\n\n    should.exist = function (val, msg) {\n      new Assertion(val, msg).to.exist;\n    }; // negation\n\n\n    should.not = {};\n    /**\n     * ### .not.equal(actual, expected, [message])\n     *\n     * Asserts non-strict inequality (`!=`) of `actual` and `expected`.\n     *\n     *     should.not.equal(3, 4, 'these numbers are not equal');\n     *\n     * @name not.equal\n     * @param {Mixed} actual\n     * @param {Mixed} expected\n     * @param {String} message\n     * @namespace Should\n     * @api public\n     */\n\n    should.not.equal = function (val1, val2, msg) {\n      new Assertion(val1, msg).to.not.equal(val2);\n    };\n    /**\n     * ### .throw(function, [constructor/regexp], [message])\n     *\n     * Asserts that `function` will _not_ throw an error that is an instance of\n     * `constructor`, or alternately that it will not throw an error with message\n     * matching `regexp`.\n     *\n     *     should.not.throw(fn, Error, 'function does not throw');\n     *\n     * @name not.throw\n     * @alias not.Throw\n     * @param {Function} function\n     * @param {ErrorConstructor} constructor\n     * @param {RegExp} regexp\n     * @param {String} message\n     * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n     * @namespace Should\n     * @api public\n     */\n\n\n    should.not.Throw = function (fn, errt, errs, msg) {\n      new Assertion(fn, msg).to.not.Throw(errt, errs);\n    };\n    /**\n     * ### .not.exist\n     *\n     * Asserts that the target is neither `null` nor `undefined`.\n     *\n     *     var bar = null;\n     *\n     *     should.not.exist(bar, 'bar does not exist');\n     *\n     * @name not.exist\n     * @namespace Should\n     * @api public\n     */\n\n\n    should.not.exist = function (val, msg) {\n      new Assertion(val, msg).to.not.exist;\n    };\n\n    should['throw'] = should['Throw'];\n    should.not['throw'] = should.not['Throw'];\n    return should;\n  }\n\n  ;\n  chai.should = loadShould;\n  chai.Should = loadShould;\n};","map":{"version":3,"sources":["C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/chai/lib/chai/interface/should.js"],"names":["module","exports","chai","util","Assertion","loadShould","shouldGetter","String","Number","Boolean","Symbol","valueOf","shouldSetter","value","Object","defineProperty","enumerable","configurable","writable","prototype","set","get","should","fail","actual","expected","message","operator","arguments","length","undefined","AssertionError","equal","val1","val2","msg","to","Throw","fn","errt","errs","exist","val","not","Should"],"mappings":"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","sourcesContent":["/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nmodule.exports = function (chai, util) {\n  var Assertion = chai.Assertion;\n\n  function loadShould () {\n    // explicitly define this method as function as to have it's name to include as `ssfi`\n    function shouldGetter() {\n      if (this instanceof String\n          || this instanceof Number\n          || this instanceof Boolean\n          || typeof Symbol === 'function' && this instanceof Symbol) {\n        return new Assertion(this.valueOf(), null, shouldGetter);\n      }\n      return new Assertion(this, null, shouldGetter);\n    }\n    function shouldSetter(value) {\n      // See https://github.com/chaijs/chai/issues/86: this makes\n      // `whatever.should = someValue` actually set `someValue`, which is\n      // especially useful for `global.should = require('chai').should()`.\n      //\n      // Note that we have to use [[DefineProperty]] instead of [[Put]]\n      // since otherwise we would trigger this very setter!\n      Object.defineProperty(this, 'should', {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n    }\n    // modify Object.prototype to have `should`\n    Object.defineProperty(Object.prototype, 'should', {\n      set: shouldSetter\n      , get: shouldGetter\n      , configurable: true\n    });\n\n    var should = {};\n\n    /**\n     * ### .fail([message])\n     * ### .fail(actual, expected, [message], [operator])\n     *\n     * Throw a failure.\n     *\n     *     should.fail();\n     *     should.fail(\"custom error message\");\n     *     should.fail(1, 2);\n     *     should.fail(1, 2, \"custom error message\");\n     *     should.fail(1, 2, \"custom error message\", \">\");\n     *     should.fail(1, 2, undefined, \">\");\n     *\n     *\n     * @name fail\n     * @param {Mixed} actual\n     * @param {Mixed} expected\n     * @param {String} message\n     * @param {String} operator\n     * @namespace BDD\n     * @api public\n     */\n\n    should.fail = function (actual, expected, message, operator) {\n      if (arguments.length < 2) {\n          message = actual;\n          actual = undefined;\n      }\n\n      message = message || 'should.fail()';\n      throw new chai.AssertionError(message, {\n          actual: actual\n        , expected: expected\n        , operator: operator\n      }, should.fail);\n    };\n\n    /**\n     * ### .equal(actual, expected, [message])\n     *\n     * Asserts non-strict equality (`==`) of `actual` and `expected`.\n     *\n     *     should.equal(3, '3', '== coerces values to strings');\n     *\n     * @name equal\n     * @param {Mixed} actual\n     * @param {Mixed} expected\n     * @param {String} message\n     * @namespace Should\n     * @api public\n     */\n\n    should.equal = function (val1, val2, msg) {\n      new Assertion(val1, msg).to.equal(val2);\n    };\n\n    /**\n     * ### .throw(function, [constructor/string/regexp], [string/regexp], [message])\n     *\n     * Asserts that `function` will throw an error that is an instance of\n     * `constructor`, or alternately that it will throw an error with message\n     * matching `regexp`.\n     *\n     *     should.throw(fn, 'function throws a reference error');\n     *     should.throw(fn, /function throws a reference error/);\n     *     should.throw(fn, ReferenceError);\n     *     should.throw(fn, ReferenceError, 'function throws a reference error');\n     *     should.throw(fn, ReferenceError, /function throws a reference error/);\n     *\n     * @name throw\n     * @alias Throw\n     * @param {Function} function\n     * @param {ErrorConstructor} constructor\n     * @param {RegExp} regexp\n     * @param {String} message\n     * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n     * @namespace Should\n     * @api public\n     */\n\n    should.Throw = function (fn, errt, errs, msg) {\n      new Assertion(fn, msg).to.Throw(errt, errs);\n    };\n\n    /**\n     * ### .exist\n     *\n     * Asserts that the target is neither `null` nor `undefined`.\n     *\n     *     var foo = 'hi';\n     *\n     *     should.exist(foo, 'foo exists');\n     *\n     * @name exist\n     * @namespace Should\n     * @api public\n     */\n\n    should.exist = function (val, msg) {\n      new Assertion(val, msg).to.exist;\n    }\n\n    // negation\n    should.not = {}\n\n    /**\n     * ### .not.equal(actual, expected, [message])\n     *\n     * Asserts non-strict inequality (`!=`) of `actual` and `expected`.\n     *\n     *     should.not.equal(3, 4, 'these numbers are not equal');\n     *\n     * @name not.equal\n     * @param {Mixed} actual\n     * @param {Mixed} expected\n     * @param {String} message\n     * @namespace Should\n     * @api public\n     */\n\n    should.not.equal = function (val1, val2, msg) {\n      new Assertion(val1, msg).to.not.equal(val2);\n    };\n\n    /**\n     * ### .throw(function, [constructor/regexp], [message])\n     *\n     * Asserts that `function` will _not_ throw an error that is an instance of\n     * `constructor`, or alternately that it will not throw an error with message\n     * matching `regexp`.\n     *\n     *     should.not.throw(fn, Error, 'function does not throw');\n     *\n     * @name not.throw\n     * @alias not.Throw\n     * @param {Function} function\n     * @param {ErrorConstructor} constructor\n     * @param {RegExp} regexp\n     * @param {String} message\n     * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n     * @namespace Should\n     * @api public\n     */\n\n    should.not.Throw = function (fn, errt, errs, msg) {\n      new Assertion(fn, msg).to.not.Throw(errt, errs);\n    };\n\n    /**\n     * ### .not.exist\n     *\n     * Asserts that the target is neither `null` nor `undefined`.\n     *\n     *     var bar = null;\n     *\n     *     should.not.exist(bar, 'bar does not exist');\n     *\n     * @name not.exist\n     * @namespace Should\n     * @api public\n     */\n\n    should.not.exist = function (val, msg) {\n      new Assertion(val, msg).to.not.exist;\n    }\n\n    should['throw'] = should['Throw'];\n    should.not['throw'] = should.not['Throw'];\n\n    return should;\n  };\n\n  chai.should = loadShould;\n  chai.Should = loadShould;\n};\n"]},"metadata":{},"sourceType":"script"}