{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _objectSpread = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _asyncToGenerator = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nconst uint8ArrayFromString = require('uint8arrays/from-string');\n\nconst multipartRequest = require('../lib/multipart-request');\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\nconst abortSignal = require('../lib/abort-signal');\n\nconst _require = require('native-abort-controller'),\n      AbortController = _require.AbortController;\n\nmodule.exports = configure(api => {\n  /**\n   * @type {import('..').ImplementsMethod<'replace', import('ipfs-core/src/components/config')>}\n   */\n  const replace = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(config, options = {}) {\n      var controller, signal, res;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            // allow aborting requests on body errors\n            controller = new AbortController();\n            signal = abortSignal(controller.signal, options.signal); // @ts-ignore https://github.com/ipfs/js-ipfs-utils/issues/90\n\n            _context.t0 = api;\n            _context.t1 = _objectSpread;\n            _context.t2 = {\n              timeout: options.timeout,\n              signal,\n              searchParams: toUrlSearchParams(options)\n            };\n            _context.next = 7;\n            return multipartRequest(uint8ArrayFromString(JSON.stringify(config)), controller, options.headers);\n\n          case 7:\n            _context.t3 = _context.sent;\n            _context.t4 = (0, _context.t1)(_context.t2, _context.t3);\n            _context.next = 11;\n            return _context.t0.post.call(_context.t0, 'config/replace', _context.t4);\n\n          case 11:\n            res = _context.sent;\n            _context.next = 14;\n            return res.text();\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n\n    return function replace(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return replace;\n});","map":{"version":3,"sources":["C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/ipfs-http-client/src/config/replace.js"],"names":["uint8ArrayFromString","require","multipartRequest","configure","toUrlSearchParams","abortSignal","AbortController","module","exports","api","replace","config","options","controller","signal","timeout","searchParams","JSON","stringify","headers","post","res","text"],"mappings":"AAAA;;;;;;;;AAEA,MAAMA,oBAAoB,GAAGC,OAAO,CAAC,yBAAD,CAApC;;AACA,MAAMC,gBAAgB,GAAGD,OAAO,CAAC,0BAAD,CAAhC;;AACA,MAAME,SAAS,GAAGF,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAMG,iBAAiB,GAAGH,OAAO,CAAC,6BAAD,CAAjC;;AACA,MAAMI,WAAW,GAAGJ,OAAO,CAAC,qBAAD,CAA3B;;iBAC4BA,OAAO,CAAC,yBAAD,C;MAA3BK,e,YAAAA,e;;AAERC,MAAM,CAACC,OAAP,GAAiBL,SAAS,CAACM,GAAG,IAAI;AAChC;AACF;AACA;AACE,QAAMC,OAAO;AAAA,wEAAG,iBAAOC,MAAP,EAAeC,OAAO,GAAG,EAAzB;AAAA;AAAA;AAAA;AAAA;AACd;AACMC,YAAAA,UAFQ,GAEK,IAAIP,eAAJ,EAFL;AAGRQ,YAAAA,MAHQ,GAGCT,WAAW,CAACQ,UAAU,CAACC,MAAZ,EAAoBF,OAAO,CAACE,MAA5B,CAHZ,EAKd;;AALc,0BAMIL,GANJ;AAAA;AAAA;AAOZM,cAAAA,OAAO,EAAEH,OAAO,CAACG,OAPL;AAQZD,cAAAA,MARY;AASZE,cAAAA,YAAY,EAAEZ,iBAAiB,CAACQ,OAAD;AATnB;AAAA;AAAA,mBAWJV,gBAAgB,CAACF,oBAAoB,CAACiB,IAAI,CAACC,SAAL,CAAeP,MAAf,CAAD,CAArB,EAA+CE,UAA/C,EAA2DD,OAAO,CAACO,OAAnE,CAXZ;;AAAA;AAAA;AAAA;AAAA;AAAA,+BAMQC,IANR,mBAMa,gBANb;;AAAA;AAMRC,YAAAA,GANQ;AAAA;AAAA,mBAeRA,GAAG,CAACC,IAAJ,EAfQ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAPZ,OAAO;AAAA;AAAA;AAAA,KAAb;;AAkBA,SAAOA,OAAP;AACD,CAvByB,CAA1B","sourcesContent":["'use strict'\n\nconst uint8ArrayFromString = require('uint8arrays/from-string')\nconst multipartRequest = require('../lib/multipart-request')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\nconst abortSignal = require('../lib/abort-signal')\nconst { AbortController } = require('native-abort-controller')\n\nmodule.exports = configure(api => {\n  /**\n   * @type {import('..').ImplementsMethod<'replace', import('ipfs-core/src/components/config')>}\n   */\n  const replace = async (config, options = {}) => {\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n\n    // @ts-ignore https://github.com/ipfs/js-ipfs-utils/issues/90\n    const res = await api.post('config/replace', {\n      timeout: options.timeout,\n      signal,\n      searchParams: toUrlSearchParams(options),\n      ...(\n        await multipartRequest(uint8ArrayFromString(JSON.stringify(config)), controller, options.headers)\n      )\n    })\n\n    await res.text()\n  }\n\n  return replace\n})\n"]},"metadata":{},"sourceType":"script"}