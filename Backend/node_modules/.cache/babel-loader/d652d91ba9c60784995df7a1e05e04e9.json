{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _objectSpread = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _awaitAsyncGenerator = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _asyncIterator = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nconst CID = require('cids');\n\nconst multiaddr = require('multiaddr');\n\nconst toCamel = require('../lib/object-to-camel');\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\nmodule.exports = configure(api => {\n  /**\n   * @type {import('..').ImplementsMethod<'query', import('ipfs-core/src/components/dht')>}\n   */\n  function query(_x) {\n    return _query.apply(this, arguments);\n  }\n\n  function _query() {\n    _query = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(peerId, options = {}) {\n      var res, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, message;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _awaitAsyncGenerator(api.post('dht/query', {\n              timeout: options.timeout,\n              signal: options.signal,\n              searchParams: toUrlSearchParams(_objectSpread({\n                arg: new CID(\"\".concat(peerId))\n              }, options)),\n              headers: options.headers\n            }));\n\n          case 2:\n            res = _context.sent;\n            _iteratorNormalCompletion = true;\n            _didIteratorError = false;\n            _context.prev = 5;\n            _iterator = _asyncIterator(res.ndjson());\n\n          case 7:\n            _context.next = 9;\n            return _awaitAsyncGenerator(_iterator.next());\n\n          case 9:\n            _step = _context.sent;\n            _iteratorNormalCompletion = _step.done;\n            _context.next = 13;\n            return _awaitAsyncGenerator(_step.value);\n\n          case 13:\n            _value = _context.sent;\n\n            if (_iteratorNormalCompletion) {\n              _context.next = 24;\n              break;\n            }\n\n            message = _value;\n            message = toCamel(message);\n            message.id = new CID(message.id);\n            message.responses = (message.responses || []).map(({\n              ID,\n              Addrs\n            }) => ({\n              id: ID,\n              addrs: (Addrs || []).map(a => multiaddr(a))\n            }));\n            _context.next = 21;\n            return message;\n\n          case 21:\n            _iteratorNormalCompletion = true;\n            _context.next = 7;\n            break;\n\n          case 24:\n            _context.next = 30;\n            break;\n\n          case 26:\n            _context.prev = 26;\n            _context.t0 = _context[\"catch\"](5);\n            _didIteratorError = true;\n            _iteratorError = _context.t0;\n\n          case 30:\n            _context.prev = 30;\n            _context.prev = 31;\n\n            if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n              _context.next = 35;\n              break;\n            }\n\n            _context.next = 35;\n            return _awaitAsyncGenerator(_iterator.return());\n\n          case 35:\n            _context.prev = 35;\n\n            if (!_didIteratorError) {\n              _context.next = 38;\n              break;\n            }\n\n            throw _iteratorError;\n\n          case 38:\n            return _context.finish(35);\n\n          case 39:\n            return _context.finish(30);\n\n          case 40:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee, null, [[5, 26, 30, 40], [31,, 35, 39]]);\n    }));\n    return _query.apply(this, arguments);\n  }\n\n  return query;\n});","map":{"version":3,"sources":["C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/ipfs-http-client/src/dht/query.js"],"names":["CID","require","multiaddr","toCamel","configure","toUrlSearchParams","module","exports","api","query","peerId","options","post","timeout","signal","searchParams","arg","headers","res","ndjson","message","id","responses","map","ID","Addrs","addrs","a"],"mappings":"AAAA;;;;;;;;;;;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,MAAD,CAAnB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,WAAD,CAAzB;;AACA,MAAME,OAAO,GAAGF,OAAO,CAAC,wBAAD,CAAvB;;AACA,MAAMG,SAAS,GAAGH,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAMI,iBAAiB,GAAGJ,OAAO,CAAC,6BAAD,CAAjC;;AAEAK,MAAM,CAACC,OAAP,GAAiBH,SAAS,CAACI,GAAG,IAAI;AAChC;AACF;AACA;AAHkC,WAIfC,KAJe;AAAA;AAAA;;AAAA;AAAA,wEAIhC,iBAAwBC,MAAxB,EAAgCC,OAAO,GAAG,EAA1C;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,wCACoBH,GAAG,CAACI,IAAJ,CAAS,WAAT,EAAsB;AACtCC,cAAAA,OAAO,EAAEF,OAAO,CAACE,OADqB;AAEtCC,cAAAA,MAAM,EAAEH,OAAO,CAACG,MAFsB;AAGtCC,cAAAA,YAAY,EAAEV,iBAAiB;AAC7BW,gBAAAA,GAAG,EAAE,IAAIhB,GAAJ,WAAWU,MAAX;AADwB,iBAE1BC,OAF0B,EAHO;AAOtCM,cAAAA,OAAO,EAAEN,OAAO,CAACM;AAPqB,aAAtB,CADpB;;AAAA;AACQC,YAAAA,GADR;AAAA;AAAA;AAAA;AAAA,uCAW4BA,GAAG,CAACC,MAAJ,EAX5B;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAWiBC,YAAAA,OAXjB;AAYIA,YAAAA,OAAO,GAAGjB,OAAO,CAACiB,OAAD,CAAjB;AACAA,YAAAA,OAAO,CAACC,EAAR,GAAa,IAAIrB,GAAJ,CAAQoB,OAAO,CAACC,EAAhB,CAAb;AACAD,YAAAA,OAAO,CAACE,SAAR,GAAoB,CAACF,OAAO,CAACE,SAAR,IAAqB,EAAtB,EAA0BC,GAA1B,CAA8B,CAAC;AAAEC,cAAAA,EAAF;AAAMC,cAAAA;AAAN,aAAD,MAAoB;AACpEJ,cAAAA,EAAE,EAAEG,EADgE;AAEpEE,cAAAA,KAAK,EAAE,CAACD,KAAK,IAAI,EAAV,EAAcF,GAAd,CAAkBI,CAAC,IAAIzB,SAAS,CAACyB,CAAD,CAAhC;AAF6D,aAApB,CAA9B,CAApB;AAdJ;AAkBI,mBAAMP,OAAN;;AAlBJ;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAJgC;AAAA;AAAA;;AA0BhC,SAAOX,KAAP;AACD,CA3ByB,CAA1B","sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst multiaddr = require('multiaddr')\nconst toCamel = require('../lib/object-to-camel')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\nmodule.exports = configure(api => {\n  /**\n   * @type {import('..').ImplementsMethod<'query', import('ipfs-core/src/components/dht')>}\n   */\n  async function * query (peerId, options = {}) {\n    const res = await api.post('dht/query', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: new CID(`${peerId}`),\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    for await (let message of res.ndjson()) {\n      message = toCamel(message)\n      message.id = new CID(message.id)\n      message.responses = (message.responses || []).map(({ ID, Addrs }) => ({\n        id: ID,\n        addrs: (Addrs || []).map(a => multiaddr(a))\n      }))\n      yield message\n    }\n  }\n\n  return query\n})\n"]},"metadata":{},"sourceType":"script"}