{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _createForOfIteratorHelper = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _objectSpread = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _awaitAsyncGenerator = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _asyncIterator = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nconst CID = require('cids');\n\nconst multiaddr = require('multiaddr');\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\nconst _require = require('./response-types'),\n      Provider = _require.Provider;\n\nmodule.exports = configure(api => {\n  /**\n   * @type {import('..').ImplementsMethod<'findProvs', import('ipfs-core/src/components/dht')>}\n   */\n  function findProvs(_x) {\n    return _findProvs.apply(this, arguments);\n  }\n\n  function _findProvs() {\n    _findProvs = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(cid, options = {}) {\n      var res, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, message, _iterator2, _step2, _step2$value, ID, Addrs;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _awaitAsyncGenerator(api.post('dht/findprovs', {\n              timeout: options.timeout,\n              signal: options.signal,\n              searchParams: toUrlSearchParams(_objectSpread({\n                arg: \"\".concat(new CID(cid))\n              }, options)),\n              headers: options.headers\n            }));\n\n          case 2:\n            res = _context.sent;\n            _iteratorNormalCompletion = true;\n            _didIteratorError = false;\n            _context.prev = 5;\n            _iterator = _asyncIterator(res.ndjson());\n\n          case 7:\n            _context.next = 9;\n            return _awaitAsyncGenerator(_iterator.next());\n\n          case 9:\n            _step = _context.sent;\n            _iteratorNormalCompletion = _step.done;\n            _context.next = 13;\n            return _awaitAsyncGenerator(_step.value);\n\n          case 13:\n            _value = _context.sent;\n\n            if (_iteratorNormalCompletion) {\n              _context.next = 37;\n              break;\n            }\n\n            message = _value;\n\n            if (!(message.Type === Provider && message.Responses)) {\n              _context.next = 34;\n              break;\n            }\n\n            _iterator2 = _createForOfIteratorHelper(message.Responses);\n            _context.prev = 18;\n\n            _iterator2.s();\n\n          case 20:\n            if ((_step2 = _iterator2.n()).done) {\n              _context.next = 26;\n              break;\n            }\n\n            _step2$value = _step2.value, ID = _step2$value.ID, Addrs = _step2$value.Addrs;\n            _context.next = 24;\n            return {\n              id: ID,\n              addrs: (Addrs || []).map(a => multiaddr(a))\n            };\n\n          case 24:\n            _context.next = 20;\n            break;\n\n          case 26:\n            _context.next = 31;\n            break;\n\n          case 28:\n            _context.prev = 28;\n            _context.t0 = _context[\"catch\"](18);\n\n            _iterator2.e(_context.t0);\n\n          case 31:\n            _context.prev = 31;\n\n            _iterator2.f();\n\n            return _context.finish(31);\n\n          case 34:\n            _iteratorNormalCompletion = true;\n            _context.next = 7;\n            break;\n\n          case 37:\n            _context.next = 43;\n            break;\n\n          case 39:\n            _context.prev = 39;\n            _context.t1 = _context[\"catch\"](5);\n            _didIteratorError = true;\n            _iteratorError = _context.t1;\n\n          case 43:\n            _context.prev = 43;\n            _context.prev = 44;\n\n            if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n              _context.next = 48;\n              break;\n            }\n\n            _context.next = 48;\n            return _awaitAsyncGenerator(_iterator.return());\n\n          case 48:\n            _context.prev = 48;\n\n            if (!_didIteratorError) {\n              _context.next = 51;\n              break;\n            }\n\n            throw _iteratorError;\n\n          case 51:\n            return _context.finish(48);\n\n          case 52:\n            return _context.finish(43);\n\n          case 53:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee, null, [[5, 39, 43, 53], [18, 28, 31, 34], [44,, 48, 52]]);\n    }));\n    return _findProvs.apply(this, arguments);\n  }\n\n  return findProvs;\n});","map":{"version":3,"sources":["C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/ipfs-http-client/src/dht/find-provs.js"],"names":["CID","require","multiaddr","configure","toUrlSearchParams","Provider","module","exports","api","findProvs","cid","options","post","timeout","signal","searchParams","arg","headers","res","ndjson","message","Type","Responses","ID","Addrs","id","addrs","map","a"],"mappings":"AAAA;;;;;;;;;;;;;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,MAAD,CAAnB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,WAAD,CAAzB;;AACA,MAAME,SAAS,GAAGF,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAMG,iBAAiB,GAAGH,OAAO,CAAC,6BAAD,CAAjC;;iBACqBA,OAAO,CAAC,kBAAD,C;MAApBI,Q,YAAAA,Q;;AAERC,MAAM,CAACC,OAAP,GAAiBJ,SAAS,CAACK,GAAG,IAAI;AAChC;AACF;AACA;AAHkC,WAIfC,SAJe;AAAA;AAAA;;AAAA;AAAA,4EAIhC,iBAA4BC,GAA5B,EAAiCC,OAAO,GAAG,EAA3C;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,wCACoBH,GAAG,CAACI,IAAJ,CAAS,eAAT,EAA0B;AAC1CC,cAAAA,OAAO,EAAEF,OAAO,CAACE,OADyB;AAE1CC,cAAAA,MAAM,EAAEH,OAAO,CAACG,MAF0B;AAG1CC,cAAAA,YAAY,EAAEX,iBAAiB;AAC7BY,gBAAAA,GAAG,YAAK,IAAIhB,GAAJ,CAAQU,GAAR,CAAL;AAD0B,iBAE1BC,OAF0B,EAHW;AAO1CM,cAAAA,OAAO,EAAEN,OAAO,CAACM;AAPyB,aAA1B,CADpB;;AAAA;AACQC,YAAAA,GADR;AAAA;AAAA;AAAA;AAAA,uCAW8BA,GAAG,CAACC,MAAJ,EAX9B;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAWmBC,YAAAA,OAXnB;;AAAA,kBAYQA,OAAO,CAACC,IAAR,KAAiBhB,QAAjB,IAA6Be,OAAO,CAACE,SAZ7C;AAAA;AAAA;AAAA;;AAAA,oDAakCF,OAAO,CAACE,SAb1C;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,yCAamBC,EAbnB,gBAamBA,EAbnB,EAauBC,KAbvB,gBAauBA,KAbvB;AAAA;AAcQ,mBAAM;AACJC,cAAAA,EAAE,EAAEF,EADA;AAEJG,cAAAA,KAAK,EAAE,CAACF,KAAK,IAAI,EAAV,EAAcG,GAAd,CAAkBC,CAAC,IAAI1B,SAAS,CAAC0B,CAAD,CAAhC;AAFH,aAAN;;AAdR;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAJgC;AAAA;AAAA;;AA2BhC,SAAOnB,SAAP;AACD,CA5ByB,CAA1B","sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst multiaddr = require('multiaddr')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\nconst { Provider } = require('./response-types')\n\nmodule.exports = configure(api => {\n  /**\n   * @type {import('..').ImplementsMethod<'findProvs', import('ipfs-core/src/components/dht')>}\n   */\n  async function * findProvs (cid, options = {}) {\n    const res = await api.post('dht/findprovs', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: `${new CID(cid)}`,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    for await (const message of res.ndjson()) {\n      if (message.Type === Provider && message.Responses) {\n        for (const { ID, Addrs } of message.Responses) {\n          yield {\n            id: ID,\n            addrs: (Addrs || []).map(a => multiaddr(a))\n          }\n        }\n      }\n    }\n  }\n\n  return findProvs\n})\n"]},"metadata":{},"sourceType":"script"}