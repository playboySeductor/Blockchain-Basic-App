{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _objectSpread = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _asyncToGenerator = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nconst CID = require('cids');\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\nmodule.exports = configure(api => {\n  /**\n   * @type {import('..').Implements<typeof import('ipfs-core/src/components/block/stat')>}\n   */\n  function stat(_x) {\n    return _stat.apply(this, arguments);\n  }\n\n  function _stat() {\n    _stat = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(cid, options = {}) {\n      var res, data;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return api.post('block/stat', {\n              timeout: options.timeout,\n              signal: options.signal,\n              searchParams: toUrlSearchParams(_objectSpread({\n                arg: new CID(cid).toString()\n              }, options)),\n              headers: options.headers\n            });\n\n          case 2:\n            res = _context.sent;\n            _context.next = 5;\n            return res.json();\n\n          case 5:\n            data = _context.sent;\n            return _context.abrupt(\"return\", {\n              cid: new CID(data.Key),\n              size: data.Size\n            });\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n    return _stat.apply(this, arguments);\n  }\n\n  return stat;\n});","map":{"version":3,"sources":["C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/ipfs-http-client/src/block/stat.js"],"names":["CID","require","configure","toUrlSearchParams","module","exports","api","stat","cid","options","post","timeout","signal","searchParams","arg","toString","headers","res","json","data","Key","size","Size"],"mappings":"AAAA;;;;;;;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,MAAD,CAAnB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAME,iBAAiB,GAAGF,OAAO,CAAC,6BAAD,CAAjC;;AAEAG,MAAM,CAACC,OAAP,GAAiBH,SAAS,CAACI,GAAG,IAAI;AAChC;AACF;AACA;AAHkC,WAIjBC,IAJiB;AAAA;AAAA;;AAAA;AAAA,qEAIhC,iBAAqBC,GAArB,EAA0BC,OAAO,GAAG,EAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACoBH,GAAG,CAACI,IAAJ,CAAS,YAAT,EAAuB;AACvCC,cAAAA,OAAO,EAAEF,OAAO,CAACE,OADsB;AAEvCC,cAAAA,MAAM,EAAEH,OAAO,CAACG,MAFuB;AAGvCC,cAAAA,YAAY,EAAEV,iBAAiB;AAC7BW,gBAAAA,GAAG,EAAE,IAAId,GAAJ,CAAQQ,GAAR,EAAaO,QAAb;AADwB,iBAE1BN,OAF0B,EAHQ;AAOvCO,cAAAA,OAAO,EAAEP,OAAO,CAACO;AAPsB,aAAvB,CADpB;;AAAA;AACQC,YAAAA,GADR;AAAA;AAAA,mBAUqBA,GAAG,CAACC,IAAJ,EAVrB;;AAAA;AAUQC,YAAAA,IAVR;AAAA,6CAYS;AAAEX,cAAAA,GAAG,EAAE,IAAIR,GAAJ,CAAQmB,IAAI,CAACC,GAAb,CAAP;AAA0BC,cAAAA,IAAI,EAAEF,IAAI,CAACG;AAArC,aAZT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAJgC;AAAA;AAAA;;AAmBhC,SAAOf,IAAP;AACD,CApByB,CAA1B","sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\nmodule.exports = configure(api => {\n  /**\n   * @type {import('..').Implements<typeof import('ipfs-core/src/components/block/stat')>}\n   */\n  async function stat (cid, options = {}) {\n    const res = await api.post('block/stat', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: new CID(cid).toString(),\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    return { cid: new CID(data.Key), size: data.Size }\n  }\n\n  return stat\n})\n"]},"metadata":{},"sourceType":"script"}