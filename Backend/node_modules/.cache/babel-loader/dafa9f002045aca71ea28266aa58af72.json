{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _objectSpread = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _awaitAsyncGenerator = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _asyncIterator = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nconst CID = require('cids');\n\nconst multiaddr = require('multiaddr');\n\nconst toCamel = require('../lib/object-to-camel');\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\nconst multipartRequest = require('../lib/multipart-request');\n\nconst abortSignal = require('../lib/abort-signal');\n\nconst _require = require('native-abort-controller'),\n      AbortController = _require.AbortController;\n\nmodule.exports = configure(api => {\n  /**\n   * @type {import('..').ImplementsMethod<'put', import('ipfs-core/src/components/dht')>}\n   */\n  function put(_x, _x2) {\n    return _put.apply(this, arguments);\n  }\n\n  function _put() {\n    _put = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(key, value, options = {}) {\n      var controller, signal, res, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, message;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            // allow aborting requests on body errors\n            controller = new AbortController();\n            signal = abortSignal(controller.signal, options.signal); // @ts-ignore https://github.com/ipfs/js-ipfs-utils/issues/90\n\n            _context.t0 = _awaitAsyncGenerator;\n            _context.t1 = api;\n            _context.t2 = _objectSpread;\n            _context.t3 = {\n              timeout: options.timeout,\n              signal,\n              searchParams: toUrlSearchParams(_objectSpread({\n                arg: key\n              }, options))\n            };\n            _context.next = 8;\n            return _awaitAsyncGenerator(multipartRequest(value, controller, options.headers));\n\n          case 8:\n            _context.t4 = _context.sent;\n            _context.t5 = (0, _context.t2)(_context.t3, _context.t4);\n            _context.t6 = _context.t1.post.call(_context.t1, 'dht/put', _context.t5);\n            _context.next = 13;\n            return (0, _context.t0)(_context.t6);\n\n          case 13:\n            res = _context.sent;\n            _iteratorNormalCompletion = true;\n            _didIteratorError = false;\n            _context.prev = 16;\n            _iterator = _asyncIterator(res.ndjson());\n\n          case 18:\n            _context.next = 20;\n            return _awaitAsyncGenerator(_iterator.next());\n\n          case 20:\n            _step = _context.sent;\n            _iteratorNormalCompletion = _step.done;\n            _context.next = 24;\n            return _awaitAsyncGenerator(_step.value);\n\n          case 24:\n            _value = _context.sent;\n\n            if (_iteratorNormalCompletion) {\n              _context.next = 35;\n              break;\n            }\n\n            message = _value;\n            message = toCamel(message);\n            message.id = new CID(message.id);\n\n            if (message.responses) {\n              message.responses = message.responses.map(({\n                ID,\n                Addrs\n              }) => ({\n                id: ID,\n                addrs: (Addrs || []).map(a => multiaddr(a))\n              }));\n            }\n\n            _context.next = 32;\n            return message;\n\n          case 32:\n            _iteratorNormalCompletion = true;\n            _context.next = 18;\n            break;\n\n          case 35:\n            _context.next = 41;\n            break;\n\n          case 37:\n            _context.prev = 37;\n            _context.t7 = _context[\"catch\"](16);\n            _didIteratorError = true;\n            _iteratorError = _context.t7;\n\n          case 41:\n            _context.prev = 41;\n            _context.prev = 42;\n\n            if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n              _context.next = 46;\n              break;\n            }\n\n            _context.next = 46;\n            return _awaitAsyncGenerator(_iterator.return());\n\n          case 46:\n            _context.prev = 46;\n\n            if (!_didIteratorError) {\n              _context.next = 49;\n              break;\n            }\n\n            throw _iteratorError;\n\n          case 49:\n            return _context.finish(46);\n\n          case 50:\n            return _context.finish(41);\n\n          case 51:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee, null, [[16, 37, 41, 51], [42,, 46, 50]]);\n    }));\n    return _put.apply(this, arguments);\n  }\n\n  return put;\n});","map":{"version":3,"sources":["C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/ipfs-http-client/src/dht/put.js"],"names":["CID","require","multiaddr","toCamel","configure","toUrlSearchParams","multipartRequest","abortSignal","AbortController","module","exports","api","put","key","value","options","controller","signal","timeout","searchParams","arg","headers","post","res","ndjson","message","id","responses","map","ID","Addrs","addrs","a"],"mappings":"AAAA;;;;;;;;;;;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,MAAD,CAAnB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,WAAD,CAAzB;;AACA,MAAME,OAAO,GAAGF,OAAO,CAAC,wBAAD,CAAvB;;AACA,MAAMG,SAAS,GAAGH,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAMI,iBAAiB,GAAGJ,OAAO,CAAC,6BAAD,CAAjC;;AACA,MAAMK,gBAAgB,GAAGL,OAAO,CAAC,0BAAD,CAAhC;;AACA,MAAMM,WAAW,GAAGN,OAAO,CAAC,qBAAD,CAA3B;;iBAC4BA,OAAO,CAAC,yBAAD,C;MAA3BO,e,YAAAA,e;;AACRC,MAAM,CAACC,OAAP,GAAiBN,SAAS,CAACO,GAAG,IAAI;AAChC;AACF;AACA;AAHkC,WAIfC,GAJe;AAAA;AAAA;;AAAA;AAAA,sEAIhC,iBAAsBC,GAAtB,EAA2BC,KAA3B,EAAkCC,OAAO,GAAG,EAA5C;AAAA;;AAAA;AAAA;AAAA;AACE;AACMC,YAAAA,UAFR,GAEqB,IAAIR,eAAJ,EAFrB;AAGQS,YAAAA,MAHR,GAGiBV,WAAW,CAACS,UAAU,CAACC,MAAZ,EAAoBF,OAAO,CAACE,MAA5B,CAH5B,EAKE;;AALF;AAAA,0BAMoBN,GANpB;AAAA;AAAA;AAOIO,cAAAA,OAAO,EAAEH,OAAO,CAACG,OAPrB;AAQID,cAAAA,MARJ;AASIE,cAAAA,YAAY,EAAEd,iBAAiB;AAC7Be,gBAAAA,GAAG,EAAEP;AADwB,iBAE1BE,OAF0B;AATnC;AAAA;AAAA,wCAcYT,gBAAgB,CAACQ,KAAD,EAAQE,UAAR,EAAoBD,OAAO,CAACM,OAA5B,CAd5B;;AAAA;AAAA;AAAA;AAAA,sCAMwBC,IANxB,mBAM6B,SAN7B;AAAA;AAAA;;AAAA;AAMQC,YAAAA,GANR;AAAA;AAAA;AAAA;AAAA,uCAkB4BA,GAAG,CAACC,MAAJ,EAlB5B;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAkBiBC,YAAAA,OAlBjB;AAmBIA,YAAAA,OAAO,GAAGtB,OAAO,CAACsB,OAAD,CAAjB;AACAA,YAAAA,OAAO,CAACC,EAAR,GAAa,IAAI1B,GAAJ,CAAQyB,OAAO,CAACC,EAAhB,CAAb;;AACA,gBAAID,OAAO,CAACE,SAAZ,EAAuB;AACrBF,cAAAA,OAAO,CAACE,SAAR,GAAoBF,OAAO,CAACE,SAAR,CAAkBC,GAAlB,CAAsB,CAAC;AAAEC,gBAAAA,EAAF;AAAMC,gBAAAA;AAAN,eAAD,MAAoB;AAC5DJ,gBAAAA,EAAE,EAAEG,EADwD;AAE5DE,gBAAAA,KAAK,EAAE,CAACD,KAAK,IAAI,EAAV,EAAcF,GAAd,CAAkBI,CAAC,IAAI9B,SAAS,CAAC8B,CAAD,CAAhC;AAFqD,eAApB,CAAtB,CAApB;AAID;;AA1BL;AA2BI,mBAAMP,OAAN;;AA3BJ;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAJgC;AAAA;AAAA;;AAmChC,SAAOb,GAAP;AACD,CApCyB,CAA1B","sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst multiaddr = require('multiaddr')\nconst toCamel = require('../lib/object-to-camel')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\nconst multipartRequest = require('../lib/multipart-request')\nconst abortSignal = require('../lib/abort-signal')\nconst { AbortController } = require('native-abort-controller')\nmodule.exports = configure(api => {\n  /**\n   * @type {import('..').ImplementsMethod<'put', import('ipfs-core/src/components/dht')>}\n   */\n  async function * put (key, value, options = {}) {\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n\n    // @ts-ignore https://github.com/ipfs/js-ipfs-utils/issues/90\n    const res = await api.post('dht/put', {\n      timeout: options.timeout,\n      signal,\n      searchParams: toUrlSearchParams({\n        arg: key,\n        ...options\n      }),\n      ...(\n        await multipartRequest(value, controller, options.headers)\n      )\n    })\n\n    for await (let message of res.ndjson()) {\n      message = toCamel(message)\n      message.id = new CID(message.id)\n      if (message.responses) {\n        message.responses = message.responses.map(({ ID, Addrs }) => ({\n          id: ID,\n          addrs: (Addrs || []).map(a => multiaddr(a))\n        }))\n      }\n      yield message\n    }\n  }\n\n  return put\n})\n"]},"metadata":{},"sourceType":"script"}