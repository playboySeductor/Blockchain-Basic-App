{"ast":null,"code":"'use strict';\n/**\n * Returns a new Uint8Array created by concatenating the passed ArrayLikes\n *\n * @param {Array<ArrayLike<number>>} arrays\n * @param {Number} length\n * @returns {Uint8Array}\n */\n\nvar _createForOfIteratorHelper = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nfunction concat(arrays, length) {\n  if (!length) {\n    length = arrays.reduce((acc, curr) => acc + curr.length, 0);\n  }\n\n  const output = new Uint8Array(length);\n  let offset = 0;\n\n  var _iterator = _createForOfIteratorHelper(arrays),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      const arr = _step.value;\n      output.set(arr, offset);\n      offset += arr.length;\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return output;\n}\n\nmodule.exports = concat;","map":{"version":3,"sources":["C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/ipld-block/node_modules/multicodec/node_modules/uint8arrays/concat.js"],"names":["concat","arrays","length","reduce","acc","curr","output","Uint8Array","offset","arr","set","module","exports"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AACA,SAASA,MAAT,CAAiBC,MAAjB,EAAyBC,MAAzB,EAAiC;AAC/B,MAAI,CAACA,MAAL,EAAa;AACXA,IAAAA,MAAM,GAAGD,MAAM,CAACE,MAAP,CAAc,CAACC,GAAD,EAAMC,IAAN,KAAeD,GAAG,GAAGC,IAAI,CAACH,MAAxC,EAAgD,CAAhD,CAAT;AACD;;AAED,QAAMI,MAAM,GAAG,IAAIC,UAAJ,CAAeL,MAAf,CAAf;AACA,MAAIM,MAAM,GAAG,CAAb;;AAN+B,6CAQbP,MARa;AAAA;;AAAA;AAQ/B,wDAA0B;AAAA,YAAfQ,GAAe;AACxBH,MAAAA,MAAM,CAACI,GAAP,CAAWD,GAAX,EAAgBD,MAAhB;AACAA,MAAAA,MAAM,IAAIC,GAAG,CAACP,MAAd;AACD;AAX8B;AAAA;AAAA;AAAA;AAAA;;AAa/B,SAAOI,MAAP;AACD;;AAEDK,MAAM,CAACC,OAAP,GAAiBZ,MAAjB","sourcesContent":["'use strict'\n\n/**\n * Returns a new Uint8Array created by concatenating the passed ArrayLikes\n *\n * @param {Array<ArrayLike<number>>} arrays\n * @param {Number} length\n * @returns {Uint8Array}\n */\nfunction concat (arrays, length) {\n  if (!length) {\n    length = arrays.reduce((acc, curr) => acc + curr.length, 0)\n  }\n\n  const output = new Uint8Array(length)\n  let offset = 0\n\n  for (const arr of arrays) {\n    output.set(arr, offset)\n    offset += arr.length\n  }\n\n  return output\n}\n\nmodule.exports = concat\n"]},"metadata":{},"sourceType":"script"}