{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _createForOfIteratorHelper = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _awaitAsyncGenerator = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _asyncIterator = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nconst errCode = require('err-code');\n\nconst CID = require('cids');\n/**\n * Transform one of:\n *\n * ```ts\n * CID\n * String\n * { cid: CID recursive, metadata }\n * { path: String recursive, metadata }\n * Iterable<CID>\n * Iterable<String>\n * Iterable<{ cid: CID recursive, metadata }>\n * Iterable<{ path: String recursive, metadata }>\n * AsyncIterable<CID>\n * AsyncIterable<String>\n * AsyncIterable<{ cid: CID recursive, metadata }>\n * AsyncIterable<{ path: String recursive, metadata }>\n * ```\n * Into:\n *\n * ```ts\n * AsyncIterable<{ path: CID|String, recursive:boolean, metadata }>\n * ```\n *\n * @param {Source} input\n * @returns {AsyncIterable<Pin>}\n */\n// eslint-disable-next-line complexity\n\n\nmodule.exports = /*#__PURE__*/function () {\n  var _normaliseInput = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(input) {\n    var iterator, first, _iterator3, _step3, cid, _iterator4, _step4, obj, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, _value2;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          if (!(input === null || input === undefined)) {\n            _context.next = 2;\n            break;\n          }\n\n          throw errCode(new Error(\"Unexpected input: \".concat(input)), 'ERR_UNEXPECTED_INPUT');\n\n        case 2:\n          if (!CID.isCID(input)) {\n            _context.next = 6;\n            break;\n          }\n\n          _context.next = 5;\n          return toPin({\n            cid: input\n          });\n\n        case 5:\n          return _context.abrupt(\"return\");\n\n        case 6:\n          if (!(input instanceof String || typeof input === 'string')) {\n            _context.next = 10;\n            break;\n          }\n\n          _context.next = 9;\n          return toPin({\n            path: input\n          });\n\n        case 9:\n          return _context.abrupt(\"return\");\n\n        case 10:\n          if (!(input.cid != null || input.path != null)) {\n            _context.next = 14;\n            break;\n          }\n\n          _context.next = 13;\n          return toPin(input);\n\n        case 13:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 14:\n          if (!input[Symbol.iterator]) {\n            _context.next = 62;\n            break;\n          }\n\n          iterator = input[Symbol.iterator]();\n          first = iterator.next();\n\n          if (!first.done) {\n            _context.next = 19;\n            break;\n          }\n\n          return _context.abrupt(\"return\", iterator);\n\n        case 19:\n          if (!(CID.isCID(first.value) || first.value instanceof String || typeof first.value === 'string')) {\n            _context.next = 40;\n            break;\n          }\n\n          _context.next = 22;\n          return toPin({\n            cid: first.value\n          });\n\n        case 22:\n          _iterator3 = _createForOfIteratorHelper(iterator);\n          _context.prev = 23;\n\n          _iterator3.s();\n\n        case 25:\n          if ((_step3 = _iterator3.n()).done) {\n            _context.next = 31;\n            break;\n          }\n\n          cid = _step3.value;\n          _context.next = 29;\n          return toPin({\n            cid\n          });\n\n        case 29:\n          _context.next = 25;\n          break;\n\n        case 31:\n          _context.next = 36;\n          break;\n\n        case 33:\n          _context.prev = 33;\n          _context.t0 = _context[\"catch\"](23);\n\n          _iterator3.e(_context.t0);\n\n        case 36:\n          _context.prev = 36;\n\n          _iterator3.f();\n\n          return _context.finish(36);\n\n        case 39:\n          return _context.abrupt(\"return\");\n\n        case 40:\n          if (!(first.value.cid != null || first.value.path != null)) {\n            _context.next = 61;\n            break;\n          }\n\n          _context.next = 43;\n          return toPin(first.value);\n\n        case 43:\n          _iterator4 = _createForOfIteratorHelper(iterator);\n          _context.prev = 44;\n\n          _iterator4.s();\n\n        case 46:\n          if ((_step4 = _iterator4.n()).done) {\n            _context.next = 52;\n            break;\n          }\n\n          obj = _step4.value;\n          _context.next = 50;\n          return toPin(obj);\n\n        case 50:\n          _context.next = 46;\n          break;\n\n        case 52:\n          _context.next = 57;\n          break;\n\n        case 54:\n          _context.prev = 54;\n          _context.t1 = _context[\"catch\"](44);\n\n          _iterator4.e(_context.t1);\n\n        case 57:\n          _context.prev = 57;\n\n          _iterator4.f();\n\n          return _context.finish(57);\n\n        case 60:\n          return _context.abrupt(\"return\");\n\n        case 61:\n          throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT');\n\n        case 62:\n          if (!input[Symbol.asyncIterator]) {\n            _context.next = 146;\n            break;\n          }\n\n          iterator = input[Symbol.asyncIterator]();\n          _context.next = 66;\n          return _awaitAsyncGenerator(iterator.next());\n\n        case 66:\n          first = _context.sent;\n\n          if (!first.done) {\n            _context.next = 69;\n            break;\n          }\n\n          return _context.abrupt(\"return\", iterator);\n\n        case 69:\n          if (!(CID.isCID(first.value) || first.value instanceof String || typeof first.value === 'string')) {\n            _context.next = 107;\n            break;\n          }\n\n          _context.next = 72;\n          return toPin({\n            cid: first.value\n          });\n\n        case 72:\n          _iteratorNormalCompletion = true;\n          _didIteratorError = false;\n          _context.prev = 74;\n          _iterator = _asyncIterator(iterator);\n\n        case 76:\n          _context.next = 78;\n          return _awaitAsyncGenerator(_iterator.next());\n\n        case 78:\n          _step = _context.sent;\n          _iteratorNormalCompletion = _step.done;\n          _context.next = 82;\n          return _awaitAsyncGenerator(_step.value);\n\n        case 82:\n          _value = _context.sent;\n\n          if (_iteratorNormalCompletion) {\n            _context.next = 90;\n            break;\n          }\n\n          cid = _value;\n          _context.next = 87;\n          return toPin({\n            cid\n          });\n\n        case 87:\n          _iteratorNormalCompletion = true;\n          _context.next = 76;\n          break;\n\n        case 90:\n          _context.next = 96;\n          break;\n\n        case 92:\n          _context.prev = 92;\n          _context.t2 = _context[\"catch\"](74);\n          _didIteratorError = true;\n          _iteratorError = _context.t2;\n\n        case 96:\n          _context.prev = 96;\n          _context.prev = 97;\n\n          if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n            _context.next = 101;\n            break;\n          }\n\n          _context.next = 101;\n          return _awaitAsyncGenerator(_iterator.return());\n\n        case 101:\n          _context.prev = 101;\n\n          if (!_didIteratorError) {\n            _context.next = 104;\n            break;\n          }\n\n          throw _iteratorError;\n\n        case 104:\n          return _context.finish(101);\n\n        case 105:\n          return _context.finish(96);\n\n        case 106:\n          return _context.abrupt(\"return\");\n\n        case 107:\n          if (!(first.value.cid != null || first.value.path != null)) {\n            _context.next = 145;\n            break;\n          }\n\n          _context.next = 110;\n          return toPin(first.value);\n\n        case 110:\n          _iteratorNormalCompletion2 = true;\n          _didIteratorError2 = false;\n          _context.prev = 112;\n          _iterator2 = _asyncIterator(iterator);\n\n        case 114:\n          _context.next = 116;\n          return _awaitAsyncGenerator(_iterator2.next());\n\n        case 116:\n          _step2 = _context.sent;\n          _iteratorNormalCompletion2 = _step2.done;\n          _context.next = 120;\n          return _awaitAsyncGenerator(_step2.value);\n\n        case 120:\n          _value2 = _context.sent;\n\n          if (_iteratorNormalCompletion2) {\n            _context.next = 128;\n            break;\n          }\n\n          obj = _value2;\n          _context.next = 125;\n          return toPin(obj);\n\n        case 125:\n          _iteratorNormalCompletion2 = true;\n          _context.next = 114;\n          break;\n\n        case 128:\n          _context.next = 134;\n          break;\n\n        case 130:\n          _context.prev = 130;\n          _context.t3 = _context[\"catch\"](112);\n          _didIteratorError2 = true;\n          _iteratorError2 = _context.t3;\n\n        case 134:\n          _context.prev = 134;\n          _context.prev = 135;\n\n          if (!(!_iteratorNormalCompletion2 && _iterator2.return != null)) {\n            _context.next = 139;\n            break;\n          }\n\n          _context.next = 139;\n          return _awaitAsyncGenerator(_iterator2.return());\n\n        case 139:\n          _context.prev = 139;\n\n          if (!_didIteratorError2) {\n            _context.next = 142;\n            break;\n          }\n\n          throw _iteratorError2;\n\n        case 142:\n          return _context.finish(139);\n\n        case 143:\n          return _context.finish(134);\n\n        case 144:\n          return _context.abrupt(\"return\");\n\n        case 145:\n          throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT');\n\n        case 146:\n          throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT');\n\n        case 147:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee, null, [[23, 33, 36, 39], [44, 54, 57, 60], [74, 92, 96, 106], [97,, 101, 105], [112, 130, 134, 144], [135,, 139, 143]]);\n  }));\n\n  function normaliseInput(_x) {\n    return _normaliseInput.apply(this, arguments);\n  }\n\n  return normaliseInput;\n}();\n/**\n * @param {ToPinWithPath|ToPinWithCID} input\n * @returns {Pin}\n */\n\n\nfunction toPin(input) {\n  const pin = {\n    path: input.path == null ? input.cid : \"\".concat(input.path),\n    recursive: input.recursive !== false\n  };\n\n  if (input.metadata != null) {\n    pin.metadata = input.metadata;\n  }\n\n  return pin;\n}\n/**\n * @typedef {Object} ToPinWithPath\n * @property {string | InstanceType<typeof window.String> | CID} path\n * @property {undefined} [cid]\n * @property {boolean} [recursive]\n * @property {any} [metadata]\n *\n * @typedef {Object} ToPinWithCID\n * @property {undefined} [path]\n * @property {CID} cid\n * @property {boolean} [recursive]\n * @property {any} [metadata]\n *\n * @typedef {CID|string|InstanceType<typeof window.String>|ToPinWithPath|ToPinWithPath} ToPin\n * @typedef {ToPin|Iterable<ToPin>|AsyncIterable<ToPin>} Source\n *\n * @typedef {Object} Pin\n * @property {string|CID} path\n * @property {boolean} recursive\n * @property {any} [metadata]\n */","map":{"version":3,"sources":["C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/ipfs-core-utils/src/pins/normalise-input.js"],"names":["errCode","require","CID","module","exports","input","undefined","Error","isCID","toPin","cid","String","path","Symbol","iterator","first","next","done","value","obj","asyncIterator","normaliseInput","pin","recursive","metadata"],"mappings":"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","sourcesContent":["'use strict'\n\nconst errCode = require('err-code')\nconst CID = require('cids')\n\n/**\n * Transform one of:\n *\n * ```ts\n * CID\n * String\n * { cid: CID recursive, metadata }\n * { path: String recursive, metadata }\n * Iterable<CID>\n * Iterable<String>\n * Iterable<{ cid: CID recursive, metadata }>\n * Iterable<{ path: String recursive, metadata }>\n * AsyncIterable<CID>\n * AsyncIterable<String>\n * AsyncIterable<{ cid: CID recursive, metadata }>\n * AsyncIterable<{ path: String recursive, metadata }>\n * ```\n * Into:\n *\n * ```ts\n * AsyncIterable<{ path: CID|String, recursive:boolean, metadata }>\n * ```\n *\n * @param {Source} input\n * @returns {AsyncIterable<Pin>}\n */\n// eslint-disable-next-line complexity\nmodule.exports = async function * normaliseInput (input) {\n  // must give us something\n  if (input === null || input === undefined) {\n    throw errCode(new Error(`Unexpected input: ${input}`), 'ERR_UNEXPECTED_INPUT')\n  }\n\n  // CID|String\n  if (CID.isCID(input)) {\n    yield toPin({ cid: input })\n    return\n  }\n\n  if (input instanceof String || typeof input === 'string') {\n    yield toPin({ path: input })\n    return\n  }\n\n  // { cid: CID recursive, metadata }\n  // @ts-ignore - it still could be iterable or async iterable\n  if (input.cid != null || input.path != null) {\n    // @ts-ignore\n    return yield toPin(input)\n  }\n\n  // Iterable<?>\n  if (input[Symbol.iterator]) {\n    const iterator = input[Symbol.iterator]()\n    const first = iterator.next()\n    if (first.done) return iterator\n\n    // Iterable<CID|String>\n    if (CID.isCID(first.value) || first.value instanceof String || typeof first.value === 'string') {\n      yield toPin({ cid: first.value })\n      for (const cid of iterator) {\n        yield toPin({ cid })\n      }\n      return\n    }\n\n    // Iterable<{ cid: CID recursive, metadata }>\n    if (first.value.cid != null || first.value.path != null) {\n      yield toPin(first.value)\n      for (const obj of iterator) {\n        yield toPin(obj)\n      }\n      return\n    }\n\n    throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT')\n  }\n\n  // AsyncIterable<?>\n  if (input[Symbol.asyncIterator]) {\n    const iterator = input[Symbol.asyncIterator]()\n    const first = await iterator.next()\n    if (first.done) return iterator\n\n    // AsyncIterable<CID|String>\n    if (CID.isCID(first.value) || first.value instanceof String || typeof first.value === 'string') {\n      yield toPin({ cid: first.value })\n      for await (const cid of iterator) {\n        yield toPin({ cid })\n      }\n      return\n    }\n\n    // AsyncIterable<{ cid: CID|String recursive, metadata }>\n    if (first.value.cid != null || first.value.path != null) {\n      yield toPin(first.value)\n      for await (const obj of iterator) {\n        yield toPin(obj)\n      }\n      return\n    }\n\n    throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT')\n  }\n\n  throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT')\n}\n\n/**\n * @param {ToPinWithPath|ToPinWithCID} input\n * @returns {Pin}\n */\nfunction toPin (input) {\n  const pin = {\n    path: input.path == null ? input.cid : `${input.path}`,\n    recursive: input.recursive !== false\n  }\n\n  if (input.metadata != null) {\n    pin.metadata = input.metadata\n  }\n\n  return pin\n}\n\n/**\n * @typedef {Object} ToPinWithPath\n * @property {string | InstanceType<typeof window.String> | CID} path\n * @property {undefined} [cid]\n * @property {boolean} [recursive]\n * @property {any} [metadata]\n *\n * @typedef {Object} ToPinWithCID\n * @property {undefined} [path]\n * @property {CID} cid\n * @property {boolean} [recursive]\n * @property {any} [metadata]\n *\n * @typedef {CID|string|InstanceType<typeof window.String>|ToPinWithPath|ToPinWithPath} ToPin\n * @typedef {ToPin|Iterable<ToPin>|AsyncIterable<ToPin>} Source\n *\n * @typedef {Object} Pin\n * @property {string|CID} path\n * @property {boolean} recursive\n * @property {any} [metadata]\n */\n"]},"metadata":{},"sourceType":"script"}