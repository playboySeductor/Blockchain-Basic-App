{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport getWeb3 from '../getWeb3';\nimport ArtAuction from \"../abis/ArtAuction.json\";\nimport PriceConsumerV3 from '../abis/PriceConsumerV3.json';\nexport default class HelperFunctions {\n  constructor() {\n    this.reloadContractAndAccounts = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var web3, accounts, myContractAddress, priceFeedContractAddr, instance, priceFeedInstance, response;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return getWeb3();\n\n          case 3:\n            web3 = _context.sent;\n            _context.next = 6;\n            return web3.eth.getAccounts();\n\n          case 6:\n            accounts = _context.sent;\n            myContractAddress = process.env.REACT_APP_AUCTION_CONTRACT_ADDRESS;\n            priceFeedContractAddr = process.env.REACT_APP_PRICE_FEED_ADDRESS; // Get the contract instance on TEST NET\n\n            instance = new web3.eth.Contract(ArtAuction.abi, myContractAddress);\n            priceFeedInstance = new web3.eth.Contract(PriceConsumerV3.abi, priceFeedContractAddr); //for local development\n            // const networkId = await web3.eth.net.getId();\n            // const deployedNetwork = ArtAuction.networks[networkId];\n            // const instance = new web3.eth.Contract(\n            //   ArtAuction.abi,\n            //   deployedNetwork && deployedNetwork.address,\n            // );\n            // Set web3, accounts, and contract to the state, and then proceed with an\n            // example of interacting with the contract's methods.    \n\n            localStorage.setItem('accounts', accounts);\n            response = {\n              web3: web3,\n              accounts: accounts,\n              contract: instance,\n              priceFeed: priceFeedInstance\n            };\n            return _context.abrupt(\"return\", response);\n\n          case 16:\n            _context.prev = 16;\n            _context.t0 = _context[\"catch\"](0);\n            // Catch any errors for any of the above operations.\n            alert(\"Failed to load web3, accounts, or contract. Check console for details.\");\n            console.error(_context.t0);\n\n          case 20:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee, null, [[0, 16]]);\n    }));\n  }\n\n  ConvertHoursToSeconds(hours) {\n    if (!isNaN(hours)) {\n      return hours * 60 * 60;\n    } else {\n      return null;\n    }\n  }\n\n  GetMaskedAccount(rawAccount) {\n    if (!rawAccount) return null;\n    return '********' + rawAccount.substring(35);\n  }\n\n  GetUNIXTimeFromDate(date) {\n    return parseInt((new Date().getTime() / 1000).toFixed(0));\n  }\n\n  GetDateFromUNIXTime(unix_timestamp) {\n    // Create a new JavaScript Date object based on the timestamp\n    // multiplied by 1000 so that the argument is in milliseconds, not seconds.\n    return new Date(unix_timestamp * 1000);\n  }\n\n  GetSecondsLeft(created, expiry) {\n    //created(UNIX milisec), expiry (milisec)\n    let timeLeft = this.GetDateFromUNIXTime(Number(created) + Number(expiry)).getTime() - new Date().getTime();\n    return timeLeft / 1000;\n  }\n\n}","map":{"version":3,"sources":["C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/src/utils/Util.js"],"names":["getWeb3","ArtAuction","PriceConsumerV3","HelperFunctions","reloadContractAndAccounts","web3","eth","getAccounts","accounts","myContractAddress","process","env","REACT_APP_AUCTION_CONTRACT_ADDRESS","priceFeedContractAddr","REACT_APP_PRICE_FEED_ADDRESS","instance","Contract","abi","priceFeedInstance","localStorage","setItem","response","contract","priceFeed","alert","console","error","ConvertHoursToSeconds","hours","isNaN","GetMaskedAccount","rawAccount","substring","GetUNIXTimeFromDate","date","parseInt","Date","getTime","toFixed","GetDateFromUNIXTime","unix_timestamp","GetSecondsLeft","created","expiry","timeLeft","Number"],"mappings":";;AAAA,OAAOA,OAAP,MAAoB,YAApB;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAOC,eAAP,MAA4B,8BAA5B;AAEA,eAAe,MAAMC,eAAN,CAAsB;AAAA;AAAA,SACjCC,yBADiC,yEACP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAGLJ,OAAO,EAHF;;AAAA;AAGlBK,YAAAA,IAHkB;AAAA;AAAA,mBAMDA,IAAI,CAACC,GAAL,CAASC,WAAT,EANC;;AAAA;AAMlBC,YAAAA,QANkB;AAOlBC,YAAAA,iBAPkB,GAOEC,OAAO,CAACC,GAAR,CAAYC,kCAPd;AAQlBC,YAAAA,qBARkB,GAQMH,OAAO,CAACC,GAAR,CAAYG,4BARlB,EAUxB;;AACMC,YAAAA,QAXkB,GAWP,IAAIV,IAAI,CAACC,GAAL,CAASU,QAAb,CAAsBf,UAAU,CAACgB,GAAjC,EACfR,iBADe,CAXO;AAclBS,YAAAA,iBAdkB,GAcE,IAAIb,IAAI,CAACC,GAAL,CAASU,QAAb,CAAsBd,eAAe,CAACe,GAAtC,EACxBJ,qBADwB,CAdF,EAiBxB;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;;AACIM,YAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAgCZ,QAAhC;AACKa,YAAAA,QA7Be,GA6BJ;AAAEhB,cAAAA,IAAI,EAAEA,IAAR;AAAcG,cAAAA,QAAQ,EAAEA,QAAxB;AAAkCc,cAAAA,QAAQ,EAAEP,QAA5C;AAAsDQ,cAAAA,SAAS,EAAEL;AAAjE,aA7BI;AAAA,6CA8BbG,QA9Ba;;AAAA;AAAA;AAAA;AAkCpB;AACAG,YAAAA,KAAK,0EAAL;AAGAC,YAAAA,OAAO,CAACC,KAAR;;AAtCoB;AAAA;AAAA;AAAA;AAAA;AAAA,KADO;AAAA;;AA2CjCC,EAAAA,qBAAqB,CAACC,KAAD,EAAO;AACxB,QAAG,CAACC,KAAK,CAACD,KAAD,CAAT,EAAiB;AACb,aAAOA,KAAK,GAAG,EAAR,GAAa,EAApB;AACH,KAFD,MAEK;AACD,aAAO,IAAP;AACH;AACJ;;AAEDE,EAAAA,gBAAgB,CAACC,UAAD,EAAY;AACxB,QAAG,CAACA,UAAJ,EAAgB,OAAO,IAAP;AAChB,WAAO,aAAaA,UAAU,CAACC,SAAX,CAAqB,EAArB,CAApB;AACH;;AAEDC,EAAAA,mBAAmB,CAACC,IAAD,EAAM;AACrB,WAAOC,QAAQ,CAAC,CAAC,IAAIC,IAAJ,GAAWC,OAAX,KAAuB,IAAxB,EAA8BC,OAA9B,CAAsC,CAAtC,CAAD,CAAf;AACH;;AAEDC,EAAAA,mBAAmB,CAACC,cAAD,EAAgB;AAC/B;AACA;AACA,WAAO,IAAIJ,IAAJ,CAASI,cAAc,GAAG,IAA1B,CAAP;AACH;;AAEDC,EAAAA,cAAc,CAACC,OAAD,EAAUC,MAAV,EAAiB;AAAC;AAC5B,QAAIC,QAAQ,GAAI,KAAKL,mBAAL,CAAyBM,MAAM,CAACH,OAAD,CAAN,GAAkBG,MAAM,CAACF,MAAD,CAAjD,EAA2DN,OAA3D,KAAwE,IAAID,IAAJ,EAAD,CAAWC,OAAX,EAAvF;AACA,WAAOO,QAAQ,GAAG,IAAlB;AACH;;AArEgC","sourcesContent":["import getWeb3 from '../getWeb3';\r\nimport ArtAuction from \"../abis/ArtAuction.json\";\r\nimport PriceConsumerV3 from '../abis/PriceConsumerV3.json';\r\n\r\nexport default class HelperFunctions {\r\n    reloadContractAndAccounts=async ()=>{\r\n        try{\r\n          // Get network provider and web3 instance.\r\n      const web3 = await getWeb3();\r\n\r\n      // Use web3 to get the user's accounts.\r\n      const accounts = await web3.eth.getAccounts();\r\n      const myContractAddress = process.env.REACT_APP_AUCTION_CONTRACT_ADDRESS;\r\n      const priceFeedContractAddr = process.env.REACT_APP_PRICE_FEED_ADDRESS;\r\n\r\n      // Get the contract instance on TEST NET\r\n      const instance = new web3.eth.Contract(ArtAuction.abi,\r\n        myContractAddress);\r\n\r\n      const priceFeedInstance = new web3.eth.Contract(PriceConsumerV3.abi,\r\n        priceFeedContractAddr);\r\n\r\n      //for local development\r\n      // const networkId = await web3.eth.net.getId();\r\n      // const deployedNetwork = ArtAuction.networks[networkId];\r\n      // const instance = new web3.eth.Contract(\r\n      //   ArtAuction.abi,\r\n      //   deployedNetwork && deployedNetwork.address,\r\n      // );\r\n\r\n\r\n      // Set web3, accounts, and contract to the state, and then proceed with an\r\n      // example of interacting with the contract's methods.    \r\n          localStorage.setItem('accounts',accounts);\r\n          let  response = { web3: web3, accounts: accounts, contract: instance, priceFeed: priceFeedInstance };\r\n          return response;\r\n          \r\n        }\r\n        catch (error) {\r\n          // Catch any errors for any of the above operations.\r\n          alert(\r\n            `Failed to load web3, accounts, or contract. Check console for details.`,\r\n          );\r\n          console.error(error);\r\n        }\r\n      }\r\n\r\n    ConvertHoursToSeconds(hours){\r\n        if(!isNaN(hours)){\r\n            return hours * 60 * 60;\r\n        }else{\r\n            return null;\r\n        }\r\n    }\r\n\r\n    GetMaskedAccount(rawAccount){\r\n        if(!rawAccount) return null;\r\n        return '********' + rawAccount.substring(35);\r\n    }\r\n\r\n    GetUNIXTimeFromDate(date){\r\n        return parseInt((new Date().getTime() / 1000).toFixed(0));\r\n    }\r\n\r\n    GetDateFromUNIXTime(unix_timestamp){\r\n        // Create a new JavaScript Date object based on the timestamp\r\n        // multiplied by 1000 so that the argument is in milliseconds, not seconds.\r\n        return new Date(unix_timestamp * 1000);\r\n    }\r\n\r\n    GetSecondsLeft(created, expiry){//created(UNIX milisec), expiry (milisec)\r\n        let timeLeft =  this.GetDateFromUNIXTime(Number(created) + Number(expiry)).getTime() - (new Date).getTime();\r\n        return timeLeft / 1000;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}