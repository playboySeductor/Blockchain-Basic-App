{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _objectSpread = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _asyncToGenerator = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nconst CID = require('cids');\n\nconst _require = require('ipld-dag-pb'),\n      DAGNode = _require.DAGNode;\n\nconst multipartRequest = require('../lib/multipart-request');\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\nconst abortSignal = require('../lib/abort-signal');\n\nconst _require2 = require('native-abort-controller'),\n      AbortController = _require2.AbortController;\n\nconst unit8ArrayToString = require('uint8arrays/to-string');\n\nconst uint8ArrayFromString = require('uint8arrays/from-string');\n\nmodule.exports = configure(api => {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(obj, options = {}) {\n      var tmpObj, buf, controller, signal, res, _yield$res$json, Hash;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            tmpObj = {\n              Links: []\n            };\n\n            if (!(obj instanceof Uint8Array)) {\n              _context.next = 5;\n              break;\n            }\n\n            if (!options.enc) {\n              tmpObj = {\n                Data: unit8ArrayToString(obj),\n                Links: []\n              };\n            }\n\n            _context.next = 15;\n            break;\n\n          case 5:\n            if (!DAGNode.isDAGNode(obj)) {\n              _context.next = 9;\n              break;\n            }\n\n            tmpObj = {\n              Data: unit8ArrayToString(obj.Data),\n              Links: obj.Links.map(l => ({\n                Name: l.Name,\n                Hash: l.Hash.toString(),\n                Size: l.Tsize\n              }))\n            };\n            _context.next = 15;\n            break;\n\n          case 9:\n            if (!(typeof obj === 'object')) {\n              _context.next = 14;\n              break;\n            }\n\n            tmpObj.Data = unit8ArrayToString(obj.Data);\n            tmpObj.Links = obj.Links;\n            _context.next = 15;\n            break;\n\n          case 14:\n            throw new Error('obj not recognized');\n\n          case 15:\n            if (obj instanceof Uint8Array && options.enc) {\n              buf = obj;\n            } else {\n              options.enc = 'json';\n              buf = uint8ArrayFromString(JSON.stringify(tmpObj));\n            } // allow aborting requests on body errors\n\n\n            controller = new AbortController();\n            signal = abortSignal(controller.signal, options.signal); // @ts-ignore https://github.com/ipfs/js-ipfs-utils/issues/90\n\n            _context.t0 = api;\n            _context.t1 = _objectSpread;\n            _context.t2 = {\n              timeout: options.timeout,\n              signal,\n              searchParams: toUrlSearchParams(options)\n            };\n            _context.next = 23;\n            return multipartRequest(buf, controller, options.headers);\n\n          case 23:\n            _context.t3 = _context.sent;\n            _context.t4 = (0, _context.t1)(_context.t2, _context.t3);\n            _context.next = 27;\n            return _context.t0.post.call(_context.t0, 'object/put', _context.t4);\n\n          case 27:\n            res = _context.sent;\n            _context.next = 30;\n            return res.json();\n\n          case 30:\n            _yield$res$json = _context.sent;\n            Hash = _yield$res$json.Hash;\n            return _context.abrupt(\"return\", new CID(Hash));\n\n          case 33:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n});","map":{"version":3,"sources":["C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/ipfs-http-client/src/object/put.js"],"names":["CID","require","DAGNode","multipartRequest","configure","toUrlSearchParams","abortSignal","AbortController","unit8ArrayToString","uint8ArrayFromString","module","exports","api","obj","options","tmpObj","Links","Uint8Array","enc","Data","isDAGNode","map","l","Name","Hash","toString","Size","Tsize","Error","buf","JSON","stringify","controller","signal","timeout","searchParams","headers","post","res","json"],"mappings":"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","sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst { DAGNode } = require('ipld-dag-pb')\nconst multipartRequest = require('../lib/multipart-request')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\nconst abortSignal = require('../lib/abort-signal')\nconst { AbortController } = require('native-abort-controller')\nconst unit8ArrayToString = require('uint8arrays/to-string')\nconst uint8ArrayFromString = require('uint8arrays/from-string')\n\nmodule.exports = configure(api => {\n  return async (obj, options = {}) => {\n    let tmpObj = {\n      Links: []\n    }\n\n    if (obj instanceof Uint8Array) {\n      if (!options.enc) {\n        tmpObj = {\n          Data: unit8ArrayToString(obj),\n          Links: []\n        }\n      }\n    } else if (DAGNode.isDAGNode(obj)) {\n      tmpObj = {\n        Data: unit8ArrayToString(obj.Data),\n        Links: obj.Links.map(l => ({\n          Name: l.Name,\n          Hash: l.Hash.toString(),\n          Size: l.Tsize\n        }))\n      }\n    } else if (typeof obj === 'object') {\n      tmpObj.Data = unit8ArrayToString(obj.Data)\n      tmpObj.Links = obj.Links\n    } else {\n      throw new Error('obj not recognized')\n    }\n\n    let buf\n    if (obj instanceof Uint8Array && options.enc) {\n      buf = obj\n    } else {\n      options.enc = 'json'\n      buf = uint8ArrayFromString(JSON.stringify(tmpObj))\n    }\n\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n\n    // @ts-ignore https://github.com/ipfs/js-ipfs-utils/issues/90\n    const res = await api.post('object/put', {\n      timeout: options.timeout,\n      signal,\n      searchParams: toUrlSearchParams(options),\n      ...(\n        await multipartRequest(buf, controller, options.headers)\n      )\n    })\n\n    const { Hash } = await res.json()\n\n    return new CID(Hash)\n  }\n})\n"]},"metadata":{},"sourceType":"script"}