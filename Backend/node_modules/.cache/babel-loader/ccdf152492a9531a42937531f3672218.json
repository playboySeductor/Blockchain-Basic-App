{"ast":null,"code":"'use strict';\n\nvar _createForOfIteratorHelper = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nconst encoder = require('./encoder');\n\nfunction fixed64EncodingLength() {\n  return 8;\n}\n\nfunction fixed64Encode(val, buffer, dataView, offset) {\n  var _iterator = _createForOfIteratorHelper(val),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      const byte = _step.value;\n      buffer[offset] = byte;\n      offset++;\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  fixed64Encode.bytes = 8;\n}\n\nfunction fixed64Decode(buffer, dataView, offset) {\n  const val = buffer.slice(offset, offset + 8);\n  fixed64Decode.bytes = 8;\n  return val;\n}\n\nmodule.exports = encoder(1, fixed64Encode, fixed64Decode, fixed64EncodingLength);","map":{"version":3,"sources":["C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/protons/src/compile/encodings/fixed64.js"],"names":["encoder","require","fixed64EncodingLength","fixed64Encode","val","buffer","dataView","offset","byte","bytes","fixed64Decode","slice","module","exports"],"mappings":"AAAA;;;;AAEA,MAAMA,OAAO,GAAGC,OAAO,CAAC,WAAD,CAAvB;;AAEA,SAASC,qBAAT,GAAkC;AAChC,SAAO,CAAP;AACD;;AAED,SAASC,aAAT,CAAwBC,GAAxB,EAA6BC,MAA7B,EAAqCC,QAArC,EAA+CC,MAA/C,EAAuD;AAAA,6CAClCH,GADkC;AAAA;;AAAA;AACrD,wDAAwB;AAAA,YAAbI,IAAa;AACtBH,MAAAA,MAAM,CAACE,MAAD,CAAN,GAAiBC,IAAjB;AACAD,MAAAA,MAAM;AACP;AAJoD;AAAA;AAAA;AAAA;AAAA;;AAMrDJ,EAAAA,aAAa,CAACM,KAAd,GAAsB,CAAtB;AACD;;AAED,SAASC,aAAT,CAAwBL,MAAxB,EAAgCC,QAAhC,EAA0CC,MAA1C,EAAkD;AAChD,QAAMH,GAAG,GAAGC,MAAM,CAACM,KAAP,CAAaJ,MAAb,EAAqBA,MAAM,GAAG,CAA9B,CAAZ;AACAG,EAAAA,aAAa,CAACD,KAAd,GAAsB,CAAtB;AAEA,SAAOL,GAAP;AACD;;AAEDQ,MAAM,CAACC,OAAP,GAAiBb,OAAO,CAAC,CAAD,EAAIG,aAAJ,EAAmBO,aAAnB,EAAkCR,qBAAlC,CAAxB","sourcesContent":["'use strict'\n\nconst encoder = require('./encoder')\n\nfunction fixed64EncodingLength () {\n  return 8\n}\n\nfunction fixed64Encode (val, buffer, dataView, offset) {\n  for (const byte of val) {\n    buffer[offset] = byte\n    offset++\n  }\n\n  fixed64Encode.bytes = 8\n}\n\nfunction fixed64Decode (buffer, dataView, offset) {\n  const val = buffer.slice(offset, offset + 8)\n  fixed64Decode.bytes = 8\n\n  return val\n}\n\nmodule.exports = encoder(1, fixed64Encode, fixed64Decode, fixed64EncodingLength)\n"]},"metadata":{},"sourceType":"script"}