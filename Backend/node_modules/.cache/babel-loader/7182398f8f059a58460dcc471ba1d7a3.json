{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _createForOfIteratorHelper = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _objectSpread = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _awaitAsyncGenerator = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _asyncIterator = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nconst CID = require('cids');\n\nconst configure = require('../lib/configure');\n\nconst normaliseInput = require('ipfs-core-utils/src/pins/normalise-input');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\nmodule.exports = configure(api => {\n  return /*#__PURE__*/function () {\n    var _addAll = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(source, options = {}) {\n      var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, _value3, path, recursive, metadata, res, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, _value2, pin, _iterator3, _step3, cid;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            _iteratorNormalCompletion = true;\n            _didIteratorError = false;\n            _context.prev = 2;\n            _iterator = _asyncIterator(normaliseInput(source));\n\n          case 4:\n            _context.next = 6;\n            return _awaitAsyncGenerator(_iterator.next());\n\n          case 6:\n            _step = _context.sent;\n            _iteratorNormalCompletion = _step.done;\n            _context.next = 10;\n            return _awaitAsyncGenerator(_step.value);\n\n          case 10:\n            _value = _context.sent;\n\n            if (_iteratorNormalCompletion) {\n              _context.next = 72;\n              break;\n            }\n\n            _value3 = _value, path = _value3.path, recursive = _value3.recursive, metadata = _value3.metadata;\n            _context.next = 15;\n            return _awaitAsyncGenerator(api.post('pin/add', {\n              timeout: options.timeout,\n              signal: options.signal,\n              searchParams: toUrlSearchParams(_objectSpread(_objectSpread({}, options), {}, {\n                arg: path,\n                recursive,\n                metadata: metadata ? JSON.stringify(metadata) : undefined,\n                stream: true\n              })),\n              headers: options.headers\n            }));\n\n          case 15:\n            res = _context.sent;\n            _iteratorNormalCompletion2 = true;\n            _didIteratorError2 = false;\n            _context.prev = 18;\n            _iterator2 = _asyncIterator(res.ndjson());\n\n          case 20:\n            _context.next = 22;\n            return _awaitAsyncGenerator(_iterator2.next());\n\n          case 22:\n            _step2 = _context.sent;\n            _iteratorNormalCompletion2 = _step2.done;\n            _context.next = 26;\n            return _awaitAsyncGenerator(_step2.value);\n\n          case 26:\n            _value2 = _context.sent;\n\n            if (_iteratorNormalCompletion2) {\n              _context.next = 53;\n              break;\n            }\n\n            pin = _value2;\n\n            if (!pin.Pins) {\n              _context.next = 48;\n              break;\n            }\n\n            // non-streaming response\n            _iterator3 = _createForOfIteratorHelper(pin.Pins);\n            _context.prev = 31;\n\n            _iterator3.s();\n\n          case 33:\n            if ((_step3 = _iterator3.n()).done) {\n              _context.next = 39;\n              break;\n            }\n\n            cid = _step3.value;\n            _context.next = 37;\n            return new CID(cid);\n\n          case 37:\n            _context.next = 33;\n            break;\n\n          case 39:\n            _context.next = 44;\n            break;\n\n          case 41:\n            _context.prev = 41;\n            _context.t0 = _context[\"catch\"](31);\n\n            _iterator3.e(_context.t0);\n\n          case 44:\n            _context.prev = 44;\n\n            _iterator3.f();\n\n            return _context.finish(44);\n\n          case 47:\n            return _context.abrupt(\"continue\", 50);\n\n          case 48:\n            _context.next = 50;\n            return new CID(pin);\n\n          case 50:\n            _iteratorNormalCompletion2 = true;\n            _context.next = 20;\n            break;\n\n          case 53:\n            _context.next = 59;\n            break;\n\n          case 55:\n            _context.prev = 55;\n            _context.t1 = _context[\"catch\"](18);\n            _didIteratorError2 = true;\n            _iteratorError2 = _context.t1;\n\n          case 59:\n            _context.prev = 59;\n            _context.prev = 60;\n\n            if (!(!_iteratorNormalCompletion2 && _iterator2.return != null)) {\n              _context.next = 64;\n              break;\n            }\n\n            _context.next = 64;\n            return _awaitAsyncGenerator(_iterator2.return());\n\n          case 64:\n            _context.prev = 64;\n\n            if (!_didIteratorError2) {\n              _context.next = 67;\n              break;\n            }\n\n            throw _iteratorError2;\n\n          case 67:\n            return _context.finish(64);\n\n          case 68:\n            return _context.finish(59);\n\n          case 69:\n            _iteratorNormalCompletion = true;\n            _context.next = 4;\n            break;\n\n          case 72:\n            _context.next = 78;\n            break;\n\n          case 74:\n            _context.prev = 74;\n            _context.t2 = _context[\"catch\"](2);\n            _didIteratorError = true;\n            _iteratorError = _context.t2;\n\n          case 78:\n            _context.prev = 78;\n            _context.prev = 79;\n\n            if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n              _context.next = 83;\n              break;\n            }\n\n            _context.next = 83;\n            return _awaitAsyncGenerator(_iterator.return());\n\n          case 83:\n            _context.prev = 83;\n\n            if (!_didIteratorError) {\n              _context.next = 86;\n              break;\n            }\n\n            throw _iteratorError;\n\n          case 86:\n            return _context.finish(83);\n\n          case 87:\n            return _context.finish(78);\n\n          case 88:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee, null, [[2, 74, 78, 88], [18, 55, 59, 69], [31, 41, 44, 47], [60,, 64, 68], [79,, 83, 87]]);\n    }));\n\n    function addAll(_x) {\n      return _addAll.apply(this, arguments);\n    }\n\n    return addAll;\n  }();\n});","map":{"version":3,"sources":["C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/ipfs-http-client/src/pin/add-all.js"],"names":["CID","require","configure","normaliseInput","toUrlSearchParams","module","exports","api","source","options","path","recursive","metadata","post","timeout","signal","searchParams","arg","JSON","stringify","undefined","stream","headers","res","ndjson","pin","Pins","cid","addAll"],"mappings":"AAAA;;;;;;;;;;;;;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,MAAD,CAAnB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAME,cAAc,GAAGF,OAAO,CAAC,0CAAD,CAA9B;;AACA,MAAMG,iBAAiB,GAAGH,OAAO,CAAC,6BAAD,CAAjC;;AAEAI,MAAM,CAACC,OAAP,GAAiBJ,SAAS,CAACK,GAAG,IAAI;AAChC;AAAA,6EAAO,iBAAyBC,MAAzB,EAAiCC,OAAO,GAAG,EAA3C;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uCAC6CN,cAAc,CAACK,MAAD,CAD3D;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA,8BACcE,IADd,WACcA,IADd,EACoBC,SADpB,WACoBA,SADpB,EAC+BC,QAD/B,WAC+BA,QAD/B;AAAA;AAAA,wCAEeL,GAAG,CAACM,IAAJ,CAAS,SAAT,EAAoB;AACpCC,cAAAA,OAAO,EAAEL,OAAO,CAACK,OADmB;AAEpCC,cAAAA,MAAM,EAAEN,OAAO,CAACM,MAFoB;AAGpCC,cAAAA,YAAY,EAAEZ,iBAAiB,iCAC1BK,OAD0B;AAE7BQ,gBAAAA,GAAG,EAAEP,IAFwB;AAG7BC,gBAAAA,SAH6B;AAI7BC,gBAAAA,QAAQ,EAAEA,QAAQ,GAAGM,IAAI,CAACC,SAAL,CAAeP,QAAf,CAAH,GAA8BQ,SAJnB;AAK7BC,gBAAAA,MAAM,EAAE;AALqB,iBAHK;AAUpCC,cAAAA,OAAO,EAAEb,OAAO,CAACa;AAVmB,aAApB,CAFf;;AAAA;AAEGC,YAAAA,GAFH;AAAA;AAAA;AAAA;AAAA,wCAeqBA,GAAG,CAACC,MAAJ,EAfrB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAecC,YAAAA,GAfd;;AAAA,iBAgBGA,GAAG,CAACC,IAhBP;AAAA;AAAA;AAAA;;AAgBe;AAhBf,oDAiBmBD,GAAG,CAACC,IAjBvB;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAiBYC,YAAAA,GAjBZ;AAAA;AAkBG,mBAAM,IAAI3B,GAAJ,CAAQ2B,GAAR,CAAN;;AAlBH;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAuBD,mBAAM,IAAI3B,GAAJ,CAAQyB,GAAR,CAAN;;AAvBC;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;;AAAA,aAAwBG,MAAxB;AAAA;AAAA;;AAAA,WAAwBA,MAAxB;AAAA;AA2BD,CA5ByB,CAA1B","sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst configure = require('../lib/configure')\nconst normaliseInput = require('ipfs-core-utils/src/pins/normalise-input')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\nmodule.exports = configure(api => {\n  return async function * addAll (source, options = {}) {\n    for await (const { path, recursive, metadata } of normaliseInput(source)) {\n      const res = await api.post('pin/add', {\n        timeout: options.timeout,\n        signal: options.signal,\n        searchParams: toUrlSearchParams({\n          ...options,\n          arg: path,\n          recursive,\n          metadata: metadata ? JSON.stringify(metadata) : undefined,\n          stream: true\n        }),\n        headers: options.headers\n      })\n\n      for await (const pin of res.ndjson()) {\n        if (pin.Pins) { // non-streaming response\n          for (const cid of pin.Pins) {\n            yield new CID(cid)\n          }\n          continue\n        }\n\n        yield new CID(pin)\n      }\n    }\n  }\n})\n"]},"metadata":{},"sourceType":"script"}