{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _objectSpread = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _asyncToGenerator = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\nconst Multiaddr = require('multiaddr');\n\nmodule.exports = configure(api => {\n  /**\n   * @type {import('..').Implements<typeof import('ipfs-core/src/components/bootstrap/reset')>}\n   */\n  function reset() {\n    return _reset.apply(this, arguments);\n  }\n\n  function _reset() {\n    _reset = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(options = {}) {\n      var res, _yield$res$json, Peers;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return api.post('bootstrap/add', {\n              timeout: options.timeout,\n              signal: options.signal,\n              searchParams: toUrlSearchParams(_objectSpread(_objectSpread({}, options), {}, {\n                default: true\n              })),\n              headers: options.headers\n            });\n\n          case 2:\n            res = _context.sent;\n            _context.next = 5;\n            return res.json();\n\n          case 5:\n            _yield$res$json = _context.sent;\n            Peers = _yield$res$json.Peers;\n            return _context.abrupt(\"return\", {\n              Peers: Peers.map(ma => new Multiaddr(ma))\n            });\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n    return _reset.apply(this, arguments);\n  }\n\n  return reset;\n});","map":{"version":3,"sources":["C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/ipfs-http-client/src/bootstrap/reset.js"],"names":["configure","require","toUrlSearchParams","Multiaddr","module","exports","api","reset","options","post","timeout","signal","searchParams","default","headers","res","json","Peers","map","ma"],"mappings":"AAAA;;;;;;;;AAEA,MAAMA,SAAS,GAAGC,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAMC,iBAAiB,GAAGD,OAAO,CAAC,6BAAD,CAAjC;;AACA,MAAME,SAAS,GAAGF,OAAO,CAAC,WAAD,CAAzB;;AAEAG,MAAM,CAACC,OAAP,GAAiBL,SAAS,CAACM,GAAG,IAAI;AAChC;AACF;AACA;AAHkC,WAIjBC,KAJiB;AAAA;AAAA;;AAAA;AAAA,sEAIhC,iBAAsBC,OAAO,GAAG,EAAhC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,mBACoBF,GAAG,CAACG,IAAJ,CAAS,eAAT,EAA0B;AAC1CC,cAAAA,OAAO,EAAEF,OAAO,CAACE,OADyB;AAE1CC,cAAAA,MAAM,EAAEH,OAAO,CAACG,MAF0B;AAG1CC,cAAAA,YAAY,EAAEV,iBAAiB,iCAC1BM,OAD0B;AAE7BK,gBAAAA,OAAO,EAAE;AAFoB,iBAHW;AAO1CC,cAAAA,OAAO,EAAEN,OAAO,CAACM;AAPyB,aAA1B,CADpB;;AAAA;AACQC,YAAAA,GADR;AAAA;AAAA,mBAW0BA,GAAG,CAACC,IAAJ,EAX1B;;AAAA;AAAA;AAWUC,YAAAA,KAXV,mBAWUA,KAXV;AAAA,6CAaS;AAAEA,cAAAA,KAAK,EAAEA,KAAK,CAACC,GAAN,CAAUC,EAAE,IAAI,IAAIhB,SAAJ,CAAcgB,EAAd,CAAhB;AAAT,aAbT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAJgC;AAAA;AAAA;;AAoBhC,SAAOZ,KAAP;AACD,CArByB,CAA1B","sourcesContent":["'use strict'\n\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\nconst Multiaddr = require('multiaddr')\n\nmodule.exports = configure(api => {\n  /**\n   * @type {import('..').Implements<typeof import('ipfs-core/src/components/bootstrap/reset')>}\n   */\n  async function reset (options = {}) {\n    const res = await api.post('bootstrap/add', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        ...options,\n        default: true\n      }),\n      headers: options.headers\n    })\n\n    const { Peers } = await res.json()\n\n    return { Peers: Peers.map(ma => new Multiaddr(ma)) }\n  }\n\n  return reset\n})\n"]},"metadata":{},"sourceType":"script"}