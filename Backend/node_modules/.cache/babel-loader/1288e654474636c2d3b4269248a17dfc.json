{"ast":null,"code":"/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\nmodule.exports = function (chai, util) {\n  chai.expect = function (val, message) {\n    return new chai.Assertion(val, message);\n  };\n  /**\n   * ### .fail([message])\n   * ### .fail(actual, expected, [message], [operator])\n   *\n   * Throw a failure.\n   *\n   *     expect.fail();\n   *     expect.fail(\"custom error message\");\n   *     expect.fail(1, 2);\n   *     expect.fail(1, 2, \"custom error message\");\n   *     expect.fail(1, 2, \"custom error message\", \">\");\n   *     expect.fail(1, 2, undefined, \">\");\n   *\n   * @name fail\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @param {String} operator\n   * @namespace BDD\n   * @api public\n   */\n\n\n  chai.expect.fail = function (actual, expected, message, operator) {\n    if (arguments.length < 2) {\n      message = actual;\n      actual = undefined;\n    }\n\n    message = message || 'expect.fail()';\n    throw new chai.AssertionError(message, {\n      actual: actual,\n      expected: expected,\n      operator: operator\n    }, chai.expect.fail);\n  };\n};","map":{"version":3,"sources":["C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/chai/lib/chai/interface/expect.js"],"names":["module","exports","chai","util","expect","val","message","Assertion","fail","actual","expected","operator","arguments","length","undefined","AssertionError"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AAEAA,MAAM,CAACC,OAAP,GAAiB,UAAUC,IAAV,EAAgBC,IAAhB,EAAsB;AACrCD,EAAAA,IAAI,CAACE,MAAL,GAAc,UAAUC,GAAV,EAAeC,OAAf,EAAwB;AACpC,WAAO,IAAIJ,IAAI,CAACK,SAAT,CAAmBF,GAAnB,EAAwBC,OAAxB,CAAP;AACD,GAFD;AAIA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEEJ,EAAAA,IAAI,CAACE,MAAL,CAAYI,IAAZ,GAAmB,UAAUC,MAAV,EAAkBC,QAAlB,EAA4BJ,OAA5B,EAAqCK,QAArC,EAA+C;AAChE,QAAIC,SAAS,CAACC,MAAV,GAAmB,CAAvB,EAA0B;AACtBP,MAAAA,OAAO,GAAGG,MAAV;AACAA,MAAAA,MAAM,GAAGK,SAAT;AACH;;AAEDR,IAAAA,OAAO,GAAGA,OAAO,IAAI,eAArB;AACA,UAAM,IAAIJ,IAAI,CAACa,cAAT,CAAwBT,OAAxB,EAAiC;AACnCG,MAAAA,MAAM,EAAEA,MAD2B;AAEnCC,MAAAA,QAAQ,EAAEA,QAFyB;AAGnCC,MAAAA,QAAQ,EAAEA;AAHyB,KAAjC,EAIHT,IAAI,CAACE,MAAL,CAAYI,IAJT,CAAN;AAKD,GAZD;AAaD,CAxCD","sourcesContent":["/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nmodule.exports = function (chai, util) {\n  chai.expect = function (val, message) {\n    return new chai.Assertion(val, message);\n  };\n\n  /**\n   * ### .fail([message])\n   * ### .fail(actual, expected, [message], [operator])\n   *\n   * Throw a failure.\n   *\n   *     expect.fail();\n   *     expect.fail(\"custom error message\");\n   *     expect.fail(1, 2);\n   *     expect.fail(1, 2, \"custom error message\");\n   *     expect.fail(1, 2, \"custom error message\", \">\");\n   *     expect.fail(1, 2, undefined, \">\");\n   *\n   * @name fail\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @param {String} operator\n   * @namespace BDD\n   * @api public\n   */\n\n  chai.expect.fail = function (actual, expected, message, operator) {\n    if (arguments.length < 2) {\n        message = actual;\n        actual = undefined;\n    }\n\n    message = message || 'expect.fail()';\n    throw new chai.AssertionError(message, {\n        actual: actual\n      , expected: expected\n      , operator: operator\n    }, chai.expect.fail);\n  };\n};\n"]},"metadata":{},"sourceType":"script"}