{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _objectSpread = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _wrapAsyncGenerator = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _awaitAsyncGenerator = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _asyncGeneratorDelegate = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncGeneratorDelegate\");\n\nvar _asyncIterator = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nconst CID = require('cids');\n\nconst configure = require('../lib/configure');\n\nconst normaliseInput = require('ipfs-core-utils/src/pins/normalise-input');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\nmodule.exports = configure(api => {\n  return /*#__PURE__*/function () {\n    var _rmAll = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(source, options = {}) {\n      var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, _value3, path, recursive, searchParams, res, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, _value2, pin;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            _iteratorNormalCompletion = true;\n            _didIteratorError = false;\n            _context.prev = 2;\n            _iterator = _asyncIterator(normaliseInput(source));\n\n          case 4:\n            _context.next = 6;\n            return _awaitAsyncGenerator(_iterator.next());\n\n          case 6:\n            _step = _context.sent;\n            _iteratorNormalCompletion = _step.done;\n            _context.next = 10;\n            return _awaitAsyncGenerator(_step.value);\n\n          case 10:\n            _value = _context.sent;\n\n            if (_iteratorNormalCompletion) {\n              _context.next = 59;\n              break;\n            }\n\n            _value3 = _value, path = _value3.path, recursive = _value3.recursive;\n            searchParams = new URLSearchParams(options.searchParams);\n            searchParams.append('arg', \"\".concat(path));\n            if (recursive != null) searchParams.set('recursive', String(recursive));\n            _context.next = 18;\n            return _awaitAsyncGenerator(api.post('pin/rm', {\n              timeout: options.timeout,\n              signal: options.signal,\n              headers: options.headers,\n              searchParams: toUrlSearchParams(_objectSpread(_objectSpread({}, options), {}, {\n                arg: \"\".concat(path),\n                recursive\n              }))\n            }));\n\n          case 18:\n            res = _context.sent;\n            _iteratorNormalCompletion2 = true;\n            _didIteratorError2 = false;\n            _context.prev = 21;\n            _iterator2 = _asyncIterator(res.ndjson());\n\n          case 23:\n            _context.next = 25;\n            return _awaitAsyncGenerator(_iterator2.next());\n\n          case 25:\n            _step2 = _context.sent;\n            _iteratorNormalCompletion2 = _step2.done;\n            _context.next = 29;\n            return _awaitAsyncGenerator(_step2.value);\n\n          case 29:\n            _value2 = _context.sent;\n\n            if (_iteratorNormalCompletion2) {\n              _context.next = 40;\n              break;\n            }\n\n            pin = _value2;\n\n            if (!pin.Pins) {\n              _context.next = 35;\n              break;\n            }\n\n            return _context.delegateYield(_asyncGeneratorDelegate(_asyncIterator(pin.Pins.map(cid => new CID(cid))), _awaitAsyncGenerator), \"t0\", 34);\n\n          case 34:\n            return _context.abrupt(\"continue\", 37);\n\n          case 35:\n            _context.next = 37;\n            return new CID(pin);\n\n          case 37:\n            _iteratorNormalCompletion2 = true;\n            _context.next = 23;\n            break;\n\n          case 40:\n            _context.next = 46;\n            break;\n\n          case 42:\n            _context.prev = 42;\n            _context.t1 = _context[\"catch\"](21);\n            _didIteratorError2 = true;\n            _iteratorError2 = _context.t1;\n\n          case 46:\n            _context.prev = 46;\n            _context.prev = 47;\n\n            if (!(!_iteratorNormalCompletion2 && _iterator2.return != null)) {\n              _context.next = 51;\n              break;\n            }\n\n            _context.next = 51;\n            return _awaitAsyncGenerator(_iterator2.return());\n\n          case 51:\n            _context.prev = 51;\n\n            if (!_didIteratorError2) {\n              _context.next = 54;\n              break;\n            }\n\n            throw _iteratorError2;\n\n          case 54:\n            return _context.finish(51);\n\n          case 55:\n            return _context.finish(46);\n\n          case 56:\n            _iteratorNormalCompletion = true;\n            _context.next = 4;\n            break;\n\n          case 59:\n            _context.next = 65;\n            break;\n\n          case 61:\n            _context.prev = 61;\n            _context.t2 = _context[\"catch\"](2);\n            _didIteratorError = true;\n            _iteratorError = _context.t2;\n\n          case 65:\n            _context.prev = 65;\n            _context.prev = 66;\n\n            if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n              _context.next = 70;\n              break;\n            }\n\n            _context.next = 70;\n            return _awaitAsyncGenerator(_iterator.return());\n\n          case 70:\n            _context.prev = 70;\n\n            if (!_didIteratorError) {\n              _context.next = 73;\n              break;\n            }\n\n            throw _iteratorError;\n\n          case 73:\n            return _context.finish(70);\n\n          case 74:\n            return _context.finish(65);\n\n          case 75:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee, null, [[2, 61, 65, 75], [21, 42, 46, 56], [47,, 51, 55], [66,, 70, 74]]);\n    }));\n\n    function rmAll(_x) {\n      return _rmAll.apply(this, arguments);\n    }\n\n    return rmAll;\n  }();\n});","map":{"version":3,"sources":["C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/ipfs-http-client/src/pin/rm-all.js"],"names":["CID","require","configure","normaliseInput","toUrlSearchParams","module","exports","api","source","options","path","recursive","searchParams","URLSearchParams","append","set","String","post","timeout","signal","headers","arg","res","ndjson","pin","Pins","map","cid","rmAll"],"mappings":"AAAA;;;;;;;;;;;;;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,MAAD,CAAnB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAME,cAAc,GAAGF,OAAO,CAAC,0CAAD,CAA9B;;AACA,MAAMG,iBAAiB,GAAGH,OAAO,CAAC,6BAAD,CAAjC;;AAEAI,MAAM,CAACC,OAAP,GAAiBJ,SAAS,CAACK,GAAG,IAAI;AAChC;AAAA,4EAAO,iBAAwBC,MAAxB,EAAgCC,OAAO,GAAG,EAA1C;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uCACmCN,cAAc,CAACK,MAAD,CADjD;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA,8BACcE,IADd,WACcA,IADd,EACoBC,SADpB,WACoBA,SADpB;AAEGC,YAAAA,YAFH,GAEkB,IAAIC,eAAJ,CAAoBJ,OAAO,CAACG,YAA5B,CAFlB;AAGHA,YAAAA,YAAY,CAACE,MAAb,CAAoB,KAApB,YAA8BJ,IAA9B;AAEA,gBAAIC,SAAS,IAAI,IAAjB,EAAuBC,YAAY,CAACG,GAAb,CAAiB,WAAjB,EAA8BC,MAAM,CAACL,SAAD,CAApC;AALpB;AAAA,wCAOeJ,GAAG,CAACU,IAAJ,CAAS,QAAT,EAAmB;AACnCC,cAAAA,OAAO,EAAET,OAAO,CAACS,OADkB;AAEnCC,cAAAA,MAAM,EAAEV,OAAO,CAACU,MAFmB;AAGnCC,cAAAA,OAAO,EAAEX,OAAO,CAACW,OAHkB;AAInCR,cAAAA,YAAY,EAAER,iBAAiB,iCAC1BK,OAD0B;AAE7BY,gBAAAA,GAAG,YAAKX,IAAL,CAF0B;AAG7BC,gBAAAA;AAH6B;AAJI,aAAnB,CAPf;;AAAA;AAOGW,YAAAA,GAPH;AAAA;AAAA;AAAA;AAAA,wCAkBqBA,GAAG,CAACC,MAAJ,EAlBrB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAkBcC,YAAAA,GAlBd;;AAAA,iBAmBGA,GAAG,CAACC,IAnBP;AAAA;AAAA;AAAA;;AAoBC,iFAAQD,GAAG,CAACC,IAAJ,CAASC,GAAT,CAAaC,GAAG,IAAI,IAAI3B,GAAJ,CAAQ2B,GAAR,CAApB,CAAR;;AApBD;AAAA;;AAAA;AAAA;AAuBD,mBAAM,IAAI3B,GAAJ,CAAQwB,GAAR,CAAN;;AAvBC;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;;AAAA,aAAwBI,KAAxB;AAAA;AAAA;;AAAA,WAAwBA,KAAxB;AAAA;AA2BD,CA5ByB,CAA1B","sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst configure = require('../lib/configure')\nconst normaliseInput = require('ipfs-core-utils/src/pins/normalise-input')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\nmodule.exports = configure(api => {\n  return async function * rmAll (source, options = {}) {\n    for await (const { path, recursive } of normaliseInput(source)) {\n      const searchParams = new URLSearchParams(options.searchParams)\n      searchParams.append('arg', `${path}`)\n\n      if (recursive != null) searchParams.set('recursive', String(recursive))\n\n      const res = await api.post('pin/rm', {\n        timeout: options.timeout,\n        signal: options.signal,\n        headers: options.headers,\n        searchParams: toUrlSearchParams({\n          ...options,\n          arg: `${path}`,\n          recursive\n        })\n      })\n\n      for await (const pin of res.ndjson()) {\n        if (pin.Pins) { // non-streaming response\n          yield * pin.Pins.map(cid => new CID(cid))\n          continue\n        }\n        yield new CID(pin)\n      }\n    }\n  }\n})\n"]},"metadata":{},"sourceType":"script"}