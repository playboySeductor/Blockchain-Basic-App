{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nconst cbor = require('borc');\n\nconst multicodec = require('multicodec');\n\nconst multihashing = require('multihashing-async');\n\nconst CID = require('cids');\n\nconst isCircular = require('is-circular');\n\nconst uint8ArrayConcat = require('uint8arrays/concat');\n\nconst uint8ArrayFromString = require('uint8arrays/from-string'); // https://github.com/ipfs/go-ipfs/issues/3570#issuecomment-273931692\n\n\nconst CID_CBOR_TAG = 42;\n\nfunction tagCID(cid) {\n  if (typeof cid === 'string') {\n    cid = new CID(cid).bytes;\n  } else if (CID.isCID(cid)) {\n    cid = cid.bytes;\n  }\n\n  return new cbor.Tagged(CID_CBOR_TAG, uint8ArrayConcat([uint8ArrayFromString('00', 'base16'), // thanks jdag\n  cid], 1 + cid.length));\n}\n\nfunction replaceCIDbyTAG(dagNode) {\n  let circular;\n\n  try {\n    circular = isCircular(dagNode);\n  } catch (e) {\n    circular = false;\n  }\n\n  if (circular) {\n    throw new Error('The object passed has circular references');\n  }\n\n  function transform(obj) {\n    if (!obj || obj instanceof Uint8Array || typeof obj === 'string') {\n      return obj;\n    }\n\n    if (Array.isArray(obj)) {\n      return obj.map(transform);\n    }\n\n    if (CID.isCID(obj)) {\n      return tagCID(obj);\n    }\n\n    const keys = Object.keys(obj);\n\n    if (keys.length > 0) {\n      // Recursive transform\n      const out = {};\n      keys.forEach(key => {\n        if (typeof obj[key] === 'object') {\n          out[key] = transform(obj[key]);\n        } else {\n          out[key] = obj[key];\n        }\n      });\n      return out;\n    } else {\n      return obj;\n    }\n  }\n\n  return transform(dagNode);\n}\n\nexports = module.exports;\nexports.codec = multicodec.DAG_CBOR;\nexports.defaultHashAlg = multicodec.SHA2_256;\nconst defaultTags = {\n  [CID_CBOR_TAG]: val => {\n    // remove that 0\n    val = val.slice(1);\n    return new CID(val);\n  }\n};\nconst defaultSize = 64 * 1024; // current decoder heap size, 64 Kb\n\nlet currentSize = defaultSize;\nconst defaultMaxSize = 64 * 1024 * 1024; // max heap size when auto-growing, 64 Mb\n\nlet maxSize = defaultMaxSize;\nlet decoder = null;\n/**\n * Configure the underlying CBOR decoder.\n *\n * @param {Object} [options] - The options the decoder takes. The decoder will reset to the defaul values if no options are given.\n * @param {number} [options.size=65536] - The current heap size used in CBOR parsing, this may grow automatically as larger blocks are encountered up to `maxSize`\n * @param {number} [options.maxSize=67108864] - The maximum size the CBOR parsing heap is allowed to grow to before `dagCBOR.util.deserialize()` returns an error\n * @param {Object} [options.tags] - An object whose keys are CBOR tag numbers and values are transform functions that accept a `value` and return a decoded representation of that `value`\n */\n\nexports.configureDecoder = options => {\n  let tags = defaultTags;\n\n  if (options) {\n    if (typeof options.size === 'number') {\n      currentSize = options.size;\n    }\n\n    if (typeof options.maxSize === 'number') {\n      maxSize = options.maxSize;\n    }\n\n    if (options.tags) {\n      tags = Object.assign({}, defaultTags, options && options.tags);\n    }\n  } else {\n    // no options, reset to defaults\n    currentSize = defaultSize;\n    maxSize = defaultMaxSize;\n  }\n\n  const decoderOptions = {\n    tags,\n    size: currentSize\n  };\n  decoder = new cbor.Decoder(decoderOptions); // borc edits opts.size in-place so we can capture _actual_ size\n\n  currentSize = decoderOptions.size;\n};\n\nexports.configureDecoder(); // Setup default cbor.Decoder\n\n/**\n * Serialize internal representation into a binary CBOR block.\n *\n * @param {Object} node - Internal representation of a CBOR block\n * @returns {Uint8Array} - The encoded binary representation\n */\n\nexports.serialize = node => {\n  const nodeTagged = replaceCIDbyTAG(node);\n  const serialized = cbor.encode(nodeTagged);\n  return serialized;\n};\n/**\n * Deserialize CBOR block into the internal representation.\n *\n * @param {Uint8Array} data - Binary representation of a CBOR block\n * @returns {Object} - An object that conforms to the IPLD Data Model\n */\n\n\nexports.deserialize = data => {\n  if (data.length > currentSize && data.length <= maxSize) {\n    exports.configureDecoder({\n      size: data.length\n    });\n  }\n\n  if (data.length > currentSize) {\n    throw new Error('Data is too large to deserialize with current decoder');\n  } // borc will decode back-to-back objects into an implicit top-level array, we\n  // strictly want to only see a single explicit top-level object\n\n\n  const all = decoder.decodeAll(data);\n\n  if (all.length !== 1) {\n    throw new Error('Extraneous CBOR data found beyond initial top-level object');\n  }\n\n  return all[0];\n};\n/**\n * Calculate the CID of the binary blob.\n *\n * @param {Object} binaryBlob - Encoded IPLD Node\n * @param {Object} [userOptions] - Options to create the CID\n * @param {number} [userOptions.cidVersion=1] - CID version number\n * @param {string} [UserOptions.hashAlg] - Defaults to the defaultHashAlg of the format\n * @returns {Promise.<CID>}\n */\n\n\nexports.cid = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(binaryBlob, userOptions) {\n    var defaultOptions, options, multihash, codecName, cid;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          defaultOptions = {\n            cidVersion: 1,\n            hashAlg: exports.defaultHashAlg\n          };\n          options = Object.assign(defaultOptions, userOptions);\n          _context.next = 4;\n          return multihashing(binaryBlob, options.hashAlg);\n\n        case 4:\n          multihash = _context.sent;\n          codecName = multicodec.print[exports.codec];\n          cid = new CID(options.cidVersion, codecName, multihash);\n          return _context.abrupt(\"return\", cid);\n\n        case 8:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n\n  return function (_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/ipld-dag-cbor/src/util.js"],"names":["cbor","require","multicodec","multihashing","CID","isCircular","uint8ArrayConcat","uint8ArrayFromString","CID_CBOR_TAG","tagCID","cid","bytes","isCID","Tagged","length","replaceCIDbyTAG","dagNode","circular","e","Error","transform","obj","Uint8Array","Array","isArray","map","keys","Object","out","forEach","key","exports","module","codec","DAG_CBOR","defaultHashAlg","SHA2_256","defaultTags","val","slice","defaultSize","currentSize","defaultMaxSize","maxSize","decoder","configureDecoder","options","tags","size","assign","decoderOptions","Decoder","serialize","node","nodeTagged","serialized","encode","deserialize","data","all","decodeAll","binaryBlob","userOptions","defaultOptions","cidVersion","hashAlg","multihash","codecName","print"],"mappings":"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","sourcesContent":["'use strict'\n\nconst cbor = require('borc')\nconst multicodec = require('multicodec')\nconst multihashing = require('multihashing-async')\nconst CID = require('cids')\nconst isCircular = require('is-circular')\nconst uint8ArrayConcat = require('uint8arrays/concat')\nconst uint8ArrayFromString = require('uint8arrays/from-string')\n\n// https://github.com/ipfs/go-ipfs/issues/3570#issuecomment-273931692\nconst CID_CBOR_TAG = 42\n\nfunction tagCID (cid) {\n  if (typeof cid === 'string') {\n    cid = new CID(cid).bytes\n  } else if (CID.isCID(cid)) {\n    cid = cid.bytes\n  }\n\n  return new cbor.Tagged(CID_CBOR_TAG, uint8ArrayConcat([\n    uint8ArrayFromString('00', 'base16'), // thanks jdag\n    cid\n  ], 1 + cid.length))\n}\n\nfunction replaceCIDbyTAG (dagNode) {\n  let circular\n  try {\n    circular = isCircular(dagNode)\n  } catch (e) {\n    circular = false\n  }\n  if (circular) {\n    throw new Error('The object passed has circular references')\n  }\n\n  function transform (obj) {\n    if (!obj || obj instanceof Uint8Array || typeof obj === 'string') {\n      return obj\n    }\n\n    if (Array.isArray(obj)) {\n      return obj.map(transform)\n    }\n\n    if (CID.isCID(obj)) {\n      return tagCID(obj)\n    }\n\n    const keys = Object.keys(obj)\n\n    if (keys.length > 0) {\n      // Recursive transform\n      const out = {}\n      keys.forEach((key) => {\n        if (typeof obj[key] === 'object') {\n          out[key] = transform(obj[key])\n        } else {\n          out[key] = obj[key]\n        }\n      })\n      return out\n    } else {\n      return obj\n    }\n  }\n\n  return transform(dagNode)\n}\n\nexports = module.exports\n\nexports.codec = multicodec.DAG_CBOR\nexports.defaultHashAlg = multicodec.SHA2_256\n\nconst defaultTags = {\n  [CID_CBOR_TAG]: (val) => {\n    // remove that 0\n    val = val.slice(1)\n    return new CID(val)\n  }\n}\nconst defaultSize = 64 * 1024 // current decoder heap size, 64 Kb\nlet currentSize = defaultSize\nconst defaultMaxSize = 64 * 1024 * 1024 // max heap size when auto-growing, 64 Mb\nlet maxSize = defaultMaxSize\nlet decoder = null\n\n/**\n * Configure the underlying CBOR decoder.\n *\n * @param {Object} [options] - The options the decoder takes. The decoder will reset to the defaul values if no options are given.\n * @param {number} [options.size=65536] - The current heap size used in CBOR parsing, this may grow automatically as larger blocks are encountered up to `maxSize`\n * @param {number} [options.maxSize=67108864] - The maximum size the CBOR parsing heap is allowed to grow to before `dagCBOR.util.deserialize()` returns an error\n * @param {Object} [options.tags] - An object whose keys are CBOR tag numbers and values are transform functions that accept a `value` and return a decoded representation of that `value`\n */\nexports.configureDecoder = (options) => {\n  let tags = defaultTags\n\n  if (options) {\n    if (typeof options.size === 'number') {\n      currentSize = options.size\n    }\n    if (typeof options.maxSize === 'number') {\n      maxSize = options.maxSize\n    }\n    if (options.tags) {\n      tags = Object.assign({}, defaultTags, options && options.tags)\n    }\n  } else {\n    // no options, reset to defaults\n    currentSize = defaultSize\n    maxSize = defaultMaxSize\n  }\n\n  const decoderOptions = {\n    tags,\n    size: currentSize\n  }\n\n  decoder = new cbor.Decoder(decoderOptions)\n  // borc edits opts.size in-place so we can capture _actual_ size\n  currentSize = decoderOptions.size\n}\n\nexports.configureDecoder() // Setup default cbor.Decoder\n\n/**\n * Serialize internal representation into a binary CBOR block.\n *\n * @param {Object} node - Internal representation of a CBOR block\n * @returns {Uint8Array} - The encoded binary representation\n */\nexports.serialize = (node) => {\n  const nodeTagged = replaceCIDbyTAG(node)\n  const serialized = cbor.encode(nodeTagged)\n\n  return serialized\n}\n\n/**\n * Deserialize CBOR block into the internal representation.\n *\n * @param {Uint8Array} data - Binary representation of a CBOR block\n * @returns {Object} - An object that conforms to the IPLD Data Model\n */\nexports.deserialize = (data) => {\n  if (data.length > currentSize && data.length <= maxSize) {\n    exports.configureDecoder({ size: data.length })\n  }\n\n  if (data.length > currentSize) {\n    throw new Error('Data is too large to deserialize with current decoder')\n  }\n\n  // borc will decode back-to-back objects into an implicit top-level array, we\n  // strictly want to only see a single explicit top-level object\n  const all = decoder.decodeAll(data)\n  if (all.length !== 1) {\n    throw new Error('Extraneous CBOR data found beyond initial top-level object')\n  }\n\n  return all[0]\n}\n\n/**\n * Calculate the CID of the binary blob.\n *\n * @param {Object} binaryBlob - Encoded IPLD Node\n * @param {Object} [userOptions] - Options to create the CID\n * @param {number} [userOptions.cidVersion=1] - CID version number\n * @param {string} [UserOptions.hashAlg] - Defaults to the defaultHashAlg of the format\n * @returns {Promise.<CID>}\n */\nexports.cid = async (binaryBlob, userOptions) => {\n  const defaultOptions = { cidVersion: 1, hashAlg: exports.defaultHashAlg }\n  const options = Object.assign(defaultOptions, userOptions)\n\n  const multihash = await multihashing(binaryBlob, options.hashAlg)\n  const codecName = multicodec.print[exports.codec]\n  const cid = new CID(options.cidVersion, codecName, multihash)\n\n  return cid\n}\n"]},"metadata":{},"sourceType":"script"}