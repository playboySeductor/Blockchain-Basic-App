{"ast":null,"code":"/*!\n * Chai - addChainingMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\nvar addLengthGuard = require('./addLengthGuard');\n\nvar chai = require('../../chai');\n\nvar flag = require('./flag');\n\nvar proxify = require('./proxify');\n\nvar transferFlags = require('./transferFlags');\n/*!\n * Module variables\n */\n// Check whether `Object.setPrototypeOf` is supported\n\n\nvar canSetPrototype = typeof Object.setPrototypeOf === 'function'; // Without `Object.setPrototypeOf` support, this module will need to add properties to a function.\n// However, some of functions' own props are not configurable and should be skipped.\n\nvar testFn = function testFn() {};\n\nvar excludeNames = Object.getOwnPropertyNames(testFn).filter(function (name) {\n  var propDesc = Object.getOwnPropertyDescriptor(testFn, name); // Note: PhantomJS 1.x includes `callee` as one of `testFn`'s own properties,\n  // but then returns `undefined` as the property descriptor for `callee`. As a\n  // workaround, we perform an otherwise unnecessary type-check for `propDesc`,\n  // and then filter it out if it's not an object as it should be.\n\n  if (typeof propDesc !== 'object') return true;\n  return !propDesc.configurable;\n}); // Cache `Function` properties\n\nvar call = Function.prototype.call,\n    apply = Function.prototype.apply;\n/**\n * ### .addChainableMethod(ctx, name, method, chainingBehavior)\n *\n * Adds a method to an object, such that the method can also be chained.\n *\n *     utils.addChainableMethod(chai.Assertion.prototype, 'foo', function (str) {\n *       var obj = utils.flag(this, 'object');\n *       new chai.Assertion(obj).to.be.equal(str);\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.addChainableMethod('foo', fn, chainingBehavior);\n *\n * The result can then be used as both a method assertion, executing both `method` and\n * `chainingBehavior`, or as a language chain, which only executes `chainingBehavior`.\n *\n *     expect(fooStr).to.be.foo('bar');\n *     expect(fooStr).to.be.foo.equal('foo');\n *\n * @param {Object} ctx object to which the method is added\n * @param {String} name of method to add\n * @param {Function} method function to be used for `name`, when called\n * @param {Function} chainingBehavior function to be called every time the property is accessed\n * @namespace Utils\n * @name addChainableMethod\n * @api public\n */\n\nmodule.exports = function addChainableMethod(ctx, name, method, chainingBehavior) {\n  if (typeof chainingBehavior !== 'function') {\n    chainingBehavior = function chainingBehavior() {};\n  }\n\n  var chainableBehavior = {\n    method: method,\n    chainingBehavior: chainingBehavior\n  }; // save the methods so we can overwrite them later, if we need to.\n\n  if (!ctx.__methods) {\n    ctx.__methods = {};\n  }\n\n  ctx.__methods[name] = chainableBehavior;\n  Object.defineProperty(ctx, name, {\n    get: function chainableMethodGetter() {\n      chainableBehavior.chainingBehavior.call(this);\n\n      var chainableMethodWrapper = function chainableMethodWrapper() {\n        // Setting the `ssfi` flag to `chainableMethodWrapper` causes this\n        // function to be the starting point for removing implementation\n        // frames from the stack trace of a failed assertion.\n        //\n        // However, we only want to use this function as the starting point if\n        // the `lockSsfi` flag isn't set.\n        //\n        // If the `lockSsfi` flag is set, then this assertion is being\n        // invoked from inside of another assertion. In this case, the `ssfi`\n        // flag has already been set by the outer assertion.\n        //\n        // Note that overwriting a chainable method merely replaces the saved\n        // methods in `ctx.__methods` instead of completely replacing the\n        // overwritten assertion. Therefore, an overwriting assertion won't\n        // set the `ssfi` or `lockSsfi` flags.\n        if (!flag(this, 'lockSsfi')) {\n          flag(this, 'ssfi', chainableMethodWrapper);\n        }\n\n        var result = chainableBehavior.method.apply(this, arguments);\n\n        if (result !== undefined) {\n          return result;\n        }\n\n        var newAssertion = new chai.Assertion();\n        transferFlags(this, newAssertion);\n        return newAssertion;\n      };\n\n      addLengthGuard(chainableMethodWrapper, name, true); // Use `Object.setPrototypeOf` if available\n\n      if (canSetPrototype) {\n        // Inherit all properties from the object by replacing the `Function` prototype\n        var prototype = Object.create(this); // Restore the `call` and `apply` methods from `Function`\n\n        prototype.call = call;\n        prototype.apply = apply;\n        Object.setPrototypeOf(chainableMethodWrapper, prototype);\n      } // Otherwise, redefine all properties (slow!)\n      else {\n          var asserterNames = Object.getOwnPropertyNames(ctx);\n          asserterNames.forEach(function (asserterName) {\n            if (excludeNames.indexOf(asserterName) !== -1) {\n              return;\n            }\n\n            var pd = Object.getOwnPropertyDescriptor(ctx, asserterName);\n            Object.defineProperty(chainableMethodWrapper, asserterName, pd);\n          });\n        }\n\n      transferFlags(this, chainableMethodWrapper);\n      return proxify(chainableMethodWrapper);\n    },\n    configurable: true\n  });\n};","map":{"version":3,"sources":["C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/chai/lib/chai/utils/addChainableMethod.js"],"names":["addLengthGuard","require","chai","flag","proxify","transferFlags","canSetPrototype","Object","setPrototypeOf","testFn","excludeNames","getOwnPropertyNames","filter","name","propDesc","getOwnPropertyDescriptor","configurable","call","Function","prototype","apply","module","exports","addChainableMethod","ctx","method","chainingBehavior","chainableBehavior","__methods","defineProperty","get","chainableMethodGetter","chainableMethodWrapper","result","arguments","undefined","newAssertion","Assertion","create","asserterNames","forEach","asserterName","indexOf","pd"],"mappings":"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","sourcesContent":["/*!\n * Chai - addChainingMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\n\nvar addLengthGuard = require('./addLengthGuard');\nvar chai = require('../../chai');\nvar flag = require('./flag');\nvar proxify = require('./proxify');\nvar transferFlags = require('./transferFlags');\n\n/*!\n * Module variables\n */\n\n// Check whether `Object.setPrototypeOf` is supported\nvar canSetPrototype = typeof Object.setPrototypeOf === 'function';\n\n// Without `Object.setPrototypeOf` support, this module will need to add properties to a function.\n// However, some of functions' own props are not configurable and should be skipped.\nvar testFn = function() {};\nvar excludeNames = Object.getOwnPropertyNames(testFn).filter(function(name) {\n  var propDesc = Object.getOwnPropertyDescriptor(testFn, name);\n\n  // Note: PhantomJS 1.x includes `callee` as one of `testFn`'s own properties,\n  // but then returns `undefined` as the property descriptor for `callee`. As a\n  // workaround, we perform an otherwise unnecessary type-check for `propDesc`,\n  // and then filter it out if it's not an object as it should be.\n  if (typeof propDesc !== 'object')\n    return true;\n\n  return !propDesc.configurable;\n});\n\n// Cache `Function` properties\nvar call  = Function.prototype.call,\n    apply = Function.prototype.apply;\n\n/**\n * ### .addChainableMethod(ctx, name, method, chainingBehavior)\n *\n * Adds a method to an object, such that the method can also be chained.\n *\n *     utils.addChainableMethod(chai.Assertion.prototype, 'foo', function (str) {\n *       var obj = utils.flag(this, 'object');\n *       new chai.Assertion(obj).to.be.equal(str);\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.addChainableMethod('foo', fn, chainingBehavior);\n *\n * The result can then be used as both a method assertion, executing both `method` and\n * `chainingBehavior`, or as a language chain, which only executes `chainingBehavior`.\n *\n *     expect(fooStr).to.be.foo('bar');\n *     expect(fooStr).to.be.foo.equal('foo');\n *\n * @param {Object} ctx object to which the method is added\n * @param {String} name of method to add\n * @param {Function} method function to be used for `name`, when called\n * @param {Function} chainingBehavior function to be called every time the property is accessed\n * @namespace Utils\n * @name addChainableMethod\n * @api public\n */\n\nmodule.exports = function addChainableMethod(ctx, name, method, chainingBehavior) {\n  if (typeof chainingBehavior !== 'function') {\n    chainingBehavior = function () { };\n  }\n\n  var chainableBehavior = {\n      method: method\n    , chainingBehavior: chainingBehavior\n  };\n\n  // save the methods so we can overwrite them later, if we need to.\n  if (!ctx.__methods) {\n    ctx.__methods = {};\n  }\n  ctx.__methods[name] = chainableBehavior;\n\n  Object.defineProperty(ctx, name,\n    { get: function chainableMethodGetter() {\n        chainableBehavior.chainingBehavior.call(this);\n\n        var chainableMethodWrapper = function () {\n          // Setting the `ssfi` flag to `chainableMethodWrapper` causes this\n          // function to be the starting point for removing implementation\n          // frames from the stack trace of a failed assertion.\n          //\n          // However, we only want to use this function as the starting point if\n          // the `lockSsfi` flag isn't set.\n          //\n          // If the `lockSsfi` flag is set, then this assertion is being\n          // invoked from inside of another assertion. In this case, the `ssfi`\n          // flag has already been set by the outer assertion.\n          //\n          // Note that overwriting a chainable method merely replaces the saved\n          // methods in `ctx.__methods` instead of completely replacing the\n          // overwritten assertion. Therefore, an overwriting assertion won't\n          // set the `ssfi` or `lockSsfi` flags.\n          if (!flag(this, 'lockSsfi')) {\n            flag(this, 'ssfi', chainableMethodWrapper);\n          }\n\n          var result = chainableBehavior.method.apply(this, arguments);\n          if (result !== undefined) {\n            return result;\n          }\n\n          var newAssertion = new chai.Assertion();\n          transferFlags(this, newAssertion);\n          return newAssertion;\n        };\n\n        addLengthGuard(chainableMethodWrapper, name, true);\n\n        // Use `Object.setPrototypeOf` if available\n        if (canSetPrototype) {\n          // Inherit all properties from the object by replacing the `Function` prototype\n          var prototype = Object.create(this);\n          // Restore the `call` and `apply` methods from `Function`\n          prototype.call = call;\n          prototype.apply = apply;\n          Object.setPrototypeOf(chainableMethodWrapper, prototype);\n        }\n        // Otherwise, redefine all properties (slow!)\n        else {\n          var asserterNames = Object.getOwnPropertyNames(ctx);\n          asserterNames.forEach(function (asserterName) {\n            if (excludeNames.indexOf(asserterName) !== -1) {\n              return;\n            }\n\n            var pd = Object.getOwnPropertyDescriptor(ctx, asserterName);\n            Object.defineProperty(chainableMethodWrapper, asserterName, pd);\n          });\n        }\n\n        transferFlags(this, chainableMethodWrapper);\n        return proxify(chainableMethodWrapper);\n      }\n    , configurable: true\n  });\n};\n"]},"metadata":{},"sourceType":"script"}