{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\nconst Multiaddr = require('multiaddr');\n\nmodule.exports = configure(api => {\n  /**\n   * @type {import('..').Implements<typeof import('ipfs-core/src/components/bootstrap/list')>}\n   */\n  function list() {\n    return _list.apply(this, arguments);\n  }\n\n  function _list() {\n    _list = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(options = {}) {\n      var res, _yield$res$json, Peers;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return api.post('bootstrap/list', {\n              timeout: options.timeout,\n              signal: options.signal,\n              searchParams: toUrlSearchParams(options),\n              headers: options.headers\n            });\n\n          case 2:\n            res = _context.sent;\n            _context.next = 5;\n            return res.json();\n\n          case 5:\n            _yield$res$json = _context.sent;\n            Peers = _yield$res$json.Peers;\n            return _context.abrupt(\"return\", {\n              Peers: Peers.map(ma => new Multiaddr(ma))\n            });\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n    return _list.apply(this, arguments);\n  }\n\n  return list;\n});","map":{"version":3,"sources":["C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/ipfs-http-client/src/bootstrap/list.js"],"names":["configure","require","toUrlSearchParams","Multiaddr","module","exports","api","list","options","post","timeout","signal","searchParams","headers","res","json","Peers","map","ma"],"mappings":"AAAA;;;;;;AAEA,MAAMA,SAAS,GAAGC,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAMC,iBAAiB,GAAGD,OAAO,CAAC,6BAAD,CAAjC;;AACA,MAAME,SAAS,GAAGF,OAAO,CAAC,WAAD,CAAzB;;AAEAG,MAAM,CAACC,OAAP,GAAiBL,SAAS,CAACM,GAAG,IAAI;AAChC;AACF;AACA;AAHkC,WAIjBC,IAJiB;AAAA;AAAA;;AAAA;AAAA,qEAIhC,iBAAqBC,OAAO,GAAG,EAA/B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,mBACoBF,GAAG,CAACG,IAAJ,CAAS,gBAAT,EAA2B;AAC3CC,cAAAA,OAAO,EAAEF,OAAO,CAACE,OAD0B;AAE3CC,cAAAA,MAAM,EAAEH,OAAO,CAACG,MAF2B;AAG3CC,cAAAA,YAAY,EAAEV,iBAAiB,CAACM,OAAD,CAHY;AAI3CK,cAAAA,OAAO,EAAEL,OAAO,CAACK;AAJ0B,aAA3B,CADpB;;AAAA;AACQC,YAAAA,GADR;AAAA;AAAA,mBAQ0BA,GAAG,CAACC,IAAJ,EAR1B;;AAAA;AAAA;AAQUC,YAAAA,KARV,mBAQUA,KARV;AAAA,6CAUS;AAAEA,cAAAA,KAAK,EAAEA,KAAK,CAACC,GAAN,CAAUC,EAAE,IAAI,IAAIf,SAAJ,CAAce,EAAd,CAAhB;AAAT,aAVT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAJgC;AAAA;AAAA;;AAiBhC,SAAOX,IAAP;AACD,CAlByB,CAA1B","sourcesContent":["'use strict'\n\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\nconst Multiaddr = require('multiaddr')\n\nmodule.exports = configure(api => {\n  /**\n   * @type {import('..').Implements<typeof import('ipfs-core/src/components/bootstrap/list')>}\n   */\n  async function list (options = {}) {\n    const res = await api.post('bootstrap/list', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n\n    const { Peers } = await res.json()\n\n    return { Peers: Peers.map(ma => new Multiaddr(ma)) }\n  }\n\n  return list\n})\n"]},"metadata":{},"sourceType":"script"}