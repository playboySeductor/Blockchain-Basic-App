{"ast":null,"code":"'use strict'; // Import browser version otherwise electron-renderer will end up with node\n// version and fail.\n\nvar _regeneratorRuntime = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncIterator = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nconst normaliseInput = require('ipfs-core-utils/src/files/normalise-input/index.browser');\n\nconst modeToString = require('./mode-to-string');\n\nfunction multipartRequest(source = '', abortController, headers = {}) {\n  var parts, formData, index, total, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, _value2, content, path, mode, mtime, fileSuffix, type, fieldName, qs, secs, nsecs, end;\n\n  return _regeneratorRuntime.async(function multipartRequest$(_context) {\n    while (1) switch (_context.prev = _context.next) {\n      case 0:\n        parts = [];\n        formData = new FormData();\n        index = 0;\n        total = 0;\n        _iteratorNormalCompletion = true;\n        _didIteratorError = false;\n        _context.prev = 6;\n        _iterator = _asyncIterator(normaliseInput(source));\n\n      case 8:\n        _context.next = 10;\n        return _regeneratorRuntime.awrap(_iterator.next());\n\n      case 10:\n        _step = _context.sent;\n        _iteratorNormalCompletion = _step.done;\n        _context.next = 14;\n        return _regeneratorRuntime.awrap(_step.value);\n\n      case 14:\n        _value = _context.sent;\n\n        if (_iteratorNormalCompletion) {\n          _context.next = 30;\n          break;\n        }\n\n        _value2 = _value, content = _value2.content, path = _value2.path, mode = _value2.mode, mtime = _value2.mtime;\n        fileSuffix = '';\n        type = content ? 'file' : 'dir';\n\n        if (index > 0) {\n          fileSuffix = \"-\".concat(index);\n        }\n\n        fieldName = type + fileSuffix;\n        qs = [];\n\n        if (mode !== null && mode !== undefined) {\n          qs.push(\"mode=\".concat(modeToString(mode)));\n        }\n\n        if (mtime != null) {\n          secs = mtime.secs, nsecs = mtime.nsecs;\n          qs.push(\"mtime=\".concat(secs));\n\n          if (nsecs != null) {\n            qs.push(\"mtime-nsecs=\".concat(nsecs));\n          }\n        }\n\n        if (qs.length) {\n          fieldName = \"\".concat(fieldName, \"?\").concat(qs.join('&'));\n        }\n\n        if (content) {\n          formData.set(fieldName, content, encodeURIComponent(path));\n          end = total + content.size;\n          parts.push({\n            name: path,\n            start: total,\n            end\n          });\n          total = end;\n        } else {\n          formData.set(fieldName, new File([''], encodeURIComponent(path), {\n            type: 'application/x-directory'\n          }));\n        }\n\n        index++;\n\n      case 27:\n        _iteratorNormalCompletion = true;\n        _context.next = 8;\n        break;\n\n      case 30:\n        _context.next = 36;\n        break;\n\n      case 32:\n        _context.prev = 32;\n        _context.t0 = _context[\"catch\"](6);\n        _didIteratorError = true;\n        _iteratorError = _context.t0;\n\n      case 36:\n        _context.prev = 36;\n        _context.prev = 37;\n\n        if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n          _context.next = 41;\n          break;\n        }\n\n        _context.next = 41;\n        return _regeneratorRuntime.awrap(_iterator.return());\n\n      case 41:\n        _context.prev = 41;\n\n        if (!_didIteratorError) {\n          _context.next = 44;\n          break;\n        }\n\n        throw _iteratorError;\n\n      case 44:\n        return _context.finish(41);\n\n      case 45:\n        return _context.finish(36);\n\n      case 46:\n        return _context.abrupt(\"return\", {\n          total,\n          parts,\n          headers,\n          body: formData\n        });\n\n      case 47:\n      case \"end\":\n        return _context.stop();\n    }\n  }, null, null, [[6, 32, 36, 46], [37,, 41, 45]], Promise);\n}\n\nmodule.exports = multipartRequest;","map":{"version":3,"sources":["C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/ipfs-http-client/src/lib/multipart-request.browser.js"],"names":["normaliseInput","require","modeToString","multipartRequest","source","abortController","headers","parts","formData","FormData","index","total","content","path","mode","mtime","fileSuffix","type","fieldName","qs","undefined","push","secs","nsecs","length","join","set","encodeURIComponent","end","size","name","start","File","body","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\n// Import browser version otherwise electron-renderer will end up with node\n// version and fail.\nconst normaliseInput = require('ipfs-core-utils/src/files/normalise-input/index.browser')\nconst modeToString = require('./mode-to-string')\n\nasync function multipartRequest (source = '', abortController, headers = {}) {\n  const parts = []\n  const formData = new FormData()\n  let index = 0\n  let total = 0\n\n  for await (const { content, path, mode, mtime } of normaliseInput(source)) {\n    let fileSuffix = ''\n    const type = content ? 'file' : 'dir'\n\n    if (index > 0) {\n      fileSuffix = `-${index}`\n    }\n\n    let fieldName = type + fileSuffix\n    const qs = []\n\n    if (mode !== null && mode !== undefined) {\n      qs.push(`mode=${modeToString(mode)}`)\n    }\n\n    if ((mtime) != null) {\n      const { secs, nsecs } = (mtime)\n\n      qs.push(`mtime=${secs}`)\n\n      if (nsecs != null) {\n        qs.push(`mtime-nsecs=${nsecs}`)\n      }\n    }\n\n    if (qs.length) {\n      fieldName = `${fieldName}?${qs.join('&')}`\n    }\n\n    if (content) {\n      formData.set(fieldName, content, encodeURIComponent(path))\n      const end = total + content.size\n      parts.push({ name: path, start: total, end })\n      total = end\n    } else {\n      formData.set(fieldName, new File([''], encodeURIComponent(path), { type: 'application/x-directory' }))\n    }\n\n    index++\n  }\n\n  return {\n    total,\n    parts,\n    headers,\n    body: formData\n  }\n}\n\nmodule.exports = multipartRequest\n"]},"metadata":{},"sourceType":"script"}