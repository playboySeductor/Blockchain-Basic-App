{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _objectSpread = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _asyncToGenerator = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nconst CID = require('cids');\n\nconst _require = require('./utils'),\n      findSources = _require.findSources;\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\nmodule.exports = configure(api => {\n  /**\n   * @type {import('..').Implements<typeof import('ipfs-core/src/components/files/cp')>}\n   */\n  function cp() {\n    return _cp.apply(this, arguments);\n  }\n\n  function _cp() {\n    _cp = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(...args) {\n      var _findSources, sources, options, res;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            _findSources = findSources(args), sources = _findSources.sources, options = _findSources.options;\n            _context.next = 3;\n            return api.post('files/cp', {\n              timeout: options.timeout,\n              signal: options.signal,\n              searchParams: toUrlSearchParams(_objectSpread({\n                arg: sources.map(src => CID.isCID(src) ? \"/ipfs/\".concat(src) : src)\n              }, options)),\n              headers: options.headers\n            });\n\n          case 3:\n            res = _context.sent;\n            _context.next = 6;\n            return res.text();\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n    return _cp.apply(this, arguments);\n  }\n\n  return cp;\n});","map":{"version":3,"sources":["C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/ipfs-http-client/src/files/cp.js"],"names":["CID","require","findSources","configure","toUrlSearchParams","module","exports","api","cp","args","sources","options","post","timeout","signal","searchParams","arg","map","src","isCID","headers","res","text"],"mappings":"AAAA;;;;;;;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,MAAD,CAAnB;;iBACwBA,OAAO,CAAC,SAAD,C;MAAvBC,W,YAAAA,W;;AACR,MAAMC,SAAS,GAAGF,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAMG,iBAAiB,GAAGH,OAAO,CAAC,6BAAD,CAAjC;;AAEAI,MAAM,CAACC,OAAP,GAAiBH,SAAS,CAACI,GAAG,IAAI;AAChC;AACF;AACA;AAHkC,WAIjBC,EAJiB;AAAA;AAAA;;AAAA;AAAA,mEAIhC,iBAAmB,GAAGC,IAAtB;AAAA;;AAAA;AAAA;AAAA;AAAA,2BAC+BP,WAAW,CAACO,IAAD,CAD1C,EACUC,OADV,gBACUA,OADV,EACmBC,OADnB,gBACmBA,OADnB;AAAA;AAAA,mBAGoBJ,GAAG,CAACK,IAAJ,CAAS,UAAT,EAAqB;AACrCC,cAAAA,OAAO,EAAEF,OAAO,CAACE,OADoB;AAErCC,cAAAA,MAAM,EAAEH,OAAO,CAACG,MAFqB;AAGrCC,cAAAA,YAAY,EAAEX,iBAAiB;AAC7BY,gBAAAA,GAAG,EAAEN,OAAO,CAACO,GAAR,CAAYC,GAAG,IAAIlB,GAAG,CAACmB,KAAJ,CAAUD,GAAV,oBAA0BA,GAA1B,IAAkCA,GAArD;AADwB,iBAE1BP,OAF0B,EAHM;AAOrCS,cAAAA,OAAO,EAAET,OAAO,CAACS;AAPoB,aAArB,CAHpB;;AAAA;AAGQC,YAAAA,GAHR;AAAA;AAAA,mBAaQA,GAAG,CAACC,IAAJ,EAbR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAJgC;AAAA;AAAA;;AAoBhC,SAAOd,EAAP;AACD,CArByB,CAA1B","sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst { findSources } = require('./utils')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\nmodule.exports = configure(api => {\n  /**\n   * @type {import('..').Implements<typeof import('ipfs-core/src/components/files/cp')>}\n   */\n  async function cp (...args) {\n    const { sources, options } = findSources(args)\n\n    const res = await api.post('files/cp', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: sources.map(src => CID.isCID(src) ? `/ipfs/${src}` : src),\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    await res.text()\n  }\n\n  return cp\n})\n"]},"metadata":{},"sourceType":"script"}