{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _objectSpread = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _asyncToGenerator = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nconst CID = require('cids');\n\nconst toCamelWithMetadata = require('../lib/object-to-camel-with-metadata');\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\nmodule.exports = configure(api => {\n  /**\n   * @type {import('..').Implements<typeof import('ipfs-core/src/components/files/stat')>}\n   */\n  function stat(_x) {\n    return _stat.apply(this, arguments);\n  }\n\n  function _stat() {\n    _stat = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(path, options = {}) {\n      var res, data;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            if (typeof path !== 'string') {\n              options = path || {};\n              path = '/';\n            }\n\n            _context.next = 3;\n            return api.post('files/stat', {\n              timeout: options.timeout,\n              signal: options.signal,\n              searchParams: toUrlSearchParams(_objectSpread({\n                arg: path\n              }, options)),\n              headers: options.headers\n            });\n\n          case 3:\n            res = _context.sent;\n            _context.next = 6;\n            return res.json();\n\n          case 6:\n            data = _context.sent;\n            data.WithLocality = data.WithLocality || false;\n            return _context.abrupt(\"return\", toCoreInterface(toCamelWithMetadata(data)));\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n    return _stat.apply(this, arguments);\n  }\n\n  return stat;\n});\n\nfunction toCoreInterface(entry) {\n  entry.cid = new CID(entry.hash);\n  delete entry.hash;\n  return entry;\n}","map":{"version":3,"sources":["C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/ipfs-http-client/src/files/stat.js"],"names":["CID","require","toCamelWithMetadata","configure","toUrlSearchParams","module","exports","api","stat","path","options","post","timeout","signal","searchParams","arg","headers","res","json","data","WithLocality","toCoreInterface","entry","cid","hash"],"mappings":"AAAA;;;;;;;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,MAAD,CAAnB;;AACA,MAAMC,mBAAmB,GAAGD,OAAO,CAAC,sCAAD,CAAnC;;AACA,MAAME,SAAS,GAAGF,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAMG,iBAAiB,GAAGH,OAAO,CAAC,6BAAD,CAAjC;;AAEAI,MAAM,CAACC,OAAP,GAAiBH,SAAS,CAACI,GAAG,IAAI;AAChC;AACF;AACA;AAHkC,WAIjBC,IAJiB;AAAA;AAAA;;AAAA;AAAA,qEAIhC,iBAAqBC,IAArB,EAA2BC,OAAO,GAAG,EAArC;AAAA;AAAA;AAAA;AAAA;AACE,gBAAI,OAAOD,IAAP,KAAgB,QAApB,EAA8B;AAC5BC,cAAAA,OAAO,GAAGD,IAAI,IAAI,EAAlB;AACAA,cAAAA,IAAI,GAAG,GAAP;AACD;;AAJH;AAAA,mBAMoBF,GAAG,CAACI,IAAJ,CAAS,YAAT,EAAuB;AACvCC,cAAAA,OAAO,EAAEF,OAAO,CAACE,OADsB;AAEvCC,cAAAA,MAAM,EAAEH,OAAO,CAACG,MAFuB;AAGvCC,cAAAA,YAAY,EAAEV,iBAAiB;AAC7BW,gBAAAA,GAAG,EAAEN;AADwB,iBAE1BC,OAF0B,EAHQ;AAOvCM,cAAAA,OAAO,EAAEN,OAAO,CAACM;AAPsB,aAAvB,CANpB;;AAAA;AAMQC,YAAAA,GANR;AAAA;AAAA,mBAeqBA,GAAG,CAACC,IAAJ,EAfrB;;AAAA;AAeQC,YAAAA,IAfR;AAiBEA,YAAAA,IAAI,CAACC,YAAL,GAAoBD,IAAI,CAACC,YAAL,IAAqB,KAAzC;AAjBF,6CAkBSC,eAAe,CAACnB,mBAAmB,CAACiB,IAAD,CAApB,CAlBxB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAJgC;AAAA;AAAA;;AAyBhC,SAAOX,IAAP;AACD,CA1ByB,CAA1B;;AA4BA,SAASa,eAAT,CAA0BC,KAA1B,EAAiC;AAC/BA,EAAAA,KAAK,CAACC,GAAN,GAAY,IAAIvB,GAAJ,CAAQsB,KAAK,CAACE,IAAd,CAAZ;AACA,SAAOF,KAAK,CAACE,IAAb;AACA,SAAOF,KAAP;AACD","sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst toCamelWithMetadata = require('../lib/object-to-camel-with-metadata')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\nmodule.exports = configure(api => {\n  /**\n   * @type {import('..').Implements<typeof import('ipfs-core/src/components/files/stat')>}\n   */\n  async function stat (path, options = {}) {\n    if (typeof path !== 'string') {\n      options = path || {}\n      path = '/'\n    }\n\n    const res = await api.post('files/stat', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: path,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    data.WithLocality = data.WithLocality || false\n    return toCoreInterface(toCamelWithMetadata(data))\n  }\n\n  return stat\n})\n\nfunction toCoreInterface (entry) {\n  entry.cid = new CID(entry.hash)\n  delete entry.hash\n  return entry\n}\n"]},"metadata":{},"sourceType":"script"}