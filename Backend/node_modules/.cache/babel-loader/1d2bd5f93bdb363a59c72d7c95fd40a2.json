{"ast":null,"code":"'use strict';\n\nconst CID = require('cids');\n\nconst _require = require('../package.json'),\n      version = _require.version;\n\nconst blockSymbol = Symbol.for('@ipld/js-ipld-block/block');\nconst readonly = {\n  writable: false,\n  configurable: false,\n  enumerable: true\n};\n/**\n * Represents an immutable block of data that is uniquely referenced with a cid.\n *\n * @example\n * const block = new Block(Uint8Array.from([0, 1, 2, 3]), new CID('...'))\n */\n\nclass Block {\n  /**\n   * @param {Uint8Array} data - The data to be stored in the block as a Uint8Array.\n   * @param {CID} cid - The cid of the data\n   */\n  constructor(data, cid) {\n    if (!data || !(data instanceof Uint8Array)) {\n      throw new Error('first argument  must be a Uint8Array');\n    }\n\n    if (!cid || !CID.isCID(cid)) {\n      throw new Error('second argument must be a CID');\n    }\n\n    this.data = data;\n    this.cid = cid;\n    Object.defineProperties(this, {\n      data: readonly,\n      cid: readonly\n    });\n  }\n  /**\n   * The data of this block.\n   *\n   * @deprecated\n   * @type {Uint8Array}\n   */\n\n\n  get _data() {\n    deprecateData();\n    return this.data;\n  }\n  /**\n   * The cid of the data this block represents.\n   *\n   * @deprecated\n   * @type {CID}\n   */\n\n\n  get _cid() {\n    deprecateCID();\n    return this.cid;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Block';\n  }\n\n  get [blockSymbol]() {\n    return true;\n  }\n  /**\n   * Check if the given value is a Block.\n   *\n   * @param {any} other\n   * @returns {other is Block}\n   */\n\n\n  static isBlock(other) {\n    return Boolean(other && other[blockSymbol]);\n  }\n\n}\n/**\n * @param {RegExp} range\n * @param {string} message\n * @returns {() => void}\n */\n\n\nconst deprecate = (range, message) => {\n  let warned = false;\n  return () => {\n    if (range.test(version)) {\n      if (!warned) {\n        warned = true; // eslint-disable-next-line no-console\n\n        console.warn(message);\n      }\n    } else {\n      throw new Error(message);\n    }\n  };\n};\n\nconst deprecateCID = deprecate(/^0\\.10|^0\\.11/, 'block._cid is deprecated and will be removed in 0.12 release. Please use block.cid instead');\nconst deprecateData = deprecate(/^0\\.10|^0.11/, 'block._data is deprecated and will be removed in 0.12 release. Please use block.data instead');\nmodule.exports = Block;","map":{"version":3,"sources":["C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/ipld-block/src/index.js"],"names":["CID","require","version","blockSymbol","Symbol","for","readonly","writable","configurable","enumerable","Block","constructor","data","cid","Uint8Array","Error","isCID","Object","defineProperties","_data","deprecateData","_cid","deprecateCID","toStringTag","isBlock","other","Boolean","deprecate","range","message","warned","test","console","warn","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,MAAD,CAAnB;;iBAEoBA,OAAO,CAAC,iBAAD,C;MAAnBC,O,YAAAA,O;;AACR,MAAMC,WAAW,GAAGC,MAAM,CAACC,GAAP,CAAW,2BAAX,CAApB;AACA,MAAMC,QAAQ,GAAG;AAAEC,EAAAA,QAAQ,EAAE,KAAZ;AAAmBC,EAAAA,YAAY,EAAE,KAAjC;AAAwCC,EAAAA,UAAU,EAAE;AAApD,CAAjB;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,KAAN,CAAY;AACV;AACF;AACA;AACA;AACEC,EAAAA,WAAW,CAAEC,IAAF,EAAQC,GAAR,EAAa;AACtB,QAAI,CAACD,IAAD,IAAS,EAAEA,IAAI,YAAYE,UAAlB,CAAb,EAA4C;AAC1C,YAAM,IAAIC,KAAJ,CAAU,sCAAV,CAAN;AACD;;AAED,QAAI,CAACF,GAAD,IAAQ,CAACb,GAAG,CAACgB,KAAJ,CAAUH,GAAV,CAAb,EAA6B;AAC3B,YAAM,IAAIE,KAAJ,CAAU,+BAAV,CAAN;AACD;;AAED,SAAKH,IAAL,GAAYA,IAAZ;AACA,SAAKC,GAAL,GAAWA,GAAX;AAEAI,IAAAA,MAAM,CAACC,gBAAP,CAAwB,IAAxB,EAA8B;AAC5BN,MAAAA,IAAI,EAAEN,QADsB;AAE5BO,MAAAA,GAAG,EAAEP;AAFuB,KAA9B;AAID;AAED;AACF;AACA;AACA;AACA;AACA;;;AACW,MAALa,KAAK,GAAI;AACXC,IAAAA,aAAa;AACb,WAAO,KAAKR,IAAZ;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACU,MAAJS,IAAI,GAAI;AACVC,IAAAA,YAAY;AACZ,WAAO,KAAKT,GAAZ;AACD;;AAEsB,OAAlBT,MAAM,CAACmB,WAAW,IAAK;AAC1B,WAAO,OAAP;AACD;;AAEe,OAAXpB,WAAW,IAAK;AACnB,WAAO,IAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACgB,SAAPqB,OAAO,CAAEC,KAAF,EAAS;AACrB,WAAOC,OAAO,CAACD,KAAK,IAAIA,KAAK,CAACtB,WAAD,CAAf,CAAd;AACD;;AA7DS;AAgEZ;AACA;AACA;AACA;AACA;;;AACA,MAAMwB,SAAS,GAAG,CAACC,KAAD,EAAQC,OAAR,KAAoB;AACpC,MAAIC,MAAM,GAAG,KAAb;AACA,SAAO,MAAM;AACX,QAAIF,KAAK,CAACG,IAAN,CAAW7B,OAAX,CAAJ,EAAyB;AACvB,UAAI,CAAC4B,MAAL,EAAa;AACXA,QAAAA,MAAM,GAAG,IAAT,CADW,CAEX;;AACAE,QAAAA,OAAO,CAACC,IAAR,CAAaJ,OAAb;AACD;AACF,KAND,MAMO;AACL,YAAM,IAAId,KAAJ,CAAUc,OAAV,CAAN;AACD;AACF,GAVD;AAWD,CAbD;;AAeA,MAAMP,YAAY,GAAGK,SAAS,CAAC,eAAD,EAAkB,4FAAlB,CAA9B;AACA,MAAMP,aAAa,GAAGO,SAAS,CAAC,cAAD,EAAiB,8FAAjB,CAA/B;AAEAO,MAAM,CAACC,OAAP,GAAiBzB,KAAjB","sourcesContent":["'use strict'\n\nconst CID = require('cids')\n\nconst { version } = require('../package.json')\nconst blockSymbol = Symbol.for('@ipld/js-ipld-block/block')\nconst readonly = { writable: false, configurable: false, enumerable: true }\n\n/**\n * Represents an immutable block of data that is uniquely referenced with a cid.\n *\n * @example\n * const block = new Block(Uint8Array.from([0, 1, 2, 3]), new CID('...'))\n */\nclass Block {\n  /**\n   * @param {Uint8Array} data - The data to be stored in the block as a Uint8Array.\n   * @param {CID} cid - The cid of the data\n   */\n  constructor (data, cid) {\n    if (!data || !(data instanceof Uint8Array)) {\n      throw new Error('first argument  must be a Uint8Array')\n    }\n\n    if (!cid || !CID.isCID(cid)) {\n      throw new Error('second argument must be a CID')\n    }\n\n    this.data = data\n    this.cid = cid\n\n    Object.defineProperties(this, {\n      data: readonly,\n      cid: readonly\n    })\n  }\n\n  /**\n   * The data of this block.\n   *\n   * @deprecated\n   * @type {Uint8Array}\n   */\n  get _data () {\n    deprecateData()\n    return this.data\n  }\n\n  /**\n   * The cid of the data this block represents.\n   *\n   * @deprecated\n   * @type {CID}\n   */\n  get _cid () {\n    deprecateCID()\n    return this.cid\n  }\n\n  get [Symbol.toStringTag] () {\n    return 'Block'\n  }\n\n  get [blockSymbol] () {\n    return true\n  }\n\n  /**\n   * Check if the given value is a Block.\n   *\n   * @param {any} other\n   * @returns {other is Block}\n   */\n  static isBlock (other) {\n    return Boolean(other && other[blockSymbol])\n  }\n}\n\n/**\n * @param {RegExp} range\n * @param {string} message\n * @returns {() => void}\n */\nconst deprecate = (range, message) => {\n  let warned = false\n  return () => {\n    if (range.test(version)) {\n      if (!warned) {\n        warned = true\n        // eslint-disable-next-line no-console\n        console.warn(message)\n      }\n    } else {\n      throw new Error(message)\n    }\n  }\n}\n\nconst deprecateCID = deprecate(/^0\\.10|^0\\.11/, 'block._cid is deprecated and will be removed in 0.12 release. Please use block.cid instead')\nconst deprecateData = deprecate(/^0\\.10|^0.11/, 'block._data is deprecated and will be removed in 0.12 release. Please use block.data instead')\n\nmodule.exports = Block\n"]},"metadata":{},"sourceType":"script"}