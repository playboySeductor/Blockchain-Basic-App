{"ast":null,"code":"'use strict';\n/**\n * Turns a browser readable stream into an async iterable. Async iteration over\n * returned iterable will lock give stream, preventing any other consumer from\n * acquiring a reader. The lock will be released if iteration loop is broken. To\n * prevent stream cancelling optional `{ preventCancel: true }` could be passed\n * as a second argument.\n * @template T\n * @param {ReadableStream<T>} stream\n * @param {Object} [options]\n * @param {boolean} [options.preventCancel=boolean]\n * @returns {AsyncIterable<T>}\n */\n\nvar _regeneratorRuntime = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _awaitAsyncGenerator = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nfunction browserReadableStreamToIt(_x) {\n  return _browserReadableStreamToIt.apply(this, arguments);\n}\n\nfunction _browserReadableStreamToIt() {\n  _browserReadableStreamToIt = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(stream, options = {}) {\n    var reader, result;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          reader = stream.getReader();\n          _context.prev = 1;\n\n        case 2:\n          if (!true) {\n            _context.next = 12;\n            break;\n          }\n\n          _context.next = 5;\n          return _awaitAsyncGenerator(reader.read());\n\n        case 5:\n          result = _context.sent;\n\n          if (!result.done) {\n            _context.next = 8;\n            break;\n          }\n\n          return _context.abrupt(\"return\");\n\n        case 8:\n          _context.next = 10;\n          return result.value;\n\n        case 10:\n          _context.next = 2;\n          break;\n\n        case 12:\n          _context.prev = 12;\n\n          if (options.preventCancel !== true) {\n            reader.cancel();\n          }\n\n          reader.releaseLock();\n          return _context.finish(12);\n\n        case 16:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee, null, [[1,, 12, 16]]);\n  }));\n  return _browserReadableStreamToIt.apply(this, arguments);\n}\n\nmodule.exports = browserReadableStreamToIt;","map":{"version":3,"sources":["C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/browser-readablestream-to-it/index.js"],"names":["browserReadableStreamToIt","stream","options","reader","getReader","read","result","done","value","preventCancel","cancel","releaseLock","module","exports"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;SACiBA,yB;;;;;0FAAjB,iBAA4CC,MAA5C,EAAoDC,OAAO,GAAG,EAA9D;AAAA;AAAA;AAAA;AAAA;AACQC,UAAAA,MADR,GACiBF,MAAM,CAACG,SAAP,EADjB;AAAA;;AAAA;AAAA,eAIW,IAJX;AAAA;AAAA;AAAA;;AAAA;AAAA,sCAK2BD,MAAM,CAACE,IAAP,EAL3B;;AAAA;AAKYC,UAAAA,MALZ;;AAAA,eAOUA,MAAM,CAACC,IAPjB;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAWM,iBAAMD,MAAM,CAACE,KAAb;;AAXN;AAAA;AAAA;;AAAA;AAAA;;AAcI,cAAIN,OAAO,CAACO,aAAR,KAA0B,IAA9B,EAAoC;AAClCN,YAAAA,MAAM,CAACO,MAAP;AACD;;AAEDP,UAAAA,MAAM,CAACQ,WAAP;AAlBJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAsBAC,MAAM,CAACC,OAAP,GAAiBb,yBAAjB","sourcesContent":["'use strict'\n\n/**\n * Turns a browser readable stream into an async iterable. Async iteration over\n * returned iterable will lock give stream, preventing any other consumer from\n * acquiring a reader. The lock will be released if iteration loop is broken. To\n * prevent stream cancelling optional `{ preventCancel: true }` could be passed\n * as a second argument.\n * @template T\n * @param {ReadableStream<T>} stream\n * @param {Object} [options]\n * @param {boolean} [options.preventCancel=boolean]\n * @returns {AsyncIterable<T>}\n */\nasync function * browserReadableStreamToIt (stream, options = {}) {\n  const reader = stream.getReader()\n\n  try {\n    while (true) {\n      const result = await reader.read()\n\n      if (result.done) {\n        return\n      }\n\n      yield result.value\n    }\n  } finally {\n    if (options.preventCancel !== true) {\n      reader.cancel()\n    }\n\n    reader.releaseLock()\n  }\n}\n\nmodule.exports = browserReadableStreamToIt\n"]},"metadata":{},"sourceType":"script"}