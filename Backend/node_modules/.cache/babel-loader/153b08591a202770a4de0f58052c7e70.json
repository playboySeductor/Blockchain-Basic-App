{"ast":null,"code":"'use strict';\n/* !\n * Chai - getFuncName utility\n * Copyright(c) 2012-2016 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .getFuncName(constructorFn)\n *\n * Returns the name of a function.\n * When a non-function instance is passed, returns `null`.\n * This also includes a polyfill function if `aFunc.name` is not defined.\n *\n * @name getFuncName\n * @param {Function} funct\n * @namespace Utils\n * @api public\n */\n\nvar toString = Function.prototype.toString;\nvar functionNameMatch = /\\s*function(?:\\s|\\s*\\/\\*[^(?:*\\/)]+\\*\\/\\s*)*([^\\s\\(\\/]+)/;\n\nfunction getFuncName(aFunc) {\n  if (typeof aFunc !== 'function') {\n    return null;\n  }\n\n  var name = '';\n\n  if (typeof Function.prototype.name === 'undefined' && typeof aFunc.name === 'undefined') {\n    // Here we run a polyfill if Function does not support the `name` property and if aFunc.name is not defined\n    var match = toString.call(aFunc).match(functionNameMatch);\n\n    if (match) {\n      name = match[1];\n    }\n  } else {\n    // If we've got a `name` property we just use it\n    name = aFunc.name;\n  }\n\n  return name;\n}\n\nmodule.exports = getFuncName;","map":{"version":3,"sources":["C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/get-func-name/index.js"],"names":["toString","Function","prototype","functionNameMatch","getFuncName","aFunc","name","match","call","module","exports"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIA,QAAQ,GAAGC,QAAQ,CAACC,SAAT,CAAmBF,QAAlC;AACA,IAAIG,iBAAiB,GAAG,0DAAxB;;AACA,SAASC,WAAT,CAAqBC,KAArB,EAA4B;AAC1B,MAAI,OAAOA,KAAP,KAAiB,UAArB,EAAiC;AAC/B,WAAO,IAAP;AACD;;AAED,MAAIC,IAAI,GAAG,EAAX;;AACA,MAAI,OAAOL,QAAQ,CAACC,SAAT,CAAmBI,IAA1B,KAAmC,WAAnC,IAAkD,OAAOD,KAAK,CAACC,IAAb,KAAsB,WAA5E,EAAyF;AACvF;AACA,QAAIC,KAAK,GAAGP,QAAQ,CAACQ,IAAT,CAAcH,KAAd,EAAqBE,KAArB,CAA2BJ,iBAA3B,CAAZ;;AACA,QAAII,KAAJ,EAAW;AACTD,MAAAA,IAAI,GAAGC,KAAK,CAAC,CAAD,CAAZ;AACD;AACF,GAND,MAMO;AACL;AACAD,IAAAA,IAAI,GAAGD,KAAK,CAACC,IAAb;AACD;;AAED,SAAOA,IAAP;AACD;;AAEDG,MAAM,CAACC,OAAP,GAAiBN,WAAjB","sourcesContent":["'use strict';\n\n/* !\n * Chai - getFuncName utility\n * Copyright(c) 2012-2016 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .getFuncName(constructorFn)\n *\n * Returns the name of a function.\n * When a non-function instance is passed, returns `null`.\n * This also includes a polyfill function if `aFunc.name` is not defined.\n *\n * @name getFuncName\n * @param {Function} funct\n * @namespace Utils\n * @api public\n */\n\nvar toString = Function.prototype.toString;\nvar functionNameMatch = /\\s*function(?:\\s|\\s*\\/\\*[^(?:*\\/)]+\\*\\/\\s*)*([^\\s\\(\\/]+)/;\nfunction getFuncName(aFunc) {\n  if (typeof aFunc !== 'function') {\n    return null;\n  }\n\n  var name = '';\n  if (typeof Function.prototype.name === 'undefined' && typeof aFunc.name === 'undefined') {\n    // Here we run a polyfill if Function does not support the `name` property and if aFunc.name is not defined\n    var match = toString.call(aFunc).match(functionNameMatch);\n    if (match) {\n      name = match[1];\n    }\n  } else {\n    // If we've got a `name` property we just use it\n    name = aFunc.name;\n  }\n\n  return name;\n}\n\nmodule.exports = getFuncName;\n"]},"metadata":{},"sourceType":"script"}