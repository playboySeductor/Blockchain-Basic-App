{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nconst dagPB = require('ipld-dag-pb');\n\nconst dagCBOR = require('ipld-dag-cbor');\n\nconst raw = require('ipld-raw');\n\nconst multicodec = require('multicodec');\n\nconst noop = () => {};\n/**\n * @typedef {import('cids')} CID\n */\n\n/**\n * Return an object containing supported IPLD Formats\n *\n * @param {object} [options] - IPLD options passed to the http client constructor\n * @param {Array} [options.formats] - A list of IPLD Formats to use\n * @param {Function} [options.loadFormat] - An async function that can load a format when passed a codec number\n * @returns {Function}\n */\n\n\nmodule.exports = ({\n  formats = [],\n  loadFormat = noop\n} = {}) => {\n  formats = formats || [];\n  loadFormat = loadFormat || noop;\n  const configuredFormats = {\n    [multicodec.DAG_PB]: dagPB,\n    [multicodec.DAG_CBOR]: dagCBOR,\n    [multicodec.RAW]: raw\n  };\n  formats.forEach(format => {\n    configuredFormats[format.codec] = format;\n  });\n  /**\n   * Attempts to load an IPLD format for the passed CID\n   *\n   * @param {import('multicodec').CodecName} codec - The code to load the format for\n   * @returns {Promise<object>} - An IPLD format\n   */\n\n  const loadResolver = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(codec) {\n      var number, format;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            // @ts-ignore - codec is a string and not a CodecName\n            number = multicodec.getNumber(codec);\n            _context.t0 = configuredFormats[number];\n\n            if (_context.t0) {\n              _context.next = 6;\n              break;\n            }\n\n            _context.next = 5;\n            return loadFormat(codec);\n\n          case 5:\n            _context.t0 = _context.sent;\n\n          case 6:\n            format = _context.t0;\n\n            if (format) {\n              _context.next = 9;\n              break;\n            }\n\n            throw Object.assign(new Error(\"Missing IPLD format \\\"\".concat(codec, \"\\\"\")), {\n              missingMulticodec: codec\n            });\n\n          case 9:\n            return _context.abrupt(\"return\", format);\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n\n    return function loadResolver(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return loadResolver;\n};","map":{"version":3,"sources":["C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/ipfs-http-client/src/lib/ipld-formats.js"],"names":["dagPB","require","dagCBOR","raw","multicodec","noop","module","exports","formats","loadFormat","configuredFormats","DAG_PB","DAG_CBOR","RAW","forEach","format","codec","loadResolver","number","getNumber","Object","assign","Error","missingMulticodec"],"mappings":"AAAA;;;;;;AAEA,MAAMA,KAAK,GAAGC,OAAO,CAAC,aAAD,CAArB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,eAAD,CAAvB;;AACA,MAAME,GAAG,GAAGF,OAAO,CAAC,UAAD,CAAnB;;AACA,MAAMG,UAAU,GAAGH,OAAO,CAAC,YAAD,CAA1B;;AAEA,MAAMI,IAAI,GAAG,MAAM,CAAE,CAArB;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAC,MAAM,CAACC,OAAP,GAAiB,CAAC;AAAEC,EAAAA,OAAO,GAAG,EAAZ;AAAgBC,EAAAA,UAAU,GAAGJ;AAA7B,IAAsC,EAAvC,KAA8C;AAC7DG,EAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACAC,EAAAA,UAAU,GAAGA,UAAU,IAAIJ,IAA3B;AAEA,QAAMK,iBAAiB,GAAG;AACxB,KAACN,UAAU,CAACO,MAAZ,GAAqBX,KADG;AAExB,KAACI,UAAU,CAACQ,QAAZ,GAAuBV,OAFC;AAGxB,KAACE,UAAU,CAACS,GAAZ,GAAkBV;AAHM,GAA1B;AAMAK,EAAAA,OAAO,CAACM,OAAR,CAAgBC,MAAM,IAAI;AACxBL,IAAAA,iBAAiB,CAACK,MAAM,CAACC,KAAR,CAAjB,GAAkCD,MAAlC;AACD,GAFD;AAIA;AACF;AACA;AACA;AACA;AACA;;AACE,QAAME,YAAY;AAAA,wEAAG,iBAAOD,KAAP;AAAA;AAAA;AAAA;AAAA;AACnB;AACME,YAAAA,MAFa,GAEJd,UAAU,CAACe,SAAX,CAAqBH,KAArB,CAFI;AAAA,0BAGJN,iBAAiB,CAACQ,MAAD,CAHb;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAG+BT,UAAU,CAACO,KAAD,CAHzC;;AAAA;AAAA;;AAAA;AAGbD,YAAAA,MAHa;;AAAA,gBAKdA,MALc;AAAA;AAAA;AAAA;;AAAA,kBAMXK,MAAM,CAACC,MAAP,CACJ,IAAIC,KAAJ,iCAAkCN,KAAlC,QADI,EAEJ;AAAEO,cAAAA,iBAAiB,EAAEP;AAArB,aAFI,CANW;;AAAA;AAAA,6CAYZD,MAZY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAZE,YAAY;AAAA;AAAA;AAAA,KAAlB;;AAeA,SAAOA,YAAP;AACD,CApCD","sourcesContent":["'use strict'\n\nconst dagPB = require('ipld-dag-pb')\nconst dagCBOR = require('ipld-dag-cbor')\nconst raw = require('ipld-raw')\nconst multicodec = require('multicodec')\n\nconst noop = () => {}\n\n/**\n * @typedef {import('cids')} CID\n */\n\n/**\n * Return an object containing supported IPLD Formats\n *\n * @param {object} [options] - IPLD options passed to the http client constructor\n * @param {Array} [options.formats] - A list of IPLD Formats to use\n * @param {Function} [options.loadFormat] - An async function that can load a format when passed a codec number\n * @returns {Function}\n */\nmodule.exports = ({ formats = [], loadFormat = noop } = {}) => {\n  formats = formats || []\n  loadFormat = loadFormat || noop\n\n  const configuredFormats = {\n    [multicodec.DAG_PB]: dagPB,\n    [multicodec.DAG_CBOR]: dagCBOR,\n    [multicodec.RAW]: raw\n  }\n\n  formats.forEach(format => {\n    configuredFormats[format.codec] = format\n  })\n\n  /**\n   * Attempts to load an IPLD format for the passed CID\n   *\n   * @param {import('multicodec').CodecName} codec - The code to load the format for\n   * @returns {Promise<object>} - An IPLD format\n   */\n  const loadResolver = async (codec) => {\n    // @ts-ignore - codec is a string and not a CodecName\n    const number = multicodec.getNumber(codec)\n    const format = configuredFormats[number] || await loadFormat(codec)\n\n    if (!format) {\n      throw Object.assign(\n        new Error(`Missing IPLD format \"${codec}\"`),\n        { missingMulticodec: codec }\n      )\n    }\n\n    return format\n  }\n\n  return loadResolver\n}\n"]},"metadata":{},"sourceType":"script"}