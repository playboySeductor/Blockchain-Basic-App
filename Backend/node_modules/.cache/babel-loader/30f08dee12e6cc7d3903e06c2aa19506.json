{"ast":null,"code":"'use strict';\n/* !\n * Chai - pathval utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * @see https://github.com/logicalparadox/filtr\n * MIT Licensed\n */\n\n/**\n * ### .hasProperty(object, name)\n *\n * This allows checking whether an object has own\n * or inherited from prototype chain named property.\n *\n * Basically does the same thing as the `in`\n * operator but works properly with null/undefined values\n * and other primitives.\n *\n *     var obj = {\n *         arr: ['a', 'b', 'c']\n *       , str: 'Hello'\n *     }\n *\n * The following would be the results.\n *\n *     hasProperty(obj, 'str');  // true\n *     hasProperty(obj, 'constructor');  // true\n *     hasProperty(obj, 'bar');  // false\n *\n *     hasProperty(obj.str, 'length'); // true\n *     hasProperty(obj.str, 1);  // true\n *     hasProperty(obj.str, 5);  // false\n *\n *     hasProperty(obj.arr, 'length');  // true\n *     hasProperty(obj.arr, 2);  // true\n *     hasProperty(obj.arr, 3);  // false\n *\n * @param {Object} object\n * @param {String|Symbol} name\n * @returns {Boolean} whether it exists\n * @namespace Utils\n * @name hasProperty\n * @api public\n */\n\nfunction hasProperty(obj, name) {\n  if (typeof obj === 'undefined' || obj === null) {\n    return false;\n  } // The `in` operator does not work with primitives.\n\n\n  return name in Object(obj);\n}\n/* !\n * ## parsePath(path)\n *\n * Helper function used to parse string object\n * paths. Use in conjunction with `internalGetPathValue`.\n *\n *      var parsed = parsePath('myobject.property.subprop');\n *\n * ### Paths:\n *\n * * Can be infinitely deep and nested.\n * * Arrays are also valid using the formal `myobject.document[3].property`.\n * * Literal dots and brackets (not delimiter) must be backslash-escaped.\n *\n * @param {String} path\n * @returns {Object} parsed\n * @api private\n */\n\n\nfunction parsePath(path) {\n  var str = path.replace(/([^\\\\])\\[/g, '$1.[');\n  var parts = str.match(/(\\\\\\.|[^.]+?)+/g);\n  return parts.map(function mapMatches(value) {\n    var regexp = /^\\[(\\d+)\\]$/;\n    var mArr = regexp.exec(value);\n    var parsed = null;\n\n    if (mArr) {\n      parsed = {\n        i: parseFloat(mArr[1])\n      };\n    } else {\n      parsed = {\n        p: value.replace(/\\\\([.\\[\\]])/g, '$1')\n      };\n    }\n\n    return parsed;\n  });\n}\n/* !\n * ## internalGetPathValue(obj, parsed[, pathDepth])\n *\n * Helper companion function for `.parsePath` that returns\n * the value located at the parsed address.\n *\n *      var value = getPathValue(obj, parsed);\n *\n * @param {Object} object to search against\n * @param {Object} parsed definition from `parsePath`.\n * @param {Number} depth (nesting level) of the property we want to retrieve\n * @returns {Object|Undefined} value\n * @api private\n */\n\n\nfunction internalGetPathValue(obj, parsed, pathDepth) {\n  var temporaryValue = obj;\n  var res = null;\n  pathDepth = typeof pathDepth === 'undefined' ? parsed.length : pathDepth;\n\n  for (var i = 0; i < pathDepth; i++) {\n    var part = parsed[i];\n\n    if (temporaryValue) {\n      if (typeof part.p === 'undefined') {\n        temporaryValue = temporaryValue[part.i];\n      } else {\n        temporaryValue = temporaryValue[part.p];\n      }\n\n      if (i === pathDepth - 1) {\n        res = temporaryValue;\n      }\n    }\n  }\n\n  return res;\n}\n/* !\n * ## internalSetPathValue(obj, value, parsed)\n *\n * Companion function for `parsePath` that sets\n * the value located at a parsed address.\n *\n *  internalSetPathValue(obj, 'value', parsed);\n *\n * @param {Object} object to search and define on\n * @param {*} value to use upon set\n * @param {Object} parsed definition from `parsePath`\n * @api private\n */\n\n\nfunction internalSetPathValue(obj, val, parsed) {\n  var tempObj = obj;\n  var pathDepth = parsed.length;\n  var part = null; // Here we iterate through every part of the path\n\n  for (var i = 0; i < pathDepth; i++) {\n    var propName = null;\n    var propVal = null;\n    part = parsed[i]; // If it's the last part of the path, we set the 'propName' value with the property name\n\n    if (i === pathDepth - 1) {\n      propName = typeof part.p === 'undefined' ? part.i : part.p; // Now we set the property with the name held by 'propName' on object with the desired val\n\n      tempObj[propName] = val;\n    } else if (typeof part.p !== 'undefined' && tempObj[part.p]) {\n      tempObj = tempObj[part.p];\n    } else if (typeof part.i !== 'undefined' && tempObj[part.i]) {\n      tempObj = tempObj[part.i];\n    } else {\n      // If the obj doesn't have the property we create one with that name to define it\n      var next = parsed[i + 1]; // Here we set the name of the property which will be defined\n\n      propName = typeof part.p === 'undefined' ? part.i : part.p; // Here we decide if this property will be an array or a new object\n\n      propVal = typeof next.p === 'undefined' ? [] : {};\n      tempObj[propName] = propVal;\n      tempObj = tempObj[propName];\n    }\n  }\n}\n/**\n * ### .getPathInfo(object, path)\n *\n * This allows the retrieval of property info in an\n * object given a string path.\n *\n * The path info consists of an object with the\n * following properties:\n *\n * * parent - The parent object of the property referenced by `path`\n * * name - The name of the final property, a number if it was an array indexer\n * * value - The value of the property, if it exists, otherwise `undefined`\n * * exists - Whether the property exists or not\n *\n * @param {Object} object\n * @param {String} path\n * @returns {Object} info\n * @namespace Utils\n * @name getPathInfo\n * @api public\n */\n\n\nfunction getPathInfo(obj, path) {\n  var parsed = parsePath(path);\n  var last = parsed[parsed.length - 1];\n  var info = {\n    parent: parsed.length > 1 ? internalGetPathValue(obj, parsed, parsed.length - 1) : obj,\n    name: last.p || last.i,\n    value: internalGetPathValue(obj, parsed)\n  };\n  info.exists = hasProperty(info.parent, info.name);\n  return info;\n}\n/**\n * ### .getPathValue(object, path)\n *\n * This allows the retrieval of values in an\n * object given a string path.\n *\n *     var obj = {\n *         prop1: {\n *             arr: ['a', 'b', 'c']\n *           , str: 'Hello'\n *         }\n *       , prop2: {\n *             arr: [ { nested: 'Universe' } ]\n *           , str: 'Hello again!'\n *         }\n *     }\n *\n * The following would be the results.\n *\n *     getPathValue(obj, 'prop1.str'); // Hello\n *     getPathValue(obj, 'prop1.att[2]'); // b\n *     getPathValue(obj, 'prop2.arr[0].nested'); // Universe\n *\n * @param {Object} object\n * @param {String} path\n * @returns {Object} value or `undefined`\n * @namespace Utils\n * @name getPathValue\n * @api public\n */\n\n\nfunction getPathValue(obj, path) {\n  var info = getPathInfo(obj, path);\n  return info.value;\n}\n/**\n * ### .setPathValue(object, path, value)\n *\n * Define the value in an object at a given string path.\n *\n * ```js\n * var obj = {\n *     prop1: {\n *         arr: ['a', 'b', 'c']\n *       , str: 'Hello'\n *     }\n *   , prop2: {\n *         arr: [ { nested: 'Universe' } ]\n *       , str: 'Hello again!'\n *     }\n * };\n * ```\n *\n * The following would be acceptable.\n *\n * ```js\n * var properties = require('tea-properties');\n * properties.set(obj, 'prop1.str', 'Hello Universe!');\n * properties.set(obj, 'prop1.arr[2]', 'B');\n * properties.set(obj, 'prop2.arr[0].nested.value', { hello: 'universe' });\n * ```\n *\n * @param {Object} object\n * @param {String} path\n * @param {Mixed} value\n * @api private\n */\n\n\nfunction setPathValue(obj, path, val) {\n  var parsed = parsePath(path);\n  internalSetPathValue(obj, val, parsed);\n  return obj;\n}\n\nmodule.exports = {\n  hasProperty: hasProperty,\n  getPathInfo: getPathInfo,\n  getPathValue: getPathValue,\n  setPathValue: setPathValue\n};","map":{"version":3,"sources":["C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/pathval/index.js"],"names":["hasProperty","obj","name","Object","parsePath","path","str","replace","parts","match","map","mapMatches","value","regexp","mArr","exec","parsed","i","parseFloat","p","internalGetPathValue","pathDepth","temporaryValue","res","length","part","internalSetPathValue","val","tempObj","propName","propVal","next","getPathInfo","last","info","parent","exists","getPathValue","setPathValue","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/* !\n * Chai - pathval utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * @see https://github.com/logicalparadox/filtr\n * MIT Licensed\n */\n\n/**\n * ### .hasProperty(object, name)\n *\n * This allows checking whether an object has own\n * or inherited from prototype chain named property.\n *\n * Basically does the same thing as the `in`\n * operator but works properly with null/undefined values\n * and other primitives.\n *\n *     var obj = {\n *         arr: ['a', 'b', 'c']\n *       , str: 'Hello'\n *     }\n *\n * The following would be the results.\n *\n *     hasProperty(obj, 'str');  // true\n *     hasProperty(obj, 'constructor');  // true\n *     hasProperty(obj, 'bar');  // false\n *\n *     hasProperty(obj.str, 'length'); // true\n *     hasProperty(obj.str, 1);  // true\n *     hasProperty(obj.str, 5);  // false\n *\n *     hasProperty(obj.arr, 'length');  // true\n *     hasProperty(obj.arr, 2);  // true\n *     hasProperty(obj.arr, 3);  // false\n *\n * @param {Object} object\n * @param {String|Symbol} name\n * @returns {Boolean} whether it exists\n * @namespace Utils\n * @name hasProperty\n * @api public\n */\n\nfunction hasProperty(obj, name) {\n  if (typeof obj === 'undefined' || obj === null) {\n    return false;\n  }\n\n  // The `in` operator does not work with primitives.\n  return name in Object(obj);\n}\n\n/* !\n * ## parsePath(path)\n *\n * Helper function used to parse string object\n * paths. Use in conjunction with `internalGetPathValue`.\n *\n *      var parsed = parsePath('myobject.property.subprop');\n *\n * ### Paths:\n *\n * * Can be infinitely deep and nested.\n * * Arrays are also valid using the formal `myobject.document[3].property`.\n * * Literal dots and brackets (not delimiter) must be backslash-escaped.\n *\n * @param {String} path\n * @returns {Object} parsed\n * @api private\n */\n\nfunction parsePath(path) {\n  var str = path.replace(/([^\\\\])\\[/g, '$1.[');\n  var parts = str.match(/(\\\\\\.|[^.]+?)+/g);\n  return parts.map(function mapMatches(value) {\n    var regexp = /^\\[(\\d+)\\]$/;\n    var mArr = regexp.exec(value);\n    var parsed = null;\n    if (mArr) {\n      parsed = { i: parseFloat(mArr[1]) };\n    } else {\n      parsed = { p: value.replace(/\\\\([.\\[\\]])/g, '$1') };\n    }\n\n    return parsed;\n  });\n}\n\n/* !\n * ## internalGetPathValue(obj, parsed[, pathDepth])\n *\n * Helper companion function for `.parsePath` that returns\n * the value located at the parsed address.\n *\n *      var value = getPathValue(obj, parsed);\n *\n * @param {Object} object to search against\n * @param {Object} parsed definition from `parsePath`.\n * @param {Number} depth (nesting level) of the property we want to retrieve\n * @returns {Object|Undefined} value\n * @api private\n */\n\nfunction internalGetPathValue(obj, parsed, pathDepth) {\n  var temporaryValue = obj;\n  var res = null;\n  pathDepth = (typeof pathDepth === 'undefined' ? parsed.length : pathDepth);\n\n  for (var i = 0; i < pathDepth; i++) {\n    var part = parsed[i];\n    if (temporaryValue) {\n      if (typeof part.p === 'undefined') {\n        temporaryValue = temporaryValue[part.i];\n      } else {\n        temporaryValue = temporaryValue[part.p];\n      }\n\n      if (i === (pathDepth - 1)) {\n        res = temporaryValue;\n      }\n    }\n  }\n\n  return res;\n}\n\n/* !\n * ## internalSetPathValue(obj, value, parsed)\n *\n * Companion function for `parsePath` that sets\n * the value located at a parsed address.\n *\n *  internalSetPathValue(obj, 'value', parsed);\n *\n * @param {Object} object to search and define on\n * @param {*} value to use upon set\n * @param {Object} parsed definition from `parsePath`\n * @api private\n */\n\nfunction internalSetPathValue(obj, val, parsed) {\n  var tempObj = obj;\n  var pathDepth = parsed.length;\n  var part = null;\n  // Here we iterate through every part of the path\n  for (var i = 0; i < pathDepth; i++) {\n    var propName = null;\n    var propVal = null;\n    part = parsed[i];\n\n    // If it's the last part of the path, we set the 'propName' value with the property name\n    if (i === (pathDepth - 1)) {\n      propName = typeof part.p === 'undefined' ? part.i : part.p;\n      // Now we set the property with the name held by 'propName' on object with the desired val\n      tempObj[propName] = val;\n    } else if (typeof part.p !== 'undefined' && tempObj[part.p]) {\n      tempObj = tempObj[part.p];\n    } else if (typeof part.i !== 'undefined' && tempObj[part.i]) {\n      tempObj = tempObj[part.i];\n    } else {\n      // If the obj doesn't have the property we create one with that name to define it\n      var next = parsed[i + 1];\n      // Here we set the name of the property which will be defined\n      propName = typeof part.p === 'undefined' ? part.i : part.p;\n      // Here we decide if this property will be an array or a new object\n      propVal = typeof next.p === 'undefined' ? [] : {};\n      tempObj[propName] = propVal;\n      tempObj = tempObj[propName];\n    }\n  }\n}\n\n/**\n * ### .getPathInfo(object, path)\n *\n * This allows the retrieval of property info in an\n * object given a string path.\n *\n * The path info consists of an object with the\n * following properties:\n *\n * * parent - The parent object of the property referenced by `path`\n * * name - The name of the final property, a number if it was an array indexer\n * * value - The value of the property, if it exists, otherwise `undefined`\n * * exists - Whether the property exists or not\n *\n * @param {Object} object\n * @param {String} path\n * @returns {Object} info\n * @namespace Utils\n * @name getPathInfo\n * @api public\n */\n\nfunction getPathInfo(obj, path) {\n  var parsed = parsePath(path);\n  var last = parsed[parsed.length - 1];\n  var info = {\n    parent: parsed.length > 1 ? internalGetPathValue(obj, parsed, parsed.length - 1) : obj,\n    name: last.p || last.i,\n    value: internalGetPathValue(obj, parsed),\n  };\n  info.exists = hasProperty(info.parent, info.name);\n\n  return info;\n}\n\n/**\n * ### .getPathValue(object, path)\n *\n * This allows the retrieval of values in an\n * object given a string path.\n *\n *     var obj = {\n *         prop1: {\n *             arr: ['a', 'b', 'c']\n *           , str: 'Hello'\n *         }\n *       , prop2: {\n *             arr: [ { nested: 'Universe' } ]\n *           , str: 'Hello again!'\n *         }\n *     }\n *\n * The following would be the results.\n *\n *     getPathValue(obj, 'prop1.str'); // Hello\n *     getPathValue(obj, 'prop1.att[2]'); // b\n *     getPathValue(obj, 'prop2.arr[0].nested'); // Universe\n *\n * @param {Object} object\n * @param {String} path\n * @returns {Object} value or `undefined`\n * @namespace Utils\n * @name getPathValue\n * @api public\n */\n\nfunction getPathValue(obj, path) {\n  var info = getPathInfo(obj, path);\n  return info.value;\n}\n\n/**\n * ### .setPathValue(object, path, value)\n *\n * Define the value in an object at a given string path.\n *\n * ```js\n * var obj = {\n *     prop1: {\n *         arr: ['a', 'b', 'c']\n *       , str: 'Hello'\n *     }\n *   , prop2: {\n *         arr: [ { nested: 'Universe' } ]\n *       , str: 'Hello again!'\n *     }\n * };\n * ```\n *\n * The following would be acceptable.\n *\n * ```js\n * var properties = require('tea-properties');\n * properties.set(obj, 'prop1.str', 'Hello Universe!');\n * properties.set(obj, 'prop1.arr[2]', 'B');\n * properties.set(obj, 'prop2.arr[0].nested.value', { hello: 'universe' });\n * ```\n *\n * @param {Object} object\n * @param {String} path\n * @param {Mixed} value\n * @api private\n */\n\nfunction setPathValue(obj, path, val) {\n  var parsed = parsePath(path);\n  internalSetPathValue(obj, val, parsed);\n  return obj;\n}\n\nmodule.exports = {\n  hasProperty: hasProperty,\n  getPathInfo: getPathInfo,\n  getPathValue: getPathValue,\n  setPathValue: setPathValue,\n};\n"]},"metadata":{},"sourceType":"script"}