{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nconst toCamel = require('./lib/object-to-camel');\n\nconst multiaddr = require('multiaddr');\n\nconst configure = require('./lib/configure');\n\nconst toUrlSearchParams = require('./lib/to-url-search-params');\n\nmodule.exports = configure(api => {\n  /**\n   * @type {import('.').Implements<typeof import('ipfs-core/src/components/id')>}\n   */\n  function id() {\n    return _id.apply(this, arguments);\n  }\n\n  function _id() {\n    _id = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(options = {}) {\n      var res, data, output;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return api.post('id', {\n              timeout: options.timeout,\n              signal: options.signal,\n              searchParams: toUrlSearchParams(options),\n              headers: options.headers\n            });\n\n          case 2:\n            res = _context.sent;\n            _context.next = 5;\n            return res.json();\n\n          case 5:\n            data = _context.sent;\n            output = toCamel(data);\n\n            if (output.addresses) {\n              output.addresses = output.addresses.map(ma => multiaddr(ma));\n            }\n\n            return _context.abrupt(\"return\", output);\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n    return _id.apply(this, arguments);\n  }\n\n  return id;\n});","map":{"version":3,"sources":["C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/ipfs-http-client/src/id.js"],"names":["toCamel","require","multiaddr","configure","toUrlSearchParams","module","exports","api","id","options","post","timeout","signal","searchParams","headers","res","json","data","output","addresses","map","ma"],"mappings":"AAAA;;;;;;AAEA,MAAMA,OAAO,GAAGC,OAAO,CAAC,uBAAD,CAAvB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,WAAD,CAAzB;;AACA,MAAME,SAAS,GAAGF,OAAO,CAAC,iBAAD,CAAzB;;AACA,MAAMG,iBAAiB,GAAGH,OAAO,CAAC,4BAAD,CAAjC;;AAEAI,MAAM,CAACC,OAAP,GAAiBH,SAAS,CAACI,GAAG,IAAI;AAChC;AACF;AACA;AAHkC,WAIjBC,EAJiB;AAAA;AAAA;;AAAA;AAAA,mEAIhC,iBAAmBC,OAAO,GAAG,EAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACoBF,GAAG,CAACG,IAAJ,CAAS,IAAT,EAAe;AAC/BC,cAAAA,OAAO,EAAEF,OAAO,CAACE,OADc;AAE/BC,cAAAA,MAAM,EAAEH,OAAO,CAACG,MAFe;AAG/BC,cAAAA,YAAY,EAAET,iBAAiB,CAACK,OAAD,CAHA;AAI/BK,cAAAA,OAAO,EAAEL,OAAO,CAACK;AAJc,aAAf,CADpB;;AAAA;AACQC,YAAAA,GADR;AAAA;AAAA,mBAOqBA,GAAG,CAACC,IAAJ,EAPrB;;AAAA;AAOQC,YAAAA,IAPR;AASQC,YAAAA,MATR,GASiBlB,OAAO,CAACiB,IAAD,CATxB;;AAWE,gBAAIC,MAAM,CAACC,SAAX,EAAsB;AACpBD,cAAAA,MAAM,CAACC,SAAP,GAAmBD,MAAM,CAACC,SAAP,CAAiBC,GAAjB,CAAqBC,EAAE,IAAInB,SAAS,CAACmB,EAAD,CAApC,CAAnB;AACD;;AAbH,6CAeSH,MAfT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAJgC;AAAA;AAAA;;AAqBhC,SAAOV,EAAP;AACD,CAtByB,CAA1B","sourcesContent":["'use strict'\n\nconst toCamel = require('./lib/object-to-camel')\nconst multiaddr = require('multiaddr')\nconst configure = require('./lib/configure')\nconst toUrlSearchParams = require('./lib/to-url-search-params')\n\nmodule.exports = configure(api => {\n  /**\n   * @type {import('.').Implements<typeof import('ipfs-core/src/components/id')>}\n   */\n  async function id (options = {}) {\n    const res = await api.post('id', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    const output = toCamel(data)\n\n    if (output.addresses) {\n      output.addresses = output.addresses.map(ma => multiaddr(ma))\n    }\n\n    return output\n  }\n  return id\n})\n"]},"metadata":{},"sourceType":"script"}