{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _objectSpread = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _asyncToGenerator = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nconst Block = require('ipld-block');\n\nconst CID = require('cids');\n\nconst multihash = require('multihashes');\n\nconst multipartRequest = require('../lib/multipart-request');\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\nconst abortSignal = require('../lib/abort-signal');\n\nconst _require = require('native-abort-controller'),\n      AbortController = _require.AbortController;\n\nmodule.exports = configure(api => {\n  /**\n   * @type {import('..').Implements<typeof import('ipfs-core/src/components/block/put')>}\n   */\n  function put(_x) {\n    return _put.apply(this, arguments);\n  }\n\n  function _put() {\n    _put = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(data, options = {}) {\n      var _multihash$decode, name, length, cid, _multihash$decode2, controller, signal, res, response;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            if (Block.isBlock(data)) {\n              _multihash$decode = multihash.decode(data.cid.multihash), name = _multihash$decode.name, length = _multihash$decode.length;\n              options = _objectSpread(_objectSpread({}, options), {}, {\n                format: data.cid.codec,\n                mhtype: name,\n                mhlen: length,\n                version: data.cid.version\n              }); // @ts-ignore - data is typed as block so TS complains about\n              // Uint8Array assignment.\n\n              data = data.data;\n            } else if (options.cid) {\n              cid = new CID(options.cid);\n              _multihash$decode2 = multihash.decode(cid.multihash), name = _multihash$decode2.name, length = _multihash$decode2.length;\n              options = _objectSpread(_objectSpread({}, options), {}, {\n                format: cid.codec,\n                mhtype: name,\n                mhlen: length,\n                version: cid.version\n              });\n              delete options.cid;\n            } // allow aborting requests on body errors\n\n\n            controller = new AbortController();\n            signal = abortSignal(controller.signal, options.signal);\n            _context.prev = 3;\n            _context.t0 = api;\n            _context.t1 = _objectSpread;\n            _context.t2 = {\n              timeout: options.timeout,\n              signal: signal,\n              searchParams: toUrlSearchParams(options)\n            };\n            _context.next = 9;\n            return multipartRequest(data, controller, options.headers);\n\n          case 9:\n            _context.t3 = _context.sent;\n            _context.t4 = (0, _context.t1)(_context.t2, _context.t3);\n            _context.next = 13;\n            return _context.t0.post.call(_context.t0, 'block/put', _context.t4);\n\n          case 13:\n            response = _context.sent;\n            _context.next = 16;\n            return response.json();\n\n          case 16:\n            res = _context.sent;\n            _context.next = 28;\n            break;\n\n          case 19:\n            _context.prev = 19;\n            _context.t5 = _context[\"catch\"](3);\n\n            if (!(options.format === 'dag-pb')) {\n              _context.next = 25;\n              break;\n            }\n\n            return _context.abrupt(\"return\", put(data, _objectSpread(_objectSpread({}, options), {}, {\n              format: 'protobuf'\n            })));\n\n          case 25:\n            if (!(options.format === 'dag-cbor')) {\n              _context.next = 27;\n              break;\n            }\n\n            return _context.abrupt(\"return\", put(data, _objectSpread(_objectSpread({}, options), {}, {\n              format: 'cbor'\n            })));\n\n          case 27:\n            throw _context.t5;\n\n          case 28:\n            return _context.abrupt(\"return\", new Block(\n            /** @type {Uint8Array} */\n            data, new CID(res.Key)));\n\n          case 29:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee, null, [[3, 19]]);\n    }));\n    return _put.apply(this, arguments);\n  }\n\n  return put;\n});","map":{"version":3,"sources":["C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/ipfs-http-client/src/block/put.js"],"names":["Block","require","CID","multihash","multipartRequest","configure","toUrlSearchParams","abortSignal","AbortController","module","exports","api","put","data","options","isBlock","decode","cid","name","length","format","codec","mhtype","mhlen","version","controller","signal","timeout","searchParams","headers","post","response","json","res","Key"],"mappings":"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","sourcesContent":["'use strict'\n\nconst Block = require('ipld-block')\nconst CID = require('cids')\nconst multihash = require('multihashes')\nconst multipartRequest = require('../lib/multipart-request')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\nconst abortSignal = require('../lib/abort-signal')\nconst { AbortController } = require('native-abort-controller')\n\nmodule.exports = configure(api => {\n  /**\n   * @type {import('..').Implements<typeof import('ipfs-core/src/components/block/put')>}\n   */\n  async function put (data, options = {}) {\n    if (Block.isBlock(data)) {\n      const { name, length } = multihash.decode(data.cid.multihash)\n      options = {\n        ...options,\n        format: data.cid.codec,\n        mhtype: name,\n        mhlen: length,\n        version: data.cid.version\n      }\n      // @ts-ignore - data is typed as block so TS complains about\n      // Uint8Array assignment.\n      data = data.data\n    } else if (options.cid) {\n      const cid = new CID(options.cid)\n      const { name, length } = multihash.decode(cid.multihash)\n      options = {\n        ...options,\n        format: cid.codec,\n        mhtype: name,\n        mhlen: length,\n        version: cid.version\n      }\n      delete options.cid\n    }\n\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n\n    let res\n    try {\n      // @ts-ignore https://github.com/ipfs/js-ipfs-utils/issues/90\n      const response = await api.post('block/put', {\n        timeout: options.timeout,\n        signal: signal,\n        searchParams: toUrlSearchParams(options),\n        ...(\n          await multipartRequest(data, controller, options.headers)\n        )\n      })\n      res = await response.json()\n    } catch (err) {\n      // Retry with \"protobuf\"/\"cbor\" format for go-ipfs\n      // TODO: remove when https://github.com/ipfs/go-cid/issues/75 resolved\n      if (options.format === 'dag-pb') {\n        return put(data, { ...options, format: 'protobuf' })\n      } else if (options.format === 'dag-cbor') {\n        return put(data, { ...options, format: 'cbor' })\n      }\n\n      throw err\n    }\n\n    return new Block(/** @type {Uint8Array} */(data), new CID(res.Key))\n  }\n\n  return put\n})\n"]},"metadata":{},"sourceType":"script"}