{"ast":null,"code":"'use strict';\n\nconst CID = require('cids');\n\nconst uint8ArrayEquals = require('uint8arrays/equals');\n\nconst rmLink = (dagNode, nameOrCid) => {\n  let predicate = null; // It's a name\n\n  if (typeof nameOrCid === 'string') {\n    predicate = link => link.Name === nameOrCid;\n  } else if (nameOrCid instanceof Uint8Array || CID.isCID(nameOrCid)) {\n    predicate = link => uint8ArrayEquals(link.Hash, nameOrCid);\n  }\n\n  if (predicate) {\n    const links = dagNode.Links;\n    let index = 0;\n\n    while (index < links.length) {\n      const link = links[index];\n\n      if (predicate(link)) {\n        links.splice(index, 1);\n      } else {\n        index++;\n      }\n    }\n  } else {\n    throw new Error('second arg needs to be a name or CID');\n  }\n};\n\nmodule.exports = rmLink;","map":{"version":3,"sources":["C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/ipld-dag-pb/src/dag-node/rmLink.js"],"names":["CID","require","uint8ArrayEquals","rmLink","dagNode","nameOrCid","predicate","link","Name","Uint8Array","isCID","Hash","links","Links","index","length","splice","Error","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,MAAD,CAAnB;;AACA,MAAMC,gBAAgB,GAAGD,OAAO,CAAC,oBAAD,CAAhC;;AAEA,MAAME,MAAM,GAAG,CAACC,OAAD,EAAUC,SAAV,KAAwB;AACrC,MAAIC,SAAS,GAAG,IAAhB,CADqC,CAGrC;;AACA,MAAI,OAAOD,SAAP,KAAqB,QAAzB,EAAmC;AACjCC,IAAAA,SAAS,GAAIC,IAAD,IAAUA,IAAI,CAACC,IAAL,KAAcH,SAApC;AACD,GAFD,MAEO,IAAIA,SAAS,YAAYI,UAArB,IAAmCT,GAAG,CAACU,KAAJ,CAAUL,SAAV,CAAvC,EAA6D;AAClEC,IAAAA,SAAS,GAAIC,IAAD,IAAUL,gBAAgB,CAACK,IAAI,CAACI,IAAN,EAAYN,SAAZ,CAAtC;AACD;;AAED,MAAIC,SAAJ,EAAe;AACb,UAAMM,KAAK,GAAGR,OAAO,CAACS,KAAtB;AACA,QAAIC,KAAK,GAAG,CAAZ;;AACA,WAAOA,KAAK,GAAGF,KAAK,CAACG,MAArB,EAA6B;AAC3B,YAAMR,IAAI,GAAGK,KAAK,CAACE,KAAD,CAAlB;;AACA,UAAIR,SAAS,CAACC,IAAD,CAAb,EAAqB;AACnBK,QAAAA,KAAK,CAACI,MAAN,CAAaF,KAAb,EAAoB,CAApB;AACD,OAFD,MAEO;AACLA,QAAAA,KAAK;AACN;AACF;AACF,GAXD,MAWO;AACL,UAAM,IAAIG,KAAJ,CAAU,sCAAV,CAAN;AACD;AACF,CAxBD;;AA0BAC,MAAM,CAACC,OAAP,GAAiBhB,MAAjB","sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst uint8ArrayEquals = require('uint8arrays/equals')\n\nconst rmLink = (dagNode, nameOrCid) => {\n  let predicate = null\n\n  // It's a name\n  if (typeof nameOrCid === 'string') {\n    predicate = (link) => link.Name === nameOrCid\n  } else if (nameOrCid instanceof Uint8Array || CID.isCID(nameOrCid)) {\n    predicate = (link) => uint8ArrayEquals(link.Hash, nameOrCid)\n  }\n\n  if (predicate) {\n    const links = dagNode.Links\n    let index = 0\n    while (index < links.length) {\n      const link = links[index]\n      if (predicate(link)) {\n        links.splice(index, 1)\n      } else {\n        index++\n      }\n    }\n  } else {\n    throw new Error('second arg needs to be a name or CID')\n  }\n}\n\nmodule.exports = rmLink\n"]},"metadata":{},"sourceType":"script"}