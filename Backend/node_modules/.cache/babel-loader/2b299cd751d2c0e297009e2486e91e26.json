{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _wrapAsyncGenerator = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _awaitAsyncGenerator = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _asyncIterator = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar _asyncGeneratorDelegate = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncGeneratorDelegate\");\n\nconst CID = require('cids');\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\nmodule.exports = configure(api => {\n  return /*#__PURE__*/function () {\n    var _gc = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(options = {}) {\n      var res;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _awaitAsyncGenerator(api.post('repo/gc', {\n              timeout: options.timeout,\n              signal: options.signal,\n              searchParams: toUrlSearchParams(options),\n              headers: options.headers,\n              transform: res => {\n                return {\n                  err: res.Error ? new Error(res.Error) : null,\n                  cid: (res.Key || {})['/'] ? new CID(res.Key['/']) : null\n                };\n              }\n            }));\n\n          case 2:\n            res = _context.sent;\n            return _context.delegateYield(_asyncGeneratorDelegate(_asyncIterator(res.ndjson()), _awaitAsyncGenerator), \"t0\", 4);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n\n    function gc() {\n      return _gc.apply(this, arguments);\n    }\n\n    return gc;\n  }();\n});","map":{"version":3,"sources":["C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/ipfs-http-client/src/repo/gc.js"],"names":["CID","require","configure","toUrlSearchParams","module","exports","api","options","post","timeout","signal","searchParams","headers","transform","res","err","Error","cid","Key","ndjson","gc"],"mappings":"AAAA;;;;;;;;;;;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,MAAD,CAAnB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAME,iBAAiB,GAAGF,OAAO,CAAC,6BAAD,CAAjC;;AAEAG,MAAM,CAACC,OAAP,GAAiBH,SAAS,CAACI,GAAG,IAAI;AAChC;AAAA,yEAAO,iBAAqBC,OAAO,GAAG,EAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wCACaD,GAAG,CAACE,IAAJ,CAAS,SAAT,EAAoB;AACpCC,cAAAA,OAAO,EAAEF,OAAO,CAACE,OADmB;AAEpCC,cAAAA,MAAM,EAAEH,OAAO,CAACG,MAFoB;AAGpCC,cAAAA,YAAY,EAAER,iBAAiB,CAACI,OAAD,CAHK;AAIpCK,cAAAA,OAAO,EAAEL,OAAO,CAACK,OAJmB;AAKpCC,cAAAA,SAAS,EAAGC,GAAD,IAAS;AAClB,uBAAO;AACLC,kBAAAA,GAAG,EAAED,GAAG,CAACE,KAAJ,GAAY,IAAIA,KAAJ,CAAUF,GAAG,CAACE,KAAd,CAAZ,GAAmC,IADnC;AAELC,kBAAAA,GAAG,EAAE,CAACH,GAAG,CAACI,GAAJ,IAAW,EAAZ,EAAgB,GAAhB,IAAuB,IAAIlB,GAAJ,CAAQc,GAAG,CAACI,GAAJ,CAAQ,GAAR,CAAR,CAAvB,GAA+C;AAF/C,iBAAP;AAID;AAVmC,aAApB,CADb;;AAAA;AACCJ,YAAAA,GADD;AAcL,iFAAQA,GAAG,CAACK,MAAJ,EAAR;;AAdK;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;;AAAA,aAAwBC,EAAxB;AAAA;AAAA;;AAAA,WAAwBA,EAAxB;AAAA;AAgBD,CAjByB,CAA1B","sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\nmodule.exports = configure(api => {\n  return async function * gc (options = {}) {\n    const res = await api.post('repo/gc', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers,\n      transform: (res) => {\n        return {\n          err: res.Error ? new Error(res.Error) : null,\n          cid: (res.Key || {})['/'] ? new CID(res.Key['/']) : null\n        }\n      }\n    })\n\n    yield * res.ndjson()\n  }\n})\n"]},"metadata":{},"sourceType":"script"}