{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _objectSpread = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _asyncToGenerator = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nconst CID = require('cids');\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\nmodule.exports = configure(api => {\n  /**\n   * @type {import('..').Implements<typeof import('ipfs-core/src/components/bitswap/wantlist-for-peer')>}\n   */\n  function wantlistForPeer(_x) {\n    return _wantlistForPeer.apply(this, arguments);\n  }\n\n  function _wantlistForPeer() {\n    _wantlistForPeer = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(peerId, options = {}) {\n      var res;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            // @ts-ignore - CID|string seems to confuse typedef\n            peerId = typeof peerId === 'string' ? peerId : new CID(peerId).toString();\n            _context.next = 3;\n            return api.post('bitswap/wantlist', {\n              timeout: options.timeout,\n              signal: options.signal,\n              searchParams: toUrlSearchParams(_objectSpread(_objectSpread({}, options), {}, {\n                peer: peerId\n              })),\n              headers: options.headers\n            });\n\n          case 3:\n            _context.next = 5;\n            return _context.sent.json();\n\n          case 5:\n            res = _context.sent;\n            return _context.abrupt(\"return\", (res.Keys || []).map(k => new CID(k['/'])));\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n    return _wantlistForPeer.apply(this, arguments);\n  }\n\n  return wantlistForPeer;\n});","map":{"version":3,"sources":["C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/ipfs-http-client/src/bitswap/wantlist-for-peer.js"],"names":["CID","require","configure","toUrlSearchParams","module","exports","api","wantlistForPeer","peerId","options","toString","post","timeout","signal","searchParams","peer","headers","json","res","Keys","map","k"],"mappings":"AAAA;;;;;;;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,MAAD,CAAnB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAME,iBAAiB,GAAGF,OAAO,CAAC,6BAAD,CAAjC;;AAEAG,MAAM,CAACC,OAAP,GAAiBH,SAAS,CAACI,GAAG,IAAI;AAChC;AACF;AACA;AAHkC,WAIjBC,eAJiB;AAAA;AAAA;;AAAA;AAAA,gFAIhC,iBAAgCC,MAAhC,EAAwCC,OAAO,GAAG,EAAlD;AAAA;AAAA;AAAA;AAAA;AACE;AACAD,YAAAA,MAAM,GAAG,OAAOA,MAAP,KAAkB,QAAlB,GAA6BA,MAA7B,GAAsC,IAAIR,GAAJ,CAAQQ,MAAR,EAAgBE,QAAhB,EAA/C;AAFF;AAAA,mBAI2BJ,GAAG,CAACK,IAAJ,CAAS,kBAAT,EAA6B;AACpDC,cAAAA,OAAO,EAAEH,OAAO,CAACG,OADmC;AAEpDC,cAAAA,MAAM,EAAEJ,OAAO,CAACI,MAFoC;AAGpDC,cAAAA,YAAY,EAAEX,iBAAiB,iCAC1BM,OAD0B;AAE7BM,gBAAAA,IAAI,EAAEP;AAFuB,iBAHqB;AAOpDQ,cAAAA,OAAO,EAAEP,OAAO,CAACO;AAPmC,aAA7B,CAJ3B;;AAAA;AAAA;AAAA,iCAYMC,IAZN;;AAAA;AAIQC,YAAAA,GAJR;AAAA,6CAcS,CAACA,GAAG,CAACC,IAAJ,IAAY,EAAb,EAAiBC,GAAjB,CAAqBC,CAAC,IAAI,IAAIrB,GAAJ,CAAQqB,CAAC,CAAC,GAAD,CAAT,CAA1B,CAdT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAJgC;AAAA;AAAA;;AAoBhC,SAAOd,eAAP;AACD,CArByB,CAA1B","sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\nmodule.exports = configure(api => {\n  /**\n   * @type {import('..').Implements<typeof import('ipfs-core/src/components/bitswap/wantlist-for-peer')>}\n   */\n  async function wantlistForPeer (peerId, options = {}) {\n    // @ts-ignore - CID|string seems to confuse typedef\n    peerId = typeof peerId === 'string' ? peerId : new CID(peerId).toString()\n\n    const res = await (await api.post('bitswap/wantlist', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        ...options,\n        peer: peerId\n      }),\n      headers: options.headers\n    })).json()\n\n    return (res.Keys || []).map(k => new CID(k['/']))\n  }\n  return wantlistForPeer\n})\n"]},"metadata":{},"sourceType":"script"}