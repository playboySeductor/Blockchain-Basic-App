{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _objectSpread = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _asyncToGenerator = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nconst toCamel = require('../lib/object-to-camel');\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\nmodule.exports = configure(api => {\n  /**\n   * @type {import('..').ImplementsMethod<'set', import('ipfs-core/src/components/config')>}\n   */\n  const set = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(key, value, options = {}) {\n      var params, res;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            if (!(typeof key !== 'string')) {\n              _context.next = 2;\n              break;\n            }\n\n            throw new Error('Invalid key type');\n\n          case 2:\n            params = _objectSpread(_objectSpread({}, options), encodeParam(key, value));\n            _context.next = 5;\n            return api.post('config', {\n              timeout: options.timeout,\n              signal: options.signal,\n              searchParams: toUrlSearchParams(params),\n              headers: options.headers\n            });\n\n          case 5:\n            res = _context.sent;\n            _context.t0 = toCamel;\n            _context.next = 9;\n            return res.json();\n\n          case 9:\n            _context.t1 = _context.sent;\n            return _context.abrupt(\"return\", (0, _context.t0)(_context.t1));\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n\n    return function set(_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return set;\n});\n\nconst encodeParam = (key, value) => {\n  switch (typeof value) {\n    case 'boolean':\n      return {\n        arg: [key, value.toString()],\n        bool: true\n      };\n\n    case 'string':\n      return {\n        arg: [key, value]\n      };\n\n    default:\n      return {\n        arg: [key, JSON.stringify(value)],\n        json: true\n      };\n  }\n};","map":{"version":3,"sources":["C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/ipfs-http-client/src/config/set.js"],"names":["toCamel","require","configure","toUrlSearchParams","module","exports","api","set","key","value","options","Error","params","encodeParam","post","timeout","signal","searchParams","headers","res","json","arg","toString","bool","JSON","stringify"],"mappings":"AAAA;;;;;;;;AAEA,MAAMA,OAAO,GAAGC,OAAO,CAAC,wBAAD,CAAvB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAME,iBAAiB,GAAGF,OAAO,CAAC,6BAAD,CAAjC;;AAEAG,MAAM,CAACC,OAAP,GAAiBH,SAAS,CAACI,GAAG,IAAI;AAChC;AACF;AACA;AACE,QAAMC,GAAG;AAAA,wEAAG,iBAAOC,GAAP,EAAYC,KAAZ,EAAmBC,OAAO,GAAG,EAA7B;AAAA;AAAA;AAAA;AAAA;AAAA,kBACN,OAAOF,GAAP,KAAe,QADT;AAAA;AAAA;AAAA;;AAAA,kBAEF,IAAIG,KAAJ,CAAU,kBAAV,CAFE;;AAAA;AAKJC,YAAAA,MALI,mCAMLF,OANK,GAOLG,WAAW,CAACL,GAAD,EAAMC,KAAN,CAPN;AAAA;AAAA,mBAUQH,GAAG,CAACQ,IAAJ,CAAS,QAAT,EAAmB;AACnCC,cAAAA,OAAO,EAAEL,OAAO,CAACK,OADkB;AAEnCC,cAAAA,MAAM,EAAEN,OAAO,CAACM,MAFmB;AAGnCC,cAAAA,YAAY,EAAEd,iBAAiB,CAACS,MAAD,CAHI;AAInCM,cAAAA,OAAO,EAAER,OAAO,CAACQ;AAJkB,aAAnB,CAVR;;AAAA;AAUJC,YAAAA,GAVI;AAAA,0BAiBHnB,OAjBG;AAAA;AAAA,mBAiBWmB,GAAG,CAACC,IAAJ,EAjBX;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAHb,GAAG;AAAA;AAAA;AAAA,KAAT;;AAoBA,SAAOA,GAAP;AACD,CAzByB,CAA1B;;AA2BA,MAAMM,WAAW,GAAG,CAACL,GAAD,EAAMC,KAAN,KAAgB;AAClC,UAAQ,OAAOA,KAAf;AACE,SAAK,SAAL;AACE,aAAO;AAAEY,QAAAA,GAAG,EAAE,CAACb,GAAD,EAAMC,KAAK,CAACa,QAAN,EAAN,CAAP;AAAgCC,QAAAA,IAAI,EAAE;AAAtC,OAAP;;AACF,SAAK,QAAL;AACE,aAAO;AAAEF,QAAAA,GAAG,EAAE,CAACb,GAAD,EAAMC,KAAN;AAAP,OAAP;;AACF;AACE,aAAO;AAAEY,QAAAA,GAAG,EAAE,CAACb,GAAD,EAAMgB,IAAI,CAACC,SAAL,CAAehB,KAAf,CAAN,CAAP;AAAqCW,QAAAA,IAAI,EAAE;AAA3C,OAAP;AANJ;AAQD,CATD","sourcesContent":["'use strict'\n\nconst toCamel = require('../lib/object-to-camel')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\nmodule.exports = configure(api => {\n  /**\n   * @type {import('..').ImplementsMethod<'set', import('ipfs-core/src/components/config')>}\n   */\n  const set = async (key, value, options = {}) => {\n    if (typeof key !== 'string') {\n      throw new Error('Invalid key type')\n    }\n\n    const params = {\n      ...options,\n      ...encodeParam(key, value)\n    }\n\n    const res = await api.post('config', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams(params),\n      headers: options.headers\n    })\n\n    return toCamel(await res.json())\n  }\n\n  return set\n})\n\nconst encodeParam = (key, value) => {\n  switch (typeof value) {\n    case 'boolean':\n      return { arg: [key, value.toString()], bool: true }\n    case 'string':\n      return { arg: [key, value] }\n    default:\n      return { arg: [key, JSON.stringify(value)], json: true }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}