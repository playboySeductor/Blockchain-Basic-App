{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nconst addAll = require('./add-all');\n\nconst last = require('it-last');\n\nconst configure = require('./lib/configure');\n/**\n * @param {import(\"./lib/core\").ClientOptions} options\n */\n\n\nmodule.exports = options => {\n  const all = addAll(options);\n  return configure(() => {\n    /**\n     * @type {import('.').Implements<typeof import('ipfs-core/src/components/add')>}\n     */\n    function add(_x) {\n      return _add.apply(this, arguments);\n    }\n\n    function _add() {\n      _add = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(input, options = {}) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return last(all(input, options));\n\n            case 2:\n              return _context.abrupt(\"return\", _context.sent);\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n      return _add.apply(this, arguments);\n    }\n\n    return add;\n  })(options);\n};","map":{"version":3,"sources":["C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/ipfs-http-client/src/add.js"],"names":["addAll","require","last","configure","module","exports","options","all","add","input"],"mappings":"AAAA;;;;;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,WAAD,CAAtB;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,SAAD,CAApB;;AACA,MAAME,SAAS,GAAGF,OAAO,CAAC,iBAAD,CAAzB;AAEA;AACA;AACA;;;AACAG,MAAM,CAACC,OAAP,GAAkBC,OAAD,IAAa;AAC5B,QAAMC,GAAG,GAAGP,MAAM,CAACM,OAAD,CAAlB;AACA,SAAOH,SAAS,CAAC,MAAM;AACrB;AACJ;AACA;AAHyB,aAINK,GAJM;AAAA;AAAA;;AAAA;AAAA,sEAIrB,iBAAoBC,KAApB,EAA2BH,OAAO,GAAG,EAArC;AAAA;AAAA;AAAA;AAAA;AAAA,qBAEeJ,IAAI,CAACK,GAAG,CAACE,KAAD,EAAQH,OAAR,CAAJ,CAFnB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAJqB;AAAA;AAAA;;AAQrB,WAAOE,GAAP;AACD,GATe,CAAT,CASJF,OATI,CAAP;AAUD,CAZD","sourcesContent":["'use strict'\n\nconst addAll = require('./add-all')\nconst last = require('it-last')\nconst configure = require('./lib/configure')\n\n/**\n * @param {import(\"./lib/core\").ClientOptions} options\n */\nmodule.exports = (options) => {\n  const all = addAll(options)\n  return configure(() => {\n    /**\n     * @type {import('.').Implements<typeof import('ipfs-core/src/components/add')>}\n     */\n    async function add (input, options = {}) {\n      // @ts-ignore - last may return undefind if source is empty\n      return await last(all(input, options))\n    }\n    return add\n  })(options)\n}\n"]},"metadata":{},"sourceType":"script"}