{"ast":null,"code":"/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\nvar used = [];\n/*!\n * Chai version\n */\n\nexports.version = '4.2.0';\n/*!\n * Assertion Error\n */\n\nexports.AssertionError = require('assertion-error');\n/*!\n * Utils for plugins (not exported)\n */\n\nvar util = require('./chai/utils');\n/**\n * # .use(function)\n *\n * Provides a way to extend the internals of Chai.\n *\n * @param {Function}\n * @returns {this} for chaining\n * @api public\n */\n\n\nexports.use = function (fn) {\n  if (!~used.indexOf(fn)) {\n    fn(exports, util);\n    used.push(fn);\n  }\n\n  return exports;\n};\n/*!\n * Utility Functions\n */\n\n\nexports.util = util;\n/*!\n * Configuration\n */\n\nvar config = require('./chai/config');\n\nexports.config = config;\n/*!\n * Primary `Assertion` prototype\n */\n\nvar assertion = require('./chai/assertion');\n\nexports.use(assertion);\n/*!\n * Core Assertions\n */\n\nvar core = require('./chai/core/assertions');\n\nexports.use(core);\n/*!\n * Expect interface\n */\n\nvar expect = require('./chai/interface/expect');\n\nexports.use(expect);\n/*!\n * Should interface\n */\n\nvar should = require('./chai/interface/should');\n\nexports.use(should);\n/*!\n * Assert interface\n */\n\nvar assert = require('./chai/interface/assert');\n\nexports.use(assert);","map":{"version":3,"sources":["C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/chai/lib/chai.js"],"names":["used","exports","version","AssertionError","require","util","use","fn","indexOf","push","config","assertion","core","expect","should","assert"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AAEA,IAAIA,IAAI,GAAG,EAAX;AAEA;AACA;AACA;;AAEAC,OAAO,CAACC,OAAR,GAAkB,OAAlB;AAEA;AACA;AACA;;AAEAD,OAAO,CAACE,cAAR,GAAyBC,OAAO,CAAC,iBAAD,CAAhC;AAEA;AACA;AACA;;AAEA,IAAIC,IAAI,GAAGD,OAAO,CAAC,cAAD,CAAlB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAH,OAAO,CAACK,GAAR,GAAc,UAAUC,EAAV,EAAc;AAC1B,MAAI,CAAC,CAACP,IAAI,CAACQ,OAAL,CAAaD,EAAb,CAAN,EAAwB;AACtBA,IAAAA,EAAE,CAACN,OAAD,EAAUI,IAAV,CAAF;AACAL,IAAAA,IAAI,CAACS,IAAL,CAAUF,EAAV;AACD;;AAED,SAAON,OAAP;AACD,CAPD;AASA;AACA;AACA;;;AAEAA,OAAO,CAACI,IAAR,GAAeA,IAAf;AAEA;AACA;AACA;;AAEA,IAAIK,MAAM,GAAGN,OAAO,CAAC,eAAD,CAApB;;AACAH,OAAO,CAACS,MAAR,GAAiBA,MAAjB;AAEA;AACA;AACA;;AAEA,IAAIC,SAAS,GAAGP,OAAO,CAAC,kBAAD,CAAvB;;AACAH,OAAO,CAACK,GAAR,CAAYK,SAAZ;AAEA;AACA;AACA;;AAEA,IAAIC,IAAI,GAAGR,OAAO,CAAC,wBAAD,CAAlB;;AACAH,OAAO,CAACK,GAAR,CAAYM,IAAZ;AAEA;AACA;AACA;;AAEA,IAAIC,MAAM,GAAGT,OAAO,CAAC,yBAAD,CAApB;;AACAH,OAAO,CAACK,GAAR,CAAYO,MAAZ;AAEA;AACA;AACA;;AAEA,IAAIC,MAAM,GAAGV,OAAO,CAAC,yBAAD,CAApB;;AACAH,OAAO,CAACK,GAAR,CAAYQ,MAAZ;AAEA;AACA;AACA;;AAEA,IAAIC,MAAM,GAAGX,OAAO,CAAC,yBAAD,CAApB;;AACAH,OAAO,CAACK,GAAR,CAAYS,MAAZ","sourcesContent":["/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar used = [];\n\n/*!\n * Chai version\n */\n\nexports.version = '4.2.0';\n\n/*!\n * Assertion Error\n */\n\nexports.AssertionError = require('assertion-error');\n\n/*!\n * Utils for plugins (not exported)\n */\n\nvar util = require('./chai/utils');\n\n/**\n * # .use(function)\n *\n * Provides a way to extend the internals of Chai.\n *\n * @param {Function}\n * @returns {this} for chaining\n * @api public\n */\n\nexports.use = function (fn) {\n  if (!~used.indexOf(fn)) {\n    fn(exports, util);\n    used.push(fn);\n  }\n\n  return exports;\n};\n\n/*!\n * Utility Functions\n */\n\nexports.util = util;\n\n/*!\n * Configuration\n */\n\nvar config = require('./chai/config');\nexports.config = config;\n\n/*!\n * Primary `Assertion` prototype\n */\n\nvar assertion = require('./chai/assertion');\nexports.use(assertion);\n\n/*!\n * Core Assertions\n */\n\nvar core = require('./chai/core/assertions');\nexports.use(core);\n\n/*!\n * Expect interface\n */\n\nvar expect = require('./chai/interface/expect');\nexports.use(expect);\n\n/*!\n * Should interface\n */\n\nvar should = require('./chai/interface/should');\nexports.use(should);\n\n/*!\n * Assert interface\n */\n\nvar assert = require('./chai/interface/assert');\nexports.use(assert);\n"]},"metadata":{},"sourceType":"script"}