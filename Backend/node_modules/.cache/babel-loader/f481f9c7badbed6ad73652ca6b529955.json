{"ast":null,"code":"'use strict';\n\nconst varint = require('varint');\n\nconst encoder = require('./encoder');\n\nfunction in32Encode(val, buffer, dataView, offset) {\n  varint.encode(val < 0 ? val + 4294967296 : val, buffer, offset);\n  in32Encode.bytes = varint.encode.bytes;\n}\n\nfunction int32Decode(buffer, dataView, offset) {\n  const val = varint.decode(buffer, offset);\n  int32Decode.bytes = varint.decode.bytes;\n  return val > 2147483647 ? val - 4294967296 : val;\n}\n\nfunction int32EncodingLength(val) {\n  return varint.encodingLength(val < 0 ? val + 4294967296 : val);\n}\n\nmodule.exports = encoder(0, in32Encode, int32Decode, int32EncodingLength);","map":{"version":3,"sources":["C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/protons/src/compile/encodings/int32.js"],"names":["varint","require","encoder","in32Encode","val","buffer","dataView","offset","encode","bytes","int32Decode","decode","int32EncodingLength","encodingLength","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,WAAD,CAAvB;;AAEA,SAASE,UAAT,CAAqBC,GAArB,EAA0BC,MAA1B,EAAkCC,QAAlC,EAA4CC,MAA5C,EAAoD;AAClDP,EAAAA,MAAM,CAACQ,MAAP,CAAcJ,GAAG,GAAG,CAAN,GAAUA,GAAG,GAAG,UAAhB,GAA6BA,GAA3C,EAAgDC,MAAhD,EAAwDE,MAAxD;AACAJ,EAAAA,UAAU,CAACM,KAAX,GAAmBT,MAAM,CAACQ,MAAP,CAAcC,KAAjC;AACD;;AAED,SAASC,WAAT,CAAsBL,MAAtB,EAA8BC,QAA9B,EAAwCC,MAAxC,EAAgD;AAC9C,QAAMH,GAAG,GAAGJ,MAAM,CAACW,MAAP,CAAcN,MAAd,EAAsBE,MAAtB,CAAZ;AACAG,EAAAA,WAAW,CAACD,KAAZ,GAAoBT,MAAM,CAACW,MAAP,CAAcF,KAAlC;AAEA,SAAOL,GAAG,GAAG,UAAN,GAAmBA,GAAG,GAAG,UAAzB,GAAsCA,GAA7C;AACD;;AAED,SAASQ,mBAAT,CAA8BR,GAA9B,EAAmC;AACjC,SAAOJ,MAAM,CAACa,cAAP,CAAsBT,GAAG,GAAG,CAAN,GAAUA,GAAG,GAAG,UAAhB,GAA6BA,GAAnD,CAAP;AACD;;AAEDU,MAAM,CAACC,OAAP,GAAiBb,OAAO,CAAC,CAAD,EAAIC,UAAJ,EAAgBO,WAAhB,EAA6BE,mBAA7B,CAAxB","sourcesContent":["'use strict'\n\nconst varint = require('varint')\nconst encoder = require('./encoder')\n\nfunction in32Encode (val, buffer, dataView, offset) {\n  varint.encode(val < 0 ? val + 4294967296 : val, buffer, offset)\n  in32Encode.bytes = varint.encode.bytes\n}\n\nfunction int32Decode (buffer, dataView, offset) {\n  const val = varint.decode(buffer, offset)\n  int32Decode.bytes = varint.decode.bytes\n\n  return val > 2147483647 ? val - 4294967296 : val\n}\n\nfunction int32EncodingLength (val) {\n  return varint.encodingLength(val < 0 ? val + 4294967296 : val)\n}\n\nmodule.exports = encoder(0, in32Encode, int32Decode, int32EncodingLength)\n"]},"metadata":{},"sourceType":"script"}