{"ast":null,"code":"/* eslint max-depth: 1 */\n'use strict';\n\nconst varint = require('varint');\n\nconst defined = require('./utils').defined;\n\nfunction toSentenceCase(string) {\n  return \"\".concat(string.substring(0, 1).toUpperCase()).concat(string.substring(1));\n}\n\nfunction addPropertyAccessors(obj, name, _value, defaultValue) {\n  if (Object.prototype.hasOwnProperty.call(obj, name)) {\n    // have already added this property\n    return;\n  }\n\n  const sentenceCaseName = toSentenceCase(name);\n  Object.defineProperties(obj, {\n    [name]: {\n      enumerable: true,\n      configurable: true,\n      set: val => {\n        _value = val;\n      },\n      get: () => {\n        if (_value === undefined) {\n          return defaultValue;\n        }\n\n        return _value;\n      }\n    },\n    [\"has\".concat(sentenceCaseName)]: {\n      configurable: true,\n      value: () => {\n        return _value !== undefined;\n      }\n    },\n    [\"set\".concat(sentenceCaseName)]: {\n      configurable: true,\n      value: val => {\n        _value = val;\n      }\n    },\n    [\"get\".concat(sentenceCaseName)]: {\n      configurable: true,\n      value: () => {\n        return _value;\n      }\n    },\n    [\"clear\".concat(sentenceCaseName)]: {\n      configurable: true,\n      value: () => {\n        _value = undefined;\n        obj[name] = undefined;\n      }\n    }\n  });\n}\n\nfunction compileDecode(m, resolve, enc) {\n  const requiredFields = [];\n  const fields = {};\n  const oneofFields = [];\n  const vals = [];\n\n  for (var i = 0; i < enc.length; i++) {\n    const field = m.fields[i];\n    fields[field.tag] = i;\n    const def = field.options && field.options.default;\n    const resolved = resolve(field.type, m.id, false);\n    vals[i] = [def, resolved && resolved.values];\n    m.fields[i].packed = field.repeated && field.options && field.options.packed && field.options.packed !== 'false';\n\n    if (field.required) {\n      requiredFields.push(field.name);\n    }\n\n    if (field.oneof) {\n      oneofFields.push(field.name);\n    }\n  }\n\n  function decodeField(e, field, obj, buf, dataView, offset, i) {\n    const name = field.name;\n\n    if (field.oneof) {\n      // clear already defined oneof fields\n      const props = Object.keys(obj);\n\n      for (var j = 0; j < props.length; j++) {\n        if (oneofFields.indexOf(props[j]) > -1) {\n          const sentenceCase = toSentenceCase(props[j]);\n          delete obj[\"has\".concat(sentenceCase)];\n          delete obj[\"get\".concat(sentenceCase)];\n          delete obj[\"set\".concat(sentenceCase)];\n          delete obj[\"clear\".concat(sentenceCase)];\n          delete obj[props[j]];\n        }\n      }\n    }\n\n    let value;\n\n    if (e.message) {\n      const len = varint.decode(buf, offset);\n      offset += varint.decode.bytes;\n      const decoded = e.decode(buf, dataView, offset, offset + len);\n\n      if (field.map) {\n        value = obj[name] || {};\n        value[decoded.key] = decoded.value;\n      } else if (field.repeated) {\n        value = obj[name] || [];\n        value.push(decoded);\n      } else {\n        value = decoded;\n      }\n    } else {\n      if (field.repeated) {\n        value = obj[name] || [];\n        value.push(e.decode(buf, dataView, offset));\n      } else {\n        value = e.decode(buf, dataView, offset);\n      }\n    }\n\n    addPropertyAccessors(obj, name, value);\n    offset += e.decode.bytes;\n    return offset;\n  }\n\n  return function decode(buf, view, offset, end) {\n    if (offset == null) {\n      offset = 0;\n    }\n\n    if (end == null) {\n      end = buf.length;\n    }\n\n    if (!(end <= buf.length && offset <= buf.length)) {\n      throw new Error('Decoded message is not valid');\n    }\n\n    if (!view) {\n      view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength);\n    }\n\n    var oldOffset = offset;\n    var obj = {};\n    var field;\n\n    while (true) {\n      if (end <= offset) {\n        // finished\n        // check required methods\n        var name = '';\n        var j = 0;\n\n        for (j = 0; j < requiredFields.length; j++) {\n          name = requiredFields[j];\n\n          if (!defined(obj[name])) {\n            throw new Error('Decoded message is not valid, missing required field: ' + name);\n          }\n        } // fill out missing defaults\n\n\n        var val;\n        var def;\n\n        for (j = 0; j < enc.length; j++) {\n          field = m.fields[j];\n          def = vals[j][0];\n          val = vals[j][1];\n          name = field.name;\n          let defaultVal;\n\n          if (Object.prototype.hasOwnProperty.call(obj, name)) {\n            continue;\n          }\n\n          var done = false;\n\n          if (field.oneof) {\n            var props = Object.keys(obj);\n\n            for (var k = 0; k < props.length; k++) {\n              if (oneofFields.indexOf(props[k]) > -1) {\n                done = true;\n                break;\n              }\n            }\n          }\n\n          if (done) {\n            continue;\n          }\n\n          if (val) {\n            // is enum\n            if (field.repeated) {\n              def = [];\n            } else {\n              def = def && val[def] ? val[def].value : val[Object.keys(val)[0]].value;\n              def = parseInt(def || 0, 10);\n            }\n          } else {\n            defaultVal = defaultValue(field);\n            def = coerceValue(field, def);\n          }\n\n          addPropertyAccessors(obj, name, def, defaultVal);\n        }\n\n        decode.bytes = offset - oldOffset;\n        return obj;\n      }\n\n      var prefix = varint.decode(buf, offset);\n      offset += varint.decode.bytes;\n      var tag = prefix >> 3;\n      var i = fields[tag];\n\n      if (i == null) {\n        offset = skip(prefix & 7, buf, view, offset);\n        continue;\n      }\n\n      var e = enc[i];\n      field = m.fields[i];\n\n      if (field.packed) {\n        var packedEnd = varint.decode(buf, offset);\n        offset += varint.decode.bytes;\n        packedEnd += offset;\n\n        while (offset < packedEnd) {\n          offset = decodeField(e, field, obj, buf, view, offset, i);\n        }\n      } else {\n        offset = decodeField(e, field, obj, buf, view, offset, i);\n      }\n    }\n  };\n}\n\nvar skip = function skip(type, buffer, view, offset) {\n  switch (type) {\n    case 0:\n      varint.decode(buffer, offset);\n      return offset + varint.decode.bytes;\n\n    case 1:\n      return offset + 8;\n\n    case 2:\n      var len = varint.decode(buffer, offset);\n      return offset + varint.decode.bytes + len;\n\n    case 3:\n    case 4:\n      throw new Error('Groups are not supported');\n\n    case 5:\n      return offset + 4;\n\n    default:\n      throw new Error('Unknown wire type: ' + type);\n  }\n};\n\nvar defaultValue = function defaultValue(f) {\n  if (f.map) return {};\n  if (f.repeated) return [];\n\n  switch (f.type) {\n    case 'string':\n      return '';\n\n    case 'bool':\n      return false;\n\n    case 'float':\n    case 'double':\n    case 'sfixed32':\n    case 'fixed32':\n    case 'varint':\n    case 'enum':\n    case 'uint64':\n    case 'uint32':\n    case 'int64':\n    case 'int32':\n    case 'sint64':\n    case 'sint32':\n      return 0;\n\n    default:\n      return null;\n  }\n};\n\nvar coerceValue = function coerceValue(f, def) {\n  if (def === undefined) {\n    return def;\n  }\n\n  switch (f.type) {\n    case 'bool':\n      return def === 'true';\n\n    case 'float':\n    case 'double':\n    case 'sfixed32':\n    case 'fixed32':\n    case 'varint':\n    case 'enum':\n    case 'uint64':\n    case 'uint32':\n    case 'int64':\n    case 'int32':\n    case 'sint64':\n    case 'sint32':\n      return parseInt(def, 10);\n\n    default:\n      return def;\n  }\n};\n\nmodule.exports = compileDecode;","map":{"version":3,"sources":["C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/protons/src/compile/decode.js"],"names":["varint","require","defined","toSentenceCase","string","substring","toUpperCase","addPropertyAccessors","obj","name","value","defaultValue","Object","prototype","hasOwnProperty","call","sentenceCaseName","defineProperties","enumerable","configurable","set","val","get","undefined","compileDecode","m","resolve","enc","requiredFields","fields","oneofFields","vals","i","length","field","tag","def","options","default","resolved","type","id","values","packed","repeated","required","push","oneof","decodeField","e","buf","dataView","offset","props","keys","j","indexOf","sentenceCase","message","len","decode","bytes","decoded","map","key","view","end","Error","DataView","buffer","byteOffset","byteLength","oldOffset","defaultVal","done","k","parseInt","coerceValue","prefix","skip","packedEnd","f","module","exports"],"mappings":"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","sourcesContent":["/* eslint max-depth: 1 */\n'use strict'\n\nconst varint = require('varint')\nconst defined = require('./utils').defined\n\nfunction toSentenceCase (string) {\n  return `${string.substring(0, 1).toUpperCase()}${string.substring(1)}`\n}\n\nfunction addPropertyAccessors (obj, name, value, defaultValue) {\n  if (Object.prototype.hasOwnProperty.call(obj, name)) {\n    // have already added this property\n    return\n  }\n\n  const sentenceCaseName = toSentenceCase(name)\n\n  Object.defineProperties(obj, {\n    [name]: {\n      enumerable: true,\n      configurable: true,\n      set: (val) => {\n        value = val\n      },\n      get: () => {\n        if (value === undefined) {\n          return defaultValue\n        }\n\n        return value\n      }\n    },\n    [`has${sentenceCaseName}`]: {\n      configurable: true,\n      value: () => {\n        return value !== undefined\n      }\n    },\n    [`set${sentenceCaseName}`]: {\n      configurable: true,\n      value: (val) => {\n        value = val\n      }\n    },\n    [`get${sentenceCaseName}`]: {\n      configurable: true,\n      value: () => {\n        return value\n      }\n    },\n    [`clear${sentenceCaseName}`]: {\n      configurable: true,\n      value: () => {\n        value = undefined\n        obj[name] = undefined\n      }\n    }\n  })\n}\n\nfunction compileDecode (m, resolve, enc) {\n  const requiredFields = []\n  const fields = {}\n  const oneofFields = []\n  const vals = []\n\n  for (var i = 0; i < enc.length; i++) {\n    const field = m.fields[i]\n\n    fields[field.tag] = i\n\n    const def = field.options && field.options.default\n    const resolved = resolve(field.type, m.id, false)\n    vals[i] = [def, resolved && resolved.values]\n\n    m.fields[i].packed = field.repeated && field.options && field.options.packed && field.options.packed !== 'false'\n\n    if (field.required) {\n      requiredFields.push(field.name)\n    }\n\n    if (field.oneof) {\n      oneofFields.push(field.name)\n    }\n  }\n\n  function decodeField (e, field, obj, buf, dataView, offset, i) {\n    const name = field.name\n\n    if (field.oneof) {\n      // clear already defined oneof fields\n      const props = Object.keys(obj)\n      for (var j = 0; j < props.length; j++) {\n        if (oneofFields.indexOf(props[j]) > -1) {\n          const sentenceCase = toSentenceCase(props[j])\n          delete obj[`has${sentenceCase}`]\n          delete obj[`get${sentenceCase}`]\n          delete obj[`set${sentenceCase}`]\n          delete obj[`clear${sentenceCase}`]\n          delete obj[props[j]]\n        }\n      }\n    }\n\n    let value\n\n    if (e.message) {\n      const len = varint.decode(buf, offset)\n      offset += varint.decode.bytes\n\n      const decoded = e.decode(buf, dataView, offset, offset + len)\n\n      if (field.map) {\n        value = obj[name] || {}\n        value[decoded.key] = decoded.value\n      } else if (field.repeated) {\n        value = obj[name] || []\n        value.push(decoded)\n      } else {\n        value = decoded\n      }\n    } else {\n      if (field.repeated) {\n        value = obj[name] || []\n        value.push(e.decode(buf, dataView, offset))\n      } else {\n        value = e.decode(buf, dataView, offset)\n      }\n    }\n\n    addPropertyAccessors(obj, name, value)\n\n    offset += e.decode.bytes\n\n    return offset\n  }\n\n  return function decode (buf, view, offset, end) {\n    if (offset == null) {\n      offset = 0\n    }\n\n    if (end == null) {\n      end = buf.length\n    }\n\n    if (!(end <= buf.length && offset <= buf.length)) {\n      throw new Error('Decoded message is not valid')\n    }\n\n    if (!view) {\n      view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength)\n    }\n\n    var oldOffset = offset\n    var obj = {}\n    var field\n\n    while (true) {\n      if (end <= offset) {\n        // finished\n\n        // check required methods\n        var name = ''\n        var j = 0\n        for (j = 0; j < requiredFields.length; j++) {\n          name = requiredFields[j]\n          if (!defined(obj[name])) {\n            throw new Error('Decoded message is not valid, missing required field: ' + name)\n          }\n        }\n\n        // fill out missing defaults\n        var val\n        var def\n        for (j = 0; j < enc.length; j++) {\n          field = m.fields[j]\n          def = vals[j][0]\n          val = vals[j][1]\n          name = field.name\n          let defaultVal\n\n          if (Object.prototype.hasOwnProperty.call(obj, name)) {\n            continue\n          }\n\n          var done = false\n\n          if (field.oneof) {\n            var props = Object.keys(obj)\n\n            for (var k = 0; k < props.length; k++) {\n              if (oneofFields.indexOf(props[k]) > -1) {\n                done = true\n                break\n              }\n            }\n          }\n\n          if (done) {\n            continue\n          }\n\n          if (val) { // is enum\n            if (field.repeated) {\n              def = []\n            } else {\n              def = (def && val[def]) ? val[def].value : val[Object.keys(val)[0]].value\n              def = parseInt(def || 0, 10)\n            }\n          } else {\n            defaultVal = defaultValue(field)\n            def = coerceValue(field, def)\n          }\n\n          addPropertyAccessors(obj, name, def, defaultVal)\n        }\n\n        decode.bytes = offset - oldOffset\n        return obj\n      }\n\n      var prefix = varint.decode(buf, offset)\n      offset += varint.decode.bytes\n      var tag = prefix >> 3\n\n      var i = fields[tag]\n\n      if (i == null) {\n        offset = skip(prefix & 7, buf, view, offset)\n        continue\n      }\n\n      var e = enc[i]\n      field = m.fields[i]\n\n      if (field.packed) {\n        var packedEnd = varint.decode(buf, offset)\n        offset += varint.decode.bytes\n        packedEnd += offset\n\n        while (offset < packedEnd) {\n          offset = decodeField(e, field, obj, buf, view, offset, i)\n        }\n      } else {\n        offset = decodeField(e, field, obj, buf, view, offset, i)\n      }\n    }\n  }\n}\n\nvar skip = function (type, buffer, view, offset) {\n  switch (type) {\n    case 0:\n      varint.decode(buffer, offset)\n      return offset + varint.decode.bytes\n\n    case 1:\n      return offset + 8\n\n    case 2:\n      var len = varint.decode(buffer, offset)\n      return offset + varint.decode.bytes + len\n\n    case 3:\n    case 4:\n      throw new Error('Groups are not supported')\n\n    case 5:\n      return offset + 4\n    default:\n      throw new Error('Unknown wire type: ' + type)\n  }\n}\n\nvar defaultValue = function (f) {\n  if (f.map) return {}\n  if (f.repeated) return []\n\n  switch (f.type) {\n    case 'string':\n      return ''\n    case 'bool':\n      return false\n    case 'float':\n    case 'double':\n    case 'sfixed32':\n    case 'fixed32':\n    case 'varint':\n    case 'enum':\n    case 'uint64':\n    case 'uint32':\n    case 'int64':\n    case 'int32':\n    case 'sint64':\n    case 'sint32':\n      return 0\n    default:\n      return null\n  }\n}\n\nvar coerceValue = function (f, def) {\n  if (def === undefined) {\n    return def\n  }\n\n  switch (f.type) {\n    case 'bool':\n      return def === 'true'\n    case 'float':\n    case 'double':\n    case 'sfixed32':\n    case 'fixed32':\n    case 'varint':\n    case 'enum':\n    case 'uint64':\n    case 'uint32':\n    case 'int64':\n    case 'int32':\n    case 'sint64':\n    case 'sint32':\n      return parseInt(def, 10)\n    default:\n      return def\n  }\n}\n\nmodule.exports = compileDecode\n"]},"metadata":{},"sourceType":"script"}