{"ast":null,"code":"'use strict';\n\nvar _createForOfIteratorHelper = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _regeneratorRuntime = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _objectSpread = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _objectWithoutProperties = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectWithoutProperties\");\n\nvar _asyncToGenerator = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _awaitAsyncGenerator = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _asyncIterator = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nconst CID = require('cids');\n\nconst Client = require('../../lib/core');\n\nconst Service = require('./service');\n\nconst toUrlSearchParams = require('../../lib/to-url-search-params');\n/**\n * @typedef {import('../..').HttpOptions} HttpOptions\n * @typedef {import('../../lib/core').ClientOptions} ClientOptions\n * @typedef {import('ipfs-core-types/src/basic').AbortOptions} AbortOptions\n * @typedef {import('ipfs-core-types/src/pin/remote').API} API\n * @typedef {import('ipfs-core-types/src/pin/remote').Pin} Pin\n * @typedef {import('ipfs-core-types/src/pin/remote').AddOptions} AddOptions\n * @typedef {import('ipfs-core-types/src/pin/remote').Query} Query\n * @typedef {import('ipfs-core-types/src/pin/remote').Status} Status\n *\n * @implements {API}\n */\n\n\nclass Remote {\n  /**\n   * @param {ClientOptions} options\n   */\n  constructor(options) {\n    /** @private */\n    this.client = new Client(options);\n    /** @readonly */\n\n    this.service = new Service(options);\n  }\n  /**\n   * Stores an IPFS object(s) from a given path to a remote pinning service.\n   *\n   * @param {CID} cid\n   * @param {AddOptions & AbortOptions & HttpOptions} options\n   * @returns {Promise<Pin>}\n   */\n\n\n  add(cid, options) {\n    return Remote.add(this.client, cid, options);\n  }\n  /**\n   * @param {Client} client\n   * @param {CID} cid\n   * @param {AddOptions & AbortOptions & HttpOptions} options\n   */\n\n\n  static add(client, cid, _ref) {\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var timeout, signal, headers, options, response;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            timeout = _ref.timeout, signal = _ref.signal, headers = _ref.headers, options = _objectWithoutProperties(_ref, [\"timeout\", \"signal\", \"headers\"]);\n            _context.next = 3;\n            return client.post('pin/remote/add', {\n              timeout,\n              signal,\n              headers,\n              searchParams: encodeAddParams(_objectSpread({\n                cid\n              }, options))\n            });\n\n          case 3:\n            response = _context.sent;\n            _context.t0 = Remote;\n            _context.next = 7;\n            return response.json();\n\n          case 7:\n            _context.t1 = _context.sent;\n            return _context.abrupt(\"return\", _context.t0.decodePin.call(_context.t0, _context.t1));\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }))();\n  }\n  /**\n   * @param {Object} json\n   * @param {string} json.Name\n   * @param {string} json.Cid\n   * @param {Status} json.Status\n   * @returns {Pin}\n   */\n\n\n  static decodePin({\n    Name: name,\n    Status: status,\n    Cid: cid\n  }) {\n    return {\n      cid: new CID(cid),\n      name,\n      status\n    };\n  }\n  /**\n   * Returns a list of matching pins on the remote pinning service.\n   *\n   * @param {Query & AbortOptions & HttpOptions} query\n   */\n\n\n  ls(query) {\n    return Remote.ls(this.client, query);\n  }\n  /**\n   *\n   * @param {Client} client\n   * @param {Query & AbortOptions & HttpOptions} options\n   * @returns {AsyncIterable<Pin>}\n   */\n\n\n  static ls(client, _ref2) {\n    let timeout = _ref2.timeout,\n        signal = _ref2.signal,\n        headers = _ref2.headers,\n        query = _objectWithoutProperties(_ref2, [\"timeout\", \"signal\", \"headers\"]);\n\n    return _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var response, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, pin;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _awaitAsyncGenerator(client.post('pin/remote/ls', {\n              signal,\n              timeout,\n              headers,\n              searchParams: encodeQuery(query)\n            }));\n\n          case 2:\n            response = _context2.sent;\n            _iteratorNormalCompletion = true;\n            _didIteratorError = false;\n            _context2.prev = 5;\n            _iterator = _asyncIterator(response.ndjson());\n\n          case 7:\n            _context2.next = 9;\n            return _awaitAsyncGenerator(_iterator.next());\n\n          case 9:\n            _step = _context2.sent;\n            _iteratorNormalCompletion = _step.done;\n            _context2.next = 13;\n            return _awaitAsyncGenerator(_step.value);\n\n          case 13:\n            _value = _context2.sent;\n\n            if (_iteratorNormalCompletion) {\n              _context2.next = 21;\n              break;\n            }\n\n            pin = _value;\n            _context2.next = 18;\n            return Remote.decodePin(pin);\n\n          case 18:\n            _iteratorNormalCompletion = true;\n            _context2.next = 7;\n            break;\n\n          case 21:\n            _context2.next = 27;\n            break;\n\n          case 23:\n            _context2.prev = 23;\n            _context2.t0 = _context2[\"catch\"](5);\n            _didIteratorError = true;\n            _iteratorError = _context2.t0;\n\n          case 27:\n            _context2.prev = 27;\n            _context2.prev = 28;\n\n            if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n              _context2.next = 32;\n              break;\n            }\n\n            _context2.next = 32;\n            return _awaitAsyncGenerator(_iterator.return());\n\n          case 32:\n            _context2.prev = 32;\n\n            if (!_didIteratorError) {\n              _context2.next = 35;\n              break;\n            }\n\n            throw _iteratorError;\n\n          case 35:\n            return _context2.finish(32);\n\n          case 36:\n            return _context2.finish(27);\n\n          case 37:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2, null, [[5, 23, 27, 37], [28,, 32, 36]]);\n    }))();\n  }\n  /**\n   * Removes a single pin object matching query allowing it to be garbage\n   * collected (if needed). Will error if multiple pins mtach provided\n   * query. To remove all matches use `rmAll` instead.\n   *\n   * @param {Query & AbortOptions & HttpOptions} query\n   */\n\n\n  rm(query) {\n    return Remote.rm(this.client, _objectSpread(_objectSpread({}, query), {}, {\n      all: false\n    }));\n  }\n  /**\n   * Removes all pin object that match given query allowing them to be garbage\n   * collected if needed.\n   *\n   * @param {Query & AbortOptions & HttpOptions} query\n   */\n\n\n  rmAll(query) {\n    return Remote.rm(this.client, _objectSpread(_objectSpread({}, query), {}, {\n      all: true\n    }));\n  }\n  /**\n   *\n   * @param {Client} client\n   * @param {{all: boolean} & Query & AbortOptions & HttpOptions} options\n   */\n\n\n  static rm(client, _ref3) {\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      var timeout, signal, headers, query;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) switch (_context3.prev = _context3.next) {\n          case 0:\n            timeout = _ref3.timeout, signal = _ref3.signal, headers = _ref3.headers, query = _objectWithoutProperties(_ref3, [\"timeout\", \"signal\", \"headers\"]);\n            _context3.next = 3;\n            return client.post('pin/remote/rm', {\n              timeout,\n              signal,\n              headers,\n              searchParams: encodeQuery(query)\n            });\n\n          case 3:\n          case \"end\":\n            return _context3.stop();\n        }\n      }, _callee3);\n    }))();\n  }\n\n}\n/**\n * @param {any} service\n * @returns {string}\n */\n\n\nconst encodeService = service => {\n  if (typeof service === 'string' && service !== '') {\n    return service;\n  } else {\n    throw new TypeError('service name must be passed');\n  }\n};\n/**\n * @param {any} cid\n * @returns {string}\n */\n\n\nconst encodeCID = cid => {\n  if (CID.isCID(cid)) {\n    return cid.toString();\n  } else {\n    throw new TypeError(\"CID instance expected instead of \".concat(cid));\n  }\n};\n/**\n * @param {Query & { all?: boolean }} query\n * @returns {URLSearchParams}\n */\n\n\nconst encodeQuery = ({\n  service,\n  cid,\n  name,\n  status,\n  all\n}) => {\n  const query = toUrlSearchParams({\n    service: encodeService(service),\n    name,\n    force: all ? true : undefined\n  });\n\n  if (cid) {\n    var _iterator2 = _createForOfIteratorHelper(cid),\n        _step2;\n\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        const value = _step2.value;\n        query.append('cid', encodeCID(value));\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n  }\n\n  if (status) {\n    var _iterator3 = _createForOfIteratorHelper(status),\n        _step3;\n\n    try {\n      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n        const value = _step3.value;\n        query.append('status', value);\n      }\n    } catch (err) {\n      _iterator3.e(err);\n    } finally {\n      _iterator3.f();\n    }\n  }\n\n  return query;\n};\n/**\n * @param {AddOptions & {cid:CID}} options\n * @returns {URLSearchParams}\n */\n\n\nconst encodeAddParams = ({\n  cid,\n  service,\n  background,\n  name,\n  origins\n}) => {\n  const params = toUrlSearchParams({\n    arg: encodeCID(cid),\n    service: encodeService(service),\n    name,\n    background: background ? true : undefined\n  });\n\n  if (origins) {\n    var _iterator4 = _createForOfIteratorHelper(origins),\n        _step4;\n\n    try {\n      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n        const origin = _step4.value;\n        params.append('origin', origin.toString());\n      }\n    } catch (err) {\n      _iterator4.e(err);\n    } finally {\n      _iterator4.f();\n    }\n  }\n\n  return params;\n};\n\nmodule.exports = Remote;","map":{"version":3,"sources":["C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/ipfs-http-client/src/pin/remote/index.js"],"names":["CID","require","Client","Service","toUrlSearchParams","Remote","constructor","options","client","service","add","cid","timeout","signal","headers","post","searchParams","encodeAddParams","response","json","decodePin","Name","name","Status","status","Cid","ls","query","encodeQuery","ndjson","pin","rm","all","rmAll","encodeService","TypeError","encodeCID","isCID","toString","force","undefined","value","append","background","origins","params","arg","origin","module","exports"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,MAAD,CAAnB;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,gBAAD,CAAtB;;AACA,MAAME,OAAO,GAAGF,OAAO,CAAC,WAAD,CAAvB;;AACA,MAAMG,iBAAiB,GAAGH,OAAO,CAAC,gCAAD,CAAjC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMI,MAAN,CAAa;AACX;AACF;AACA;AACEC,EAAAA,WAAW,CAAEC,OAAF,EAAW;AACpB;AACA,SAAKC,MAAL,GAAc,IAAIN,MAAJ,CAAWK,OAAX,CAAd;AACA;;AACA,SAAKE,OAAL,GAAe,IAAIN,OAAJ,CAAYI,OAAZ,CAAf;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AACEG,EAAAA,GAAG,CAAEC,GAAF,EAAOJ,OAAP,EAAgB;AACjB,WAAOF,MAAM,CAACK,GAAP,CAAW,KAAKF,MAAhB,EAAwBG,GAAxB,EAA6BJ,OAA7B,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;;;AACkB,SAAHG,GAAG,CAAEF,MAAF,EAAUG,GAAV,QAAyD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAxCC,YAAAA,OAAwC,QAAxCA,OAAwC,EAA/BC,MAA+B,QAA/BA,MAA+B,EAAvBC,OAAuB,QAAvBA,OAAuB,EAAXP,OAAW;AAAA;AAAA,mBAChDC,MAAM,CAACO,IAAP,CAAY,gBAAZ,EAA8B;AACnDH,cAAAA,OADmD;AAEnDC,cAAAA,MAFmD;AAGnDC,cAAAA,OAHmD;AAInDE,cAAAA,YAAY,EAAEC,eAAe;AAAGN,gBAAAA;AAAH,iBAAWJ,OAAX;AAJsB,aAA9B,CADgD;;AAAA;AACjEW,YAAAA,QADiE;AAAA,0BAQhEb,MARgE;AAAA;AAAA,mBAQzCa,QAAQ,CAACC,IAAT,EARyC;;AAAA;AAAA;AAAA,yDAQzDC,SARyD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASxE;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AACkB,SAATA,SAAS,CAAE;AAAEC,IAAAA,IAAI,EAAEC,IAAR;AAAcC,IAAAA,MAAM,EAAEC,MAAtB;AAA8BC,IAAAA,GAAG,EAAEd;AAAnC,GAAF,EAA4C;AAC1D,WAAO;AACLA,MAAAA,GAAG,EAAE,IAAIX,GAAJ,CAAQW,GAAR,CADA;AAELW,MAAAA,IAFK;AAGLE,MAAAA;AAHK,KAAP;AAKD;AAED;AACF;AACA;AACA;AACA;;;AACEE,EAAAA,EAAE,CAAEC,KAAF,EAAS;AACT,WAAOtB,MAAM,CAACqB,EAAP,CAAU,KAAKlB,MAAf,EAAuBmB,KAAvB,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACmB,SAAFD,EAAE,CAAElB,MAAF,SAAkD;AAAA,QAAtCI,OAAsC,SAAtCA,OAAsC;AAAA,QAA7BC,MAA6B,SAA7BA,MAA6B;AAAA,QAArBC,OAAqB,SAArBA,OAAqB;AAAA,QAATa,KAAS;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,wCAC1CnB,MAAM,CAACO,IAAP,CAAY,eAAZ,EAA6B;AAClDF,cAAAA,MADkD;AAElDD,cAAAA,OAFkD;AAGlDE,cAAAA,OAHkD;AAIlDE,cAAAA,YAAY,EAAEY,WAAW,CAACD,KAAD;AAJyB,aAA7B,CAD0C;;AAAA;AAC3DT,YAAAA,QAD2D;AAAA;AAAA;AAAA;AAAA,uCAQzCA,QAAQ,CAACW,MAAT,EARyC;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAQhDC,YAAAA,GARgD;AAAA;AAS/D,mBAAMzB,MAAM,CAACe,SAAP,CAAiBU,GAAjB,CAAN;;AAT+D;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWlE;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AACEC,EAAAA,EAAE,CAAEJ,KAAF,EAAS;AACT,WAAOtB,MAAM,CAAC0B,EAAP,CAAU,KAAKvB,MAAf,kCAA4BmB,KAA5B;AAAmCK,MAAAA,GAAG,EAAE;AAAxC,OAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACEC,EAAAA,KAAK,CAAEN,KAAF,EAAS;AACZ,WAAOtB,MAAM,CAAC0B,EAAP,CAAU,KAAKvB,MAAf,kCAA4BmB,KAA5B;AAAmCK,MAAAA,GAAG,EAAE;AAAxC,OAAP;AACD;AAED;AACF;AACA;AACA;AACA;;;AACiB,SAAFD,EAAE,CAAEvB,MAAF,SAAkD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAtCI,YAAAA,OAAsC,SAAtCA,OAAsC,EAA7BC,MAA6B,SAA7BA,MAA6B,EAArBC,OAAqB,SAArBA,OAAqB,EAATa,KAAS;AAAA;AAAA,mBACzDnB,MAAM,CAACO,IAAP,CAAY,eAAZ,EAA6B;AACjCH,cAAAA,OADiC;AAEjCC,cAAAA,MAFiC;AAGjCC,cAAAA,OAHiC;AAIjCE,cAAAA,YAAY,EAAEY,WAAW,CAACD,KAAD;AAJQ,aAA7B,CADyD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOhE;;AAlHU;AAqHb;AACA;AACA;AACA;;;AACA,MAAMO,aAAa,GAAIzB,OAAD,IAAa;AACjC,MAAI,OAAOA,OAAP,KAAmB,QAAnB,IAA+BA,OAAO,KAAK,EAA/C,EAAmD;AACjD,WAAOA,OAAP;AACD,GAFD,MAEO;AACL,UAAM,IAAI0B,SAAJ,CAAc,6BAAd,CAAN;AACD;AACF,CAND;AAQA;AACA;AACA;AACA;;;AACA,MAAMC,SAAS,GAAIzB,GAAD,IAAS;AACzB,MAAIX,GAAG,CAACqC,KAAJ,CAAU1B,GAAV,CAAJ,EAAoB;AAClB,WAAOA,GAAG,CAAC2B,QAAJ,EAAP;AACD,GAFD,MAEO;AACL,UAAM,IAAIH,SAAJ,4CAAkDxB,GAAlD,EAAN;AACD;AACF,CAND;AAQA;AACA;AACA;AACA;;;AACA,MAAMiB,WAAW,GAAG,CAAC;AAAEnB,EAAAA,OAAF;AAAWE,EAAAA,GAAX;AAAgBW,EAAAA,IAAhB;AAAsBE,EAAAA,MAAtB;AAA8BQ,EAAAA;AAA9B,CAAD,KAAyC;AAC3D,QAAML,KAAK,GAAGvB,iBAAiB,CAAC;AAC9BK,IAAAA,OAAO,EAAEyB,aAAa,CAACzB,OAAD,CADQ;AAE9Ba,IAAAA,IAF8B;AAG9BiB,IAAAA,KAAK,EAAEP,GAAG,GAAG,IAAH,GAAUQ;AAHU,GAAD,CAA/B;;AAMA,MAAI7B,GAAJ,EAAS;AAAA,gDACaA,GADb;AAAA;;AAAA;AACP,6DAAyB;AAAA,cAAd8B,KAAc;AACvBd,QAAAA,KAAK,CAACe,MAAN,CAAa,KAAb,EAAoBN,SAAS,CAACK,KAAD,CAA7B;AACD;AAHM;AAAA;AAAA;AAAA;AAAA;AAIR;;AAED,MAAIjB,MAAJ,EAAY;AAAA,gDACUA,MADV;AAAA;;AAAA;AACV,6DAA4B;AAAA,cAAjBiB,KAAiB;AAC1Bd,QAAAA,KAAK,CAACe,MAAN,CAAa,QAAb,EAAuBD,KAAvB;AACD;AAHS;AAAA;AAAA;AAAA;AAAA;AAIX;;AAED,SAAOd,KAAP;AACD,CApBD;AAsBA;AACA;AACA;AACA;;;AACA,MAAMV,eAAe,GAAG,CAAC;AAAEN,EAAAA,GAAF;AAAOF,EAAAA,OAAP;AAAgBkC,EAAAA,UAAhB;AAA4BrB,EAAAA,IAA5B;AAAkCsB,EAAAA;AAAlC,CAAD,KAAiD;AACvE,QAAMC,MAAM,GAAGzC,iBAAiB,CAAC;AAC/B0C,IAAAA,GAAG,EAAEV,SAAS,CAACzB,GAAD,CADiB;AAE/BF,IAAAA,OAAO,EAAEyB,aAAa,CAACzB,OAAD,CAFS;AAG/Ba,IAAAA,IAH+B;AAI/BqB,IAAAA,UAAU,EAAEA,UAAU,GAAG,IAAH,GAAUH;AAJD,GAAD,CAAhC;;AAOA,MAAII,OAAJ,EAAa;AAAA,gDACUA,OADV;AAAA;;AAAA;AACX,6DAA8B;AAAA,cAAnBG,MAAmB;AAC5BF,QAAAA,MAAM,CAACH,MAAP,CAAc,QAAd,EAAwBK,MAAM,CAACT,QAAP,EAAxB;AACD;AAHU;AAAA;AAAA;AAAA;AAAA;AAIZ;;AAED,SAAOO,MAAP;AACD,CAfD;;AAiBAG,MAAM,CAACC,OAAP,GAAiB5C,MAAjB","sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst Client = require('../../lib/core')\nconst Service = require('./service')\nconst toUrlSearchParams = require('../../lib/to-url-search-params')\n\n/**\n * @typedef {import('../..').HttpOptions} HttpOptions\n * @typedef {import('../../lib/core').ClientOptions} ClientOptions\n * @typedef {import('ipfs-core-types/src/basic').AbortOptions} AbortOptions\n * @typedef {import('ipfs-core-types/src/pin/remote').API} API\n * @typedef {import('ipfs-core-types/src/pin/remote').Pin} Pin\n * @typedef {import('ipfs-core-types/src/pin/remote').AddOptions} AddOptions\n * @typedef {import('ipfs-core-types/src/pin/remote').Query} Query\n * @typedef {import('ipfs-core-types/src/pin/remote').Status} Status\n *\n * @implements {API}\n */\nclass Remote {\n  /**\n   * @param {ClientOptions} options\n   */\n  constructor (options) {\n    /** @private */\n    this.client = new Client(options)\n    /** @readonly */\n    this.service = new Service(options)\n  }\n\n  /**\n   * Stores an IPFS object(s) from a given path to a remote pinning service.\n   *\n   * @param {CID} cid\n   * @param {AddOptions & AbortOptions & HttpOptions} options\n   * @returns {Promise<Pin>}\n   */\n  add (cid, options) {\n    return Remote.add(this.client, cid, options)\n  }\n\n  /**\n   * @param {Client} client\n   * @param {CID} cid\n   * @param {AddOptions & AbortOptions & HttpOptions} options\n   */\n  static async add (client, cid, { timeout, signal, headers, ...options }) {\n    const response = await client.post('pin/remote/add', {\n      timeout,\n      signal,\n      headers,\n      searchParams: encodeAddParams({ cid, ...options })\n    })\n\n    return Remote.decodePin(await response.json())\n  }\n\n  /**\n   * @param {Object} json\n   * @param {string} json.Name\n   * @param {string} json.Cid\n   * @param {Status} json.Status\n   * @returns {Pin}\n   */\n  static decodePin ({ Name: name, Status: status, Cid: cid }) {\n    return {\n      cid: new CID(cid),\n      name,\n      status\n    }\n  }\n\n  /**\n   * Returns a list of matching pins on the remote pinning service.\n   *\n   * @param {Query & AbortOptions & HttpOptions} query\n   */\n  ls (query) {\n    return Remote.ls(this.client, query)\n  }\n\n  /**\n   *\n   * @param {Client} client\n   * @param {Query & AbortOptions & HttpOptions} options\n   * @returns {AsyncIterable<Pin>}\n   */\n  static async * ls (client, { timeout, signal, headers, ...query }) {\n    const response = await client.post('pin/remote/ls', {\n      signal,\n      timeout,\n      headers,\n      searchParams: encodeQuery(query)\n    })\n\n    for await (const pin of response.ndjson()) {\n      yield Remote.decodePin(pin)\n    }\n  }\n\n  /**\n   * Removes a single pin object matching query allowing it to be garbage\n   * collected (if needed). Will error if multiple pins mtach provided\n   * query. To remove all matches use `rmAll` instead.\n   *\n   * @param {Query & AbortOptions & HttpOptions} query\n   */\n  rm (query) {\n    return Remote.rm(this.client, { ...query, all: false })\n  }\n\n  /**\n   * Removes all pin object that match given query allowing them to be garbage\n   * collected if needed.\n   *\n   * @param {Query & AbortOptions & HttpOptions} query\n   */\n  rmAll (query) {\n    return Remote.rm(this.client, { ...query, all: true })\n  }\n\n  /**\n   *\n   * @param {Client} client\n   * @param {{all: boolean} & Query & AbortOptions & HttpOptions} options\n   */\n  static async rm (client, { timeout, signal, headers, ...query }) {\n    await client.post('pin/remote/rm', {\n      timeout,\n      signal,\n      headers,\n      searchParams: encodeQuery(query)\n    })\n  }\n}\n\n/**\n * @param {any} service\n * @returns {string}\n */\nconst encodeService = (service) => {\n  if (typeof service === 'string' && service !== '') {\n    return service\n  } else {\n    throw new TypeError('service name must be passed')\n  }\n}\n\n/**\n * @param {any} cid\n * @returns {string}\n */\nconst encodeCID = (cid) => {\n  if (CID.isCID(cid)) {\n    return cid.toString()\n  } else {\n    throw new TypeError(`CID instance expected instead of ${cid}`)\n  }\n}\n\n/**\n * @param {Query & { all?: boolean }} query\n * @returns {URLSearchParams}\n */\nconst encodeQuery = ({ service, cid, name, status, all }) => {\n  const query = toUrlSearchParams({\n    service: encodeService(service),\n    name,\n    force: all ? true : undefined\n  })\n\n  if (cid) {\n    for (const value of cid) {\n      query.append('cid', encodeCID(value))\n    }\n  }\n\n  if (status) {\n    for (const value of status) {\n      query.append('status', value)\n    }\n  }\n\n  return query\n}\n\n/**\n * @param {AddOptions & {cid:CID}} options\n * @returns {URLSearchParams}\n */\nconst encodeAddParams = ({ cid, service, background, name, origins }) => {\n  const params = toUrlSearchParams({\n    arg: encodeCID(cid),\n    service: encodeService(service),\n    name,\n    background: background ? true : undefined\n  })\n\n  if (origins) {\n    for (const origin of origins) {\n      params.append('origin', origin.toString())\n    }\n  }\n\n  return params\n}\n\nmodule.exports = Remote\n"]},"metadata":{},"sourceType":"script"}