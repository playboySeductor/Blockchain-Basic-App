{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _objectSpread = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _awaitAsyncGenerator = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _asyncIterator = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nconst CID = require('cids');\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\nmodule.exports = configure(api => {\n  /**\n   * @type {import('..').Implements<typeof import('ipfs-core/src/components/block/rm')>}\n   */\n  function rm(_x) {\n    return _rm.apply(this, arguments);\n  }\n\n  function _rm() {\n    _rm = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(cid, options = {}) {\n      var res, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, removed;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            if (!Array.isArray(cid)) {\n              cid = [cid];\n            }\n\n            _context.next = 3;\n            return _awaitAsyncGenerator(api.post('block/rm', {\n              timeout: options.timeout,\n              signal: options.signal,\n              searchParams: toUrlSearchParams(_objectSpread({\n                arg: cid.map(cid => new CID(cid).toString()),\n                'stream-channels': true\n              }, options)),\n              headers: options.headers\n            }));\n\n          case 3:\n            res = _context.sent;\n            _iteratorNormalCompletion = true;\n            _didIteratorError = false;\n            _context.prev = 6;\n            _iterator = _asyncIterator(res.ndjson());\n\n          case 8:\n            _context.next = 10;\n            return _awaitAsyncGenerator(_iterator.next());\n\n          case 10:\n            _step = _context.sent;\n            _iteratorNormalCompletion = _step.done;\n            _context.next = 14;\n            return _awaitAsyncGenerator(_step.value);\n\n          case 14:\n            _value = _context.sent;\n\n            if (_iteratorNormalCompletion) {\n              _context.next = 22;\n              break;\n            }\n\n            removed = _value;\n            _context.next = 19;\n            return toCoreInterface(removed);\n\n          case 19:\n            _iteratorNormalCompletion = true;\n            _context.next = 8;\n            break;\n\n          case 22:\n            _context.next = 28;\n            break;\n\n          case 24:\n            _context.prev = 24;\n            _context.t0 = _context[\"catch\"](6);\n            _didIteratorError = true;\n            _iteratorError = _context.t0;\n\n          case 28:\n            _context.prev = 28;\n            _context.prev = 29;\n\n            if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n              _context.next = 33;\n              break;\n            }\n\n            _context.next = 33;\n            return _awaitAsyncGenerator(_iterator.return());\n\n          case 33:\n            _context.prev = 33;\n\n            if (!_didIteratorError) {\n              _context.next = 36;\n              break;\n            }\n\n            throw _iteratorError;\n\n          case 36:\n            return _context.finish(33);\n\n          case 37:\n            return _context.finish(28);\n\n          case 38:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee, null, [[6, 24, 28, 38], [29,, 33, 37]]);\n    }));\n    return _rm.apply(this, arguments);\n  }\n\n  return rm;\n});\n\nfunction toCoreInterface(removed) {\n  const out = {\n    cid: new CID(removed.Hash)\n  };\n\n  if (removed.Error) {\n    out.error = new Error(removed.Error);\n  }\n\n  return out;\n}","map":{"version":3,"sources":["C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/ipfs-http-client/src/block/rm.js"],"names":["CID","require","configure","toUrlSearchParams","module","exports","api","rm","cid","options","Array","isArray","post","timeout","signal","searchParams","arg","map","toString","headers","res","ndjson","removed","toCoreInterface","out","Hash","Error","error"],"mappings":"AAAA;;;;;;;;;;;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,MAAD,CAAnB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAME,iBAAiB,GAAGF,OAAO,CAAC,6BAAD,CAAjC;;AAEAG,MAAM,CAACC,OAAP,GAAiBH,SAAS,CAACI,GAAG,IAAI;AAChC;AACF;AACA;AAHkC,WAIfC,EAJe;AAAA;AAAA;;AAAA;AAAA,qEAIhC,iBAAqBC,GAArB,EAA0BC,OAAO,GAAG,EAApC;AAAA;;AAAA;AAAA;AAAA;AACE,gBAAI,CAACC,KAAK,CAACC,OAAN,CAAcH,GAAd,CAAL,EAAyB;AACvBA,cAAAA,GAAG,GAAG,CAACA,GAAD,CAAN;AACD;;AAHH;AAAA,wCAKoBF,GAAG,CAACM,IAAJ,CAAS,UAAT,EAAqB;AACrCC,cAAAA,OAAO,EAAEJ,OAAO,CAACI,OADoB;AAErCC,cAAAA,MAAM,EAAEL,OAAO,CAACK,MAFqB;AAGrCC,cAAAA,YAAY,EAAEZ,iBAAiB;AAC7Ba,gBAAAA,GAAG,EAAER,GAAG,CAACS,GAAJ,CAAQT,GAAG,IAAI,IAAIR,GAAJ,CAAQQ,GAAR,EAAaU,QAAb,EAAf,CADwB;AAE7B,mCAAmB;AAFU,iBAG1BT,OAH0B,EAHM;AAQrCU,cAAAA,OAAO,EAAEV,OAAO,CAACU;AARoB,aAArB,CALpB;;AAAA;AAKQC,YAAAA,GALR;AAAA;AAAA;AAAA;AAAA,uCAgB8BA,GAAG,CAACC,MAAJ,EAhB9B;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAgBmBC,YAAAA,OAhBnB;AAAA;AAiBI,mBAAMC,eAAe,CAACD,OAAD,CAArB;;AAjBJ;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAJgC;AAAA;AAAA;;AAyBhC,SAAOf,EAAP;AACD,CA1ByB,CAA1B;;AA4BA,SAASgB,eAAT,CAA0BD,OAA1B,EAAmC;AACjC,QAAME,GAAG,GAAG;AACVhB,IAAAA,GAAG,EAAE,IAAIR,GAAJ,CAAQsB,OAAO,CAACG,IAAhB;AADK,GAAZ;;AAIA,MAAIH,OAAO,CAACI,KAAZ,EAAmB;AACjBF,IAAAA,GAAG,CAACG,KAAJ,GAAY,IAAID,KAAJ,CAAUJ,OAAO,CAACI,KAAlB,CAAZ;AACD;;AAED,SAAOF,GAAP;AACD","sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\nmodule.exports = configure(api => {\n  /**\n   * @type {import('..').Implements<typeof import('ipfs-core/src/components/block/rm')>}\n   */\n  async function * rm (cid, options = {}) {\n    if (!Array.isArray(cid)) {\n      cid = [cid]\n    }\n\n    const res = await api.post('block/rm', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: cid.map(cid => new CID(cid).toString()),\n        'stream-channels': true,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    for await (const removed of res.ndjson()) {\n      yield toCoreInterface(removed)\n    }\n  }\n\n  return rm\n})\n\nfunction toCoreInterface (removed) {\n  const out = {\n    cid: new CID(removed.Hash)\n  }\n\n  if (removed.Error) {\n    out.error = new Error(removed.Error)\n  }\n\n  return out\n}\n"]},"metadata":{},"sourceType":"script"}