{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _objectSpread = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _asyncToGenerator = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _asyncIterator = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\nconst _require = require('./response-types'),\n      Value = _require.Value;\n\nconst uint8ArrayToString = require('uint8arrays/to-string');\n\nconst uint8ArrayFromString = require('uint8arrays/from-string');\n\nmodule.exports = configure(api => {\n  /**\n   * @type {import('..').ImplementsMethod<'get', import('ipfs-core/src/components/dht')>}\n   */\n  function get(_x) {\n    return _get.apply(this, arguments);\n  }\n\n  function _get() {\n    _get = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(key, options = {}) {\n      var res, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, message;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return api.post('dht/get', {\n              timeout: options.timeout,\n              signal: options.signal,\n              searchParams: toUrlSearchParams(_objectSpread({\n                arg: key instanceof Uint8Array ? uint8ArrayToString(key) : key\n              }, options)),\n              headers: options.headers\n            });\n\n          case 2:\n            res = _context.sent;\n            _iteratorNormalCompletion = true;\n            _didIteratorError = false;\n            _context.prev = 5;\n            _iterator = _asyncIterator(res.ndjson());\n\n          case 7:\n            _context.next = 9;\n            return _iterator.next();\n\n          case 9:\n            _step = _context.sent;\n            _iteratorNormalCompletion = _step.done;\n            _context.next = 13;\n            return _step.value;\n\n          case 13:\n            _value = _context.sent;\n\n            if (_iteratorNormalCompletion) {\n              _context.next = 21;\n              break;\n            }\n\n            message = _value;\n\n            if (!(message.Type === Value)) {\n              _context.next = 18;\n              break;\n            }\n\n            return _context.abrupt(\"return\", uint8ArrayFromString(message.Extra, 'base64pad'));\n\n          case 18:\n            _iteratorNormalCompletion = true;\n            _context.next = 7;\n            break;\n\n          case 21:\n            _context.next = 27;\n            break;\n\n          case 23:\n            _context.prev = 23;\n            _context.t0 = _context[\"catch\"](5);\n            _didIteratorError = true;\n            _iteratorError = _context.t0;\n\n          case 27:\n            _context.prev = 27;\n            _context.prev = 28;\n\n            if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n              _context.next = 32;\n              break;\n            }\n\n            _context.next = 32;\n            return _iterator.return();\n\n          case 32:\n            _context.prev = 32;\n\n            if (!_didIteratorError) {\n              _context.next = 35;\n              break;\n            }\n\n            throw _iteratorError;\n\n          case 35:\n            return _context.finish(32);\n\n          case 36:\n            return _context.finish(27);\n\n          case 37:\n            throw new Error('not found');\n\n          case 38:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee, null, [[5, 23, 27, 37], [28,, 32, 36]]);\n    }));\n    return _get.apply(this, arguments);\n  }\n\n  return get;\n});","map":{"version":3,"sources":["C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/ipfs-http-client/src/dht/get.js"],"names":["configure","require","toUrlSearchParams","Value","uint8ArrayToString","uint8ArrayFromString","module","exports","api","get","key","options","post","timeout","signal","searchParams","arg","Uint8Array","headers","res","ndjson","message","Type","Extra","Error"],"mappings":"AAAA;;;;;;;;;;AAEA,MAAMA,SAAS,GAAGC,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAMC,iBAAiB,GAAGD,OAAO,CAAC,6BAAD,CAAjC;;iBACkBA,OAAO,CAAC,kBAAD,C;MAAjBE,K,YAAAA,K;;AACR,MAAMC,kBAAkB,GAAGH,OAAO,CAAC,uBAAD,CAAlC;;AACA,MAAMI,oBAAoB,GAAGJ,OAAO,CAAC,yBAAD,CAApC;;AAEAK,MAAM,CAACC,OAAP,GAAiBP,SAAS,CAACQ,GAAG,IAAI;AAChC;AACF;AACA;AAHkC,WAIjBC,GAJiB;AAAA;AAAA;;AAAA;AAAA,oEAIhC,iBAAoBC,GAApB,EAAyBC,OAAO,GAAG,EAAnC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,mBACoBH,GAAG,CAACI,IAAJ,CAAS,SAAT,EAAoB;AACpCC,cAAAA,OAAO,EAAEF,OAAO,CAACE,OADmB;AAEpCC,cAAAA,MAAM,EAAEH,OAAO,CAACG,MAFoB;AAGpCC,cAAAA,YAAY,EAAEb,iBAAiB;AAC7Bc,gBAAAA,GAAG,EAAEN,GAAG,YAAYO,UAAf,GAA4Bb,kBAAkB,CAACM,GAAD,CAA9C,GAAsDA;AAD9B,iBAE1BC,OAF0B,EAHK;AAOpCO,cAAAA,OAAO,EAAEP,OAAO,CAACO;AAPmB,aAApB,CADpB;;AAAA;AACQC,YAAAA,GADR;AAAA;AAAA;AAAA;AAAA,uCAW8BA,GAAG,CAACC,MAAJ,EAX9B;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAWmBC,YAAAA,OAXnB;;AAAA,kBAYQA,OAAO,CAACC,IAAR,KAAiBnB,KAZzB;AAAA;AAAA;AAAA;;AAAA,6CAaaE,oBAAoB,CAACgB,OAAO,CAACE,KAAT,EAAgB,WAAhB,CAbjC;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA,kBAiBQ,IAAIC,KAAJ,CAAU,WAAV,CAjBR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAJgC;AAAA;AAAA;;AAwBhC,SAAOf,GAAP;AACD,CAzByB,CAA1B","sourcesContent":["'use strict'\n\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\nconst { Value } = require('./response-types')\nconst uint8ArrayToString = require('uint8arrays/to-string')\nconst uint8ArrayFromString = require('uint8arrays/from-string')\n\nmodule.exports = configure(api => {\n  /**\n   * @type {import('..').ImplementsMethod<'get', import('ipfs-core/src/components/dht')>}\n   */\n  async function get (key, options = {}) {\n    const res = await api.post('dht/get', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: key instanceof Uint8Array ? uint8ArrayToString(key) : key,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    for await (const message of res.ndjson()) {\n      if (message.Type === Value) {\n        return uint8ArrayFromString(message.Extra, 'base64pad')\n      }\n    }\n\n    throw new Error('not found')\n  }\n\n  return get\n})\n"]},"metadata":{},"sourceType":"script"}