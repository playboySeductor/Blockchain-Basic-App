{"ast":null,"code":"'use strict';\n\nconst _require = require('multibase'),\n      getCodec = _require.encoding;\n\nconst _require2 = require('web-encoding'),\n      TextDecoder = _require2.TextDecoder;\n\nconst utf8Decoder = new TextDecoder('utf8');\n/**\n * @typedef {import('multibase/src/types').BaseName} BaseName\n */\n\n/**\n * Turns a Uint8Array of bytes into a string with each\n * character being the char code of the corresponding byte\n *\n * @param {Uint8Array} array - The array to turn into a string\n */\n\nfunction uint8ArrayToAsciiString(array) {\n  let string = '';\n\n  for (let i = 0; i < array.length; i++) {\n    string += String.fromCharCode(array[i]);\n  }\n\n  return string;\n}\n/**\n * Turns a `Uint8Array` into a string.\n *\n * Supports `utf8`, `utf-8` and any encoding supported by the multibase module.\n *\n * Also `ascii` which is similar to node's 'binary' encoding.\n *\n * @param {Uint8Array} array - The array to turn into a string\n * @param {BaseName | 'utf8' | 'utf-8' | 'ascii'} [encoding=utf8] - The encoding to use\n * @returns {string}\n */\n\n\nfunction toString(array, encoding = 'utf8') {\n  if (encoding === 'utf8' || encoding === 'utf-8') {\n    return utf8Decoder.decode(array);\n  }\n\n  if (encoding === 'ascii') {\n    return uint8ArrayToAsciiString(array);\n  }\n\n  return getCodec(encoding).encode(array);\n}\n\nmodule.exports = toString;","map":{"version":3,"sources":["C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/ipld-dag-cbor/node_modules/cids/node_modules/uint8arrays/to-string.js"],"names":["require","getCodec","encoding","TextDecoder","utf8Decoder","uint8ArrayToAsciiString","array","string","i","length","String","fromCharCode","toString","decode","encode","module","exports"],"mappings":"AAAA;;iBAE+BA,OAAO,CAAC,WAAD,C;MAApBC,Q,YAAVC,Q;;kBACgBF,OAAO,CAAC,cAAD,C;MAAvBG,W,aAAAA,W;;AACR,MAAMC,WAAW,GAAG,IAAID,WAAJ,CAAgB,MAAhB,CAApB;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASE,uBAAT,CAAkCC,KAAlC,EAAyC;AACvC,MAAIC,MAAM,GAAG,EAAb;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,KAAK,CAACG,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrCD,IAAAA,MAAM,IAAIG,MAAM,CAACC,YAAP,CAAoBL,KAAK,CAACE,CAAD,CAAzB,CAAV;AACD;;AACD,SAAOD,MAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASK,QAAT,CAAmBN,KAAnB,EAA0BJ,QAAQ,GAAG,MAArC,EAA6C;AAC3C,MAAIA,QAAQ,KAAK,MAAb,IAAuBA,QAAQ,KAAK,OAAxC,EAAiD;AAC/C,WAAOE,WAAW,CAACS,MAAZ,CAAmBP,KAAnB,CAAP;AACD;;AAED,MAAIJ,QAAQ,KAAK,OAAjB,EAA0B;AACxB,WAAOG,uBAAuB,CAACC,KAAD,CAA9B;AACD;;AAED,SAAOL,QAAQ,CAACC,QAAD,CAAR,CAAmBY,MAAnB,CAA0BR,KAA1B,CAAP;AACD;;AAEDS,MAAM,CAACC,OAAP,GAAiBJ,QAAjB","sourcesContent":["'use strict'\n\nconst { encoding: getCodec } = require('multibase')\nconst { TextDecoder } = require('web-encoding')\nconst utf8Decoder = new TextDecoder('utf8')\n\n/**\n * @typedef {import('multibase/src/types').BaseName} BaseName\n */\n\n/**\n * Turns a Uint8Array of bytes into a string with each\n * character being the char code of the corresponding byte\n *\n * @param {Uint8Array} array - The array to turn into a string\n */\nfunction uint8ArrayToAsciiString (array) {\n  let string = ''\n\n  for (let i = 0; i < array.length; i++) {\n    string += String.fromCharCode(array[i])\n  }\n  return string\n}\n\n/**\n * Turns a `Uint8Array` into a string.\n *\n * Supports `utf8`, `utf-8` and any encoding supported by the multibase module.\n *\n * Also `ascii` which is similar to node's 'binary' encoding.\n *\n * @param {Uint8Array} array - The array to turn into a string\n * @param {BaseName | 'utf8' | 'utf-8' | 'ascii'} [encoding=utf8] - The encoding to use\n * @returns {string}\n */\nfunction toString (array, encoding = 'utf8') {\n  if (encoding === 'utf8' || encoding === 'utf-8') {\n    return utf8Decoder.decode(array)\n  }\n\n  if (encoding === 'ascii') {\n    return uint8ArrayToAsciiString(array)\n  }\n\n  return getCodec(encoding).encode(array)\n}\n\nmodule.exports = toString\n"]},"metadata":{},"sourceType":"script"}