{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _objectSpread = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _awaitAsyncGenerator = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _asyncIterator = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nconst CID = require('cids');\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\nfunction toPin(type, cid, metadata) {\n  const pin = {\n    type,\n    cid: new CID(cid)\n  };\n\n  if (metadata) {\n    pin.metadata = metadata;\n  }\n\n  return pin;\n}\n\nmodule.exports = configure(api => {\n  return /*#__PURE__*/function () {\n    var _ls = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(options = {}) {\n      var res, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, pin, _i, _Object$keys, cid;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            if (options.paths) {\n              options.paths = Array.isArray(options.paths) ? options.paths : [options.paths];\n            }\n\n            _context.next = 3;\n            return _awaitAsyncGenerator(api.post('pin/ls', {\n              timeout: options.timeout,\n              signal: options.signal,\n              searchParams: toUrlSearchParams(_objectSpread(_objectSpread({}, options), {}, {\n                arg: (options.paths || []).map(path => \"\".concat(path)),\n                stream: true\n              })),\n              headers: options.headers\n            }));\n\n          case 3:\n            res = _context.sent;\n            _iteratorNormalCompletion = true;\n            _didIteratorError = false;\n            _context.prev = 6;\n            _iterator = _asyncIterator(res.ndjson());\n\n          case 8:\n            _context.next = 10;\n            return _awaitAsyncGenerator(_iterator.next());\n\n          case 10:\n            _step = _context.sent;\n            _iteratorNormalCompletion = _step.done;\n            _context.next = 14;\n            return _awaitAsyncGenerator(_step.value);\n\n          case 14:\n            _value = _context.sent;\n\n            if (_iteratorNormalCompletion) {\n              _context.next = 32;\n              break;\n            }\n\n            pin = _value;\n\n            if (!pin.Keys) {\n              _context.next = 27;\n              break;\n            }\n\n            _i = 0, _Object$keys = Object.keys(pin.Keys);\n\n          case 19:\n            if (!(_i < _Object$keys.length)) {\n              _context.next = 26;\n              break;\n            }\n\n            cid = _Object$keys[_i];\n            _context.next = 23;\n            return toPin(pin.Keys[cid].Type, cid, pin.Keys[cid].Metadata);\n\n          case 23:\n            _i++;\n            _context.next = 19;\n            break;\n\n          case 26:\n            return _context.abrupt(\"return\");\n\n          case 27:\n            _context.next = 29;\n            return toPin(pin.Type, pin.Cid, pin.Metadata);\n\n          case 29:\n            _iteratorNormalCompletion = true;\n            _context.next = 8;\n            break;\n\n          case 32:\n            _context.next = 38;\n            break;\n\n          case 34:\n            _context.prev = 34;\n            _context.t0 = _context[\"catch\"](6);\n            _didIteratorError = true;\n            _iteratorError = _context.t0;\n\n          case 38:\n            _context.prev = 38;\n            _context.prev = 39;\n\n            if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n              _context.next = 43;\n              break;\n            }\n\n            _context.next = 43;\n            return _awaitAsyncGenerator(_iterator.return());\n\n          case 43:\n            _context.prev = 43;\n\n            if (!_didIteratorError) {\n              _context.next = 46;\n              break;\n            }\n\n            throw _iteratorError;\n\n          case 46:\n            return _context.finish(43);\n\n          case 47:\n            return _context.finish(38);\n\n          case 48:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee, null, [[6, 34, 38, 48], [39,, 43, 47]]);\n    }));\n\n    function ls() {\n      return _ls.apply(this, arguments);\n    }\n\n    return ls;\n  }();\n});","map":{"version":3,"sources":["C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/ipfs-http-client/src/pin/ls.js"],"names":["CID","require","configure","toUrlSearchParams","toPin","type","cid","metadata","pin","module","exports","api","options","paths","Array","isArray","post","timeout","signal","searchParams","arg","map","path","stream","headers","res","ndjson","Keys","Object","keys","Type","Metadata","Cid","ls"],"mappings":"AAAA;;;;;;;;;;;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,MAAD,CAAnB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAME,iBAAiB,GAAGF,OAAO,CAAC,6BAAD,CAAjC;;AAEA,SAASG,KAAT,CAAgBC,IAAhB,EAAsBC,GAAtB,EAA2BC,QAA3B,EAAqC;AACnC,QAAMC,GAAG,GAAG;AACVH,IAAAA,IADU;AAEVC,IAAAA,GAAG,EAAE,IAAIN,GAAJ,CAAQM,GAAR;AAFK,GAAZ;;AAKA,MAAIC,QAAJ,EAAc;AACZC,IAAAA,GAAG,CAACD,QAAJ,GAAeA,QAAf;AACD;;AAED,SAAOC,GAAP;AACD;;AAEDC,MAAM,CAACC,OAAP,GAAiBR,SAAS,CAACS,GAAG,IAAI;AAChC;AAAA,yEAAO,iBAAqBC,OAAO,GAAG,EAA/B;AAAA;;AAAA;AAAA;AAAA;AACL,gBAAIA,OAAO,CAACC,KAAZ,EAAmB;AACjBD,cAAAA,OAAO,CAACC,KAAR,GAAgBC,KAAK,CAACC,OAAN,CAAcH,OAAO,CAACC,KAAtB,IAA+BD,OAAO,CAACC,KAAvC,GAA+C,CAACD,OAAO,CAACC,KAAT,CAA/D;AACD;;AAHI;AAAA,wCAKaF,GAAG,CAACK,IAAJ,CAAS,QAAT,EAAmB;AACnCC,cAAAA,OAAO,EAAEL,OAAO,CAACK,OADkB;AAEnCC,cAAAA,MAAM,EAAEN,OAAO,CAACM,MAFmB;AAGnCC,cAAAA,YAAY,EAAEhB,iBAAiB,iCAC1BS,OAD0B;AAE7BQ,gBAAAA,GAAG,EAAE,CAACR,OAAO,CAACC,KAAR,IAAiB,EAAlB,EAAsBQ,GAAtB,CAA0BC,IAAI,cAAOA,IAAP,CAA9B,CAFwB;AAG7BC,gBAAAA,MAAM,EAAE;AAHqB,iBAHI;AAQnCC,cAAAA,OAAO,EAAEZ,OAAO,CAACY;AARkB,aAAnB,CALb;;AAAA;AAKCC,YAAAA,GALD;AAAA;AAAA;AAAA;AAAA,uCAgBmBA,GAAG,CAACC,MAAJ,EAhBnB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAgBYlB,YAAAA,GAhBZ;;AAAA,iBAiBCA,GAAG,CAACmB,IAjBL;AAAA;AAAA;AAAA;;AAAA,mCAkBiBC,MAAM,CAACC,IAAP,CAAYrB,GAAG,CAACmB,IAAhB,CAlBjB;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAkBUrB,YAAAA,GAlBV;AAAA;AAmBC,mBAAMF,KAAK,CAACI,GAAG,CAACmB,IAAJ,CAASrB,GAAT,EAAcwB,IAAf,EAAqBxB,GAArB,EAA0BE,GAAG,CAACmB,IAAJ,CAASrB,GAAT,EAAcyB,QAAxC,CAAX;;AAnBD;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAwBH,mBAAM3B,KAAK,CAACI,GAAG,CAACsB,IAAL,EAAWtB,GAAG,CAACwB,GAAf,EAAoBxB,GAAG,CAACuB,QAAxB,CAAX;;AAxBG;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;;AAAA,aAAwBE,EAAxB;AAAA;AAAA;;AAAA,WAAwBA,EAAxB;AAAA;AA2BD,CA5ByB,CAA1B","sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\nfunction toPin (type, cid, metadata) {\n  const pin = {\n    type,\n    cid: new CID(cid)\n  }\n\n  if (metadata) {\n    pin.metadata = metadata\n  }\n\n  return pin\n}\n\nmodule.exports = configure(api => {\n  return async function * ls (options = {}) {\n    if (options.paths) {\n      options.paths = Array.isArray(options.paths) ? options.paths : [options.paths]\n    }\n\n    const res = await api.post('pin/ls', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        ...options,\n        arg: (options.paths || []).map(path => `${path}`),\n        stream: true\n      }),\n      headers: options.headers\n    })\n\n    for await (const pin of res.ndjson()) {\n      if (pin.Keys) { // non-streaming response\n        for (const cid of Object.keys(pin.Keys)) {\n          yield toPin(pin.Keys[cid].Type, cid, pin.Keys[cid].Metadata)\n        }\n        return\n      }\n\n      yield toPin(pin.Type, pin.Cid, pin.Metadata)\n    }\n  }\n})\n"]},"metadata":{},"sourceType":"script"}