{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport Web3 from \"web3\";\nimport Portis from '@portis/web3';\n\nconst getWeb3 = () => new Promise((resolve, reject) => {\n  // Wait for loading completion to avoid race conditions with web3 injection timing.\n  window.addEventListener(\"load\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var portis, web3, provider;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          if (!(typeof window.ethereum !== 'undefined')) {\n            _context.next = 37;\n            break;\n          }\n\n          if (!(localStorage.getItem('setWallet') === 'portis')) {\n            _context.next = 5;\n            break;\n          }\n\n          try {\n            portis = new Portis(process.env.REACT_APP_PORTIS_APP_ID, process.env.REACT_APP_PORTIS_TESTNET_NETWORK); //\n\n            web3 = new Web3(portis.provider);\n            console.log(\"saved portis wallet preference fetched\", web3);\n            resolve(web3);\n          } catch (error) {\n            reject(error);\n          }\n\n          _context.next = 35;\n          break;\n\n        case 5:\n          if (!(localStorage.getItem('setWallet') === 'metamask')) {\n            _context.next = 19;\n            break;\n          }\n\n          _context.prev = 6;\n          //USE METAMASK\n          web3 = new Web3(window.ethereum);\n          _context.next = 10;\n          return window.ethereum.request({\n            method: 'eth_requestAccounts'\n          });\n\n        case 10:\n          console.log(\"saved metamask wallet preference fetched\", web3);\n          resolve(web3);\n          _context.next = 17;\n          break;\n\n        case 14:\n          _context.prev = 14;\n          _context.t0 = _context[\"catch\"](6);\n          reject(_context.t0);\n\n        case 17:\n          _context.next = 35;\n          break;\n\n        case 19:\n          if (!window.confirm('Press OK to use your Portis wallet. Press CANCEL to use Metamask or any other available wallet')) {\n            _context.next = 23;\n            break;\n          }\n\n          //USE PORTIS\n          try {\n            portis = new Portis(process.env.REACT_APP_PORTIS_APP_ID, process.env.REACT_APP_PORTIS_TESTNET_NETWORK);\n            web3 = new Web3(portis.provider);\n            console.log(\"new portis wallet preference saved\", web3);\n            localStorage.setItem('setWallet', 'portis');\n            resolve(web3);\n          } catch (error) {\n            reject(error);\n          }\n\n          _context.next = 35;\n          break;\n\n        case 23:\n          _context.prev = 23;\n          //USE METAMASK\n          web3 = new Web3(window.ethereum); // Request account access if needed\n          // await window.ethereum.enable();\n\n          _context.next = 27;\n          return window.ethereum.request({\n            method: 'eth_requestAccounts'\n          });\n\n        case 27:\n          console.log(\"new metamask wallet preference saved\", web3);\n          localStorage.setItem('setWallet', 'metamask'); // Acccounts now exposed\n\n          resolve(web3);\n          _context.next = 35;\n          break;\n\n        case 32:\n          _context.prev = 32;\n          _context.t1 = _context[\"catch\"](23);\n          reject(_context.t1);\n\n        case 35:\n          _context.next = 38;\n          break;\n\n        case 37:\n          // Legacy dapp browsers...\n          if (window.web3) {\n            // Use Mist/MetaMask's provider.\n            web3 = window.web3; //Use Portis\n            // const portis = new Portis('28d6577c-2916-43bc-b4c5-f5dd87b9b62e', 'maticMumbai');\n            // const web3 = new Web3(portis.provider);\n\n            console.log(\"Injected web3 detected.\");\n            resolve(web3);\n          } // Fallback to localhost; use dev console port by default...\n          else {\n              provider = new Web3.providers.HttpProvider(\"http://127.0.0.1:8545\");\n              web3 = new Web3(provider);\n              console.log(\"No web3 instance injected, using Local web3.\");\n              resolve(web3);\n            }\n\n        case 38:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee, null, [[6, 14], [23, 32]]);\n  })));\n});\n\nexport default getWeb3;","map":{"version":3,"sources":["C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/src/getWeb3.js"],"names":["Web3","Portis","getWeb3","Promise","resolve","reject","window","addEventListener","ethereum","localStorage","getItem","portis","process","env","REACT_APP_PORTIS_APP_ID","REACT_APP_PORTIS_TESTNET_NETWORK","web3","provider","console","log","error","request","method","confirm","setItem","providers","HttpProvider"],"mappings":"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","sourcesContent":["import Web3 from \"web3\";\r\nimport Portis from '@portis/web3';\r\n\r\nconst getWeb3 = () =>\r\n  new Promise((resolve, reject) => {\r\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\r\n    window.addEventListener(\"load\", async () => {\r\n\r\n      // Modern dapp browsers...\r\n      if (typeof window.ethereum !== 'undefined') {\r\n        //use saved preferences\r\n        if(localStorage.getItem('setWallet') === 'portis'){\r\n          try{\r\n            const portis = new Portis(process.env.REACT_APP_PORTIS_APP_ID, process.env.REACT_APP_PORTIS_TESTNET_NETWORK); //\r\n            const web3 = new Web3(portis.provider);\r\n            console.log(\"saved portis wallet preference fetched\", web3);\r\n            resolve(web3);\r\n          }catch(error){\r\n            reject(error);\r\n          }\r\n        }else if(localStorage.getItem('setWallet') === 'metamask'){\r\n          try {\r\n            //USE METAMASK\r\n            const web3 = new Web3(window.ethereum);            \r\n            await window.ethereum.request({ method: 'eth_requestAccounts' });    \r\n            console.log(\"saved metamask wallet preference fetched\", web3);        \r\n            resolve(web3);\r\n          }catch (error) {\r\n            reject(error);\r\n          }\r\n        }else{\r\n          if(window.confirm('Press OK to use your Portis wallet. Press CANCEL to use Metamask or any other available wallet')){\r\n            //USE PORTIS\r\n            try{\r\n              const portis = new Portis(process.env.REACT_APP_PORTIS_APP_ID, process.env.REACT_APP_PORTIS_TESTNET_NETWORK); \r\n              const web3 = new Web3(portis.provider);\r\n              console.log(\"new portis wallet preference saved\", web3);\r\n              localStorage.setItem('setWallet','portis');\r\n              resolve(web3);\r\n            }catch(error){\r\n              reject(error);\r\n            }\r\n          }else{\r\n            try {\r\n              //USE METAMASK\r\n              const web3 = new Web3(window.ethereum);            \r\n              // Request account access if needed\r\n              // await window.ethereum.enable();\r\n              await window.ethereum.request({ method: 'eth_requestAccounts' });\r\n              console.log(\"new metamask wallet preference saved\", web3);\r\n              localStorage.setItem('setWallet','metamask');\r\n              // Acccounts now exposed\r\n              resolve(web3);\r\n            }catch (error) {\r\n              reject(error);\r\n            }\r\n          }\r\n        }\r\n        \r\n      }\r\n      // Legacy dapp browsers...\r\n      else if (window.web3) {\r\n        // Use Mist/MetaMask's provider.\r\n        const web3 = window.web3;\r\n        \r\n        //Use Portis\r\n        // const portis = new Portis('28d6577c-2916-43bc-b4c5-f5dd87b9b62e', 'maticMumbai');\r\n        // const web3 = new Web3(portis.provider);\r\n        console.log(\"Injected web3 detected.\");\r\n        resolve(web3);\r\n      }\r\n      // Fallback to localhost; use dev console port by default...\r\n      else {\r\n        const provider = new Web3.providers.HttpProvider(\r\n          \"http://127.0.0.1:8545\"\r\n        );\r\n        const web3 = new Web3(provider);\r\n        console.log(\"No web3 instance injected, using Local web3.\");\r\n        resolve(web3);\r\n      }\r\n    });\r\n  });\r\n\r\nexport default getWeb3;\r\n"]},"metadata":{},"sourceType":"module"}