{"ast":null,"code":"/*!\n * Chai - message composition utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\nvar flag = require('./flag'),\n    getActual = require('./getActual'),\n    objDisplay = require('./objDisplay');\n/**\n * ### .getMessage(object, message, negateMessage)\n *\n * Construct the error message based on flags\n * and template tags. Template tags will return\n * a stringified inspection of the object referenced.\n *\n * Message template tags:\n * - `#{this}` current asserted object\n * - `#{act}` actual value\n * - `#{exp}` expected value\n *\n * @param {Object} object (constructed Assertion)\n * @param {Arguments} chai.Assertion.prototype.assert arguments\n * @namespace Utils\n * @name getMessage\n * @api public\n */\n\n\nmodule.exports = function getMessage(obj, args) {\n  var negate = flag(obj, 'negate'),\n      val = flag(obj, 'object'),\n      expected = args[3],\n      actual = getActual(obj, args),\n      msg = negate ? args[2] : args[1],\n      flagMsg = flag(obj, 'message');\n  if (typeof msg === \"function\") msg = msg();\n  msg = msg || '';\n  msg = msg.replace(/#\\{this\\}/g, function () {\n    return objDisplay(val);\n  }).replace(/#\\{act\\}/g, function () {\n    return objDisplay(actual);\n  }).replace(/#\\{exp\\}/g, function () {\n    return objDisplay(expected);\n  });\n  return flagMsg ? flagMsg + ': ' + msg : msg;\n};","map":{"version":3,"sources":["C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/chai/lib/chai/utils/getMessage.js"],"names":["flag","require","getActual","objDisplay","module","exports","getMessage","obj","args","negate","val","expected","actual","msg","flagMsg","replace"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA,IAAIA,IAAI,GAAGC,OAAO,CAAC,QAAD,CAAlB;AAAA,IACIC,SAAS,GAAGD,OAAO,CAAC,aAAD,CADvB;AAAA,IAEIE,UAAU,GAAGF,OAAO,CAAC,cAAD,CAFxB;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAG,MAAM,CAACC,OAAP,GAAiB,SAASC,UAAT,CAAoBC,GAApB,EAAyBC,IAAzB,EAA+B;AAC9C,MAAIC,MAAM,GAAGT,IAAI,CAACO,GAAD,EAAM,QAAN,CAAjB;AAAA,MACIG,GAAG,GAAGV,IAAI,CAACO,GAAD,EAAM,QAAN,CADd;AAAA,MAEII,QAAQ,GAAGH,IAAI,CAAC,CAAD,CAFnB;AAAA,MAGII,MAAM,GAAGV,SAAS,CAACK,GAAD,EAAMC,IAAN,CAHtB;AAAA,MAIIK,GAAG,GAAGJ,MAAM,GAAGD,IAAI,CAAC,CAAD,CAAP,GAAaA,IAAI,CAAC,CAAD,CAJjC;AAAA,MAKIM,OAAO,GAAGd,IAAI,CAACO,GAAD,EAAM,SAAN,CALlB;AAOA,MAAG,OAAOM,GAAP,KAAe,UAAlB,EAA8BA,GAAG,GAAGA,GAAG,EAAT;AAC9BA,EAAAA,GAAG,GAAGA,GAAG,IAAI,EAAb;AACAA,EAAAA,GAAG,GAAGA,GAAG,CACNE,OADG,CACK,YADL,EACmB,YAAY;AAAE,WAAOZ,UAAU,CAACO,GAAD,CAAjB;AAAyB,GAD1D,EAEHK,OAFG,CAEK,WAFL,EAEkB,YAAY;AAAE,WAAOZ,UAAU,CAACS,MAAD,CAAjB;AAA4B,GAF5D,EAGHG,OAHG,CAGK,WAHL,EAGkB,YAAY;AAAE,WAAOZ,UAAU,CAACQ,QAAD,CAAjB;AAA8B,GAH9D,CAAN;AAKA,SAAOG,OAAO,GAAGA,OAAO,GAAG,IAAV,GAAiBD,GAApB,GAA0BA,GAAxC;AACD,CAhBD","sourcesContent":["/*!\n * Chai - message composition utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\n\nvar flag = require('./flag')\n  , getActual = require('./getActual')\n  , objDisplay = require('./objDisplay');\n\n/**\n * ### .getMessage(object, message, negateMessage)\n *\n * Construct the error message based on flags\n * and template tags. Template tags will return\n * a stringified inspection of the object referenced.\n *\n * Message template tags:\n * - `#{this}` current asserted object\n * - `#{act}` actual value\n * - `#{exp}` expected value\n *\n * @param {Object} object (constructed Assertion)\n * @param {Arguments} chai.Assertion.prototype.assert arguments\n * @namespace Utils\n * @name getMessage\n * @api public\n */\n\nmodule.exports = function getMessage(obj, args) {\n  var negate = flag(obj, 'negate')\n    , val = flag(obj, 'object')\n    , expected = args[3]\n    , actual = getActual(obj, args)\n    , msg = negate ? args[2] : args[1]\n    , flagMsg = flag(obj, 'message');\n\n  if(typeof msg === \"function\") msg = msg();\n  msg = msg || '';\n  msg = msg\n    .replace(/#\\{this\\}/g, function () { return objDisplay(val); })\n    .replace(/#\\{act\\}/g, function () { return objDisplay(actual); })\n    .replace(/#\\{exp\\}/g, function () { return objDisplay(expected); });\n\n  return flagMsg ? flagMsg + ': ' + msg : msg;\n};\n"]},"metadata":{},"sourceType":"script"}