{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _createForOfIteratorHelper = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _objectSpread = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _awaitAsyncGenerator = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _asyncIterator = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nconst CID = require('cids');\n\nconst toCamelWithMetadata = require('../lib/object-to-camel-with-metadata');\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\nmodule.exports = configure(api => {\n  /**\n   * @type {import('..').Implements<typeof import('ipfs-core/src/components/files/ls')>}\n   */\n  function ls(_x) {\n    return _ls.apply(this, arguments);\n  }\n\n  function _ls() {\n    _ls = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(path, options = {}) {\n      var res, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, result, _iterator2, _step2, entry;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            if (!(!path || typeof path !== 'string')) {\n              _context.next = 2;\n              break;\n            }\n\n            throw new Error('ipfs.files.ls requires a path');\n\n          case 2:\n            _context.next = 4;\n            return _awaitAsyncGenerator(api.post('files/ls', {\n              timeout: options.timeout,\n              signal: options.signal,\n              searchParams: toUrlSearchParams(_objectSpread(_objectSpread({\n                arg: CID.isCID(path) ? \"/ipfs/\".concat(path) : path,\n                // default long to true, diverges from go-ipfs where its false by default\n                long: true\n              }, options), {}, {\n                stream: true\n              })),\n              headers: options.headers\n            }));\n\n          case 4:\n            res = _context.sent;\n            _iteratorNormalCompletion = true;\n            _didIteratorError = false;\n            _context.prev = 7;\n            _iterator = _asyncIterator(res.ndjson());\n\n          case 9:\n            _context.next = 11;\n            return _awaitAsyncGenerator(_iterator.next());\n\n          case 11:\n            _step = _context.sent;\n            _iteratorNormalCompletion = _step.done;\n            _context.next = 15;\n            return _awaitAsyncGenerator(_step.value);\n\n          case 15:\n            _value = _context.sent;\n\n            if (_iteratorNormalCompletion) {\n              _context.next = 43;\n              break;\n            }\n\n            result = _value;\n\n            if (!('Entries' in result)) {\n              _context.next = 38;\n              break;\n            }\n\n            _iterator2 = _createForOfIteratorHelper(result.Entries || []);\n            _context.prev = 20;\n\n            _iterator2.s();\n\n          case 22:\n            if ((_step2 = _iterator2.n()).done) {\n              _context.next = 28;\n              break;\n            }\n\n            entry = _step2.value;\n            _context.next = 26;\n            return toCoreInterface(toCamelWithMetadata(entry));\n\n          case 26:\n            _context.next = 22;\n            break;\n\n          case 28:\n            _context.next = 33;\n            break;\n\n          case 30:\n            _context.prev = 30;\n            _context.t0 = _context[\"catch\"](20);\n\n            _iterator2.e(_context.t0);\n\n          case 33:\n            _context.prev = 33;\n\n            _iterator2.f();\n\n            return _context.finish(33);\n\n          case 36:\n            _context.next = 40;\n            break;\n\n          case 38:\n            _context.next = 40;\n            return toCoreInterface(toCamelWithMetadata(result));\n\n          case 40:\n            _iteratorNormalCompletion = true;\n            _context.next = 9;\n            break;\n\n          case 43:\n            _context.next = 49;\n            break;\n\n          case 45:\n            _context.prev = 45;\n            _context.t1 = _context[\"catch\"](7);\n            _didIteratorError = true;\n            _iteratorError = _context.t1;\n\n          case 49:\n            _context.prev = 49;\n            _context.prev = 50;\n\n            if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n              _context.next = 54;\n              break;\n            }\n\n            _context.next = 54;\n            return _awaitAsyncGenerator(_iterator.return());\n\n          case 54:\n            _context.prev = 54;\n\n            if (!_didIteratorError) {\n              _context.next = 57;\n              break;\n            }\n\n            throw _iteratorError;\n\n          case 57:\n            return _context.finish(54);\n\n          case 58:\n            return _context.finish(49);\n\n          case 59:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee, null, [[7, 45, 49, 59], [20, 30, 33, 36], [50,, 54, 58]]);\n    }));\n    return _ls.apply(this, arguments);\n  }\n\n  return ls;\n});\n\nfunction toCoreInterface(entry) {\n  if (entry.hash) {\n    entry.cid = new CID(entry.hash);\n  }\n\n  delete entry.hash;\n  entry.type = entry.type === 1 ? 'directory' : 'file';\n  return entry;\n}","map":{"version":3,"sources":["C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/ipfs-http-client/src/files/ls.js"],"names":["CID","require","toCamelWithMetadata","configure","toUrlSearchParams","module","exports","api","ls","path","options","Error","post","timeout","signal","searchParams","arg","isCID","long","stream","headers","res","ndjson","result","Entries","entry","toCoreInterface","hash","cid","type"],"mappings":"AAAA;;;;;;;;;;;;;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,MAAD,CAAnB;;AACA,MAAMC,mBAAmB,GAAGD,OAAO,CAAC,sCAAD,CAAnC;;AACA,MAAME,SAAS,GAAGF,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAMG,iBAAiB,GAAGH,OAAO,CAAC,6BAAD,CAAjC;;AAEAI,MAAM,CAACC,OAAP,GAAiBH,SAAS,CAACI,GAAG,IAAI;AAChC;AACF;AACA;AAHkC,WAIfC,EAJe;AAAA;AAAA;;AAAA;AAAA,qEAIhC,iBAAqBC,IAArB,EAA2BC,OAAO,GAAG,EAArC;AAAA;;AAAA;AAAA;AAAA;AAAA,kBACM,CAACD,IAAD,IAAS,OAAOA,IAAP,KAAgB,QAD/B;AAAA;AAAA;AAAA;;AAAA,kBAEU,IAAIE,KAAJ,CAAU,+BAAV,CAFV;;AAAA;AAAA;AAAA,wCAKoBJ,GAAG,CAACK,IAAJ,CAAS,UAAT,EAAqB;AACrCC,cAAAA,OAAO,EAAEH,OAAO,CAACG,OADoB;AAErCC,cAAAA,MAAM,EAAEJ,OAAO,CAACI,MAFqB;AAGrCC,cAAAA,YAAY,EAAEX,iBAAiB;AAC7BY,gBAAAA,GAAG,EAAEhB,GAAG,CAACiB,KAAJ,CAAUR,IAAV,oBAA2BA,IAA3B,IAAoCA,IADZ;AAE7B;AACAS,gBAAAA,IAAI,EAAE;AAHuB,iBAI1BR,OAJ0B;AAK7BS,gBAAAA,MAAM,EAAE;AALqB,iBAHM;AAUrCC,cAAAA,OAAO,EAAEV,OAAO,CAACU;AAVoB,aAArB,CALpB;;AAAA;AAKQC,YAAAA,GALR;AAAA;AAAA;AAAA;AAAA,uCAkB6BA,GAAG,CAACC,MAAJ,EAlB7B;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAkBmBC,YAAAA,MAlBnB;;AAAA,kBAoBQ,aAAaA,MApBrB;AAAA;AAAA;AAAA;;AAAA,oDAqB0BA,MAAM,CAACC,OAAP,IAAkB,EArB5C;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAqBiBC,YAAAA,KArBjB;AAAA;AAsBQ,mBAAMC,eAAe,CAACxB,mBAAmB,CAACuB,KAAD,CAApB,CAArB;;AAtBR;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAyBM,mBAAMC,eAAe,CAACxB,mBAAmB,CAACqB,MAAD,CAApB,CAArB;;AAzBN;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAJgC;AAAA;AAAA;;AAkChC,SAAOf,EAAP;AACD,CAnCyB,CAA1B;;AAqCA,SAASkB,eAAT,CAA0BD,KAA1B,EAAiC;AAC/B,MAAIA,KAAK,CAACE,IAAV,EAAgB;AACdF,IAAAA,KAAK,CAACG,GAAN,GAAY,IAAI5B,GAAJ,CAAQyB,KAAK,CAACE,IAAd,CAAZ;AACD;;AAED,SAAOF,KAAK,CAACE,IAAb;AAEAF,EAAAA,KAAK,CAACI,IAAN,GAAaJ,KAAK,CAACI,IAAN,KAAe,CAAf,GAAmB,WAAnB,GAAiC,MAA9C;AAEA,SAAOJ,KAAP;AACD","sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst toCamelWithMetadata = require('../lib/object-to-camel-with-metadata')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\nmodule.exports = configure(api => {\n  /**\n   * @type {import('..').Implements<typeof import('ipfs-core/src/components/files/ls')>}\n   */\n  async function * ls (path, options = {}) {\n    if (!path || typeof path !== 'string') {\n      throw new Error('ipfs.files.ls requires a path')\n    }\n\n    const res = await api.post('files/ls', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: CID.isCID(path) ? `/ipfs/${path}` : path,\n        // default long to true, diverges from go-ipfs where its false by default\n        long: true,\n        ...options,\n        stream: true\n      }),\n      headers: options.headers\n    })\n\n    for await (const result of res.ndjson()) {\n      // go-ipfs does not yet support the \"stream\" option\n      if ('Entries' in result) {\n        for (const entry of result.Entries || []) {\n          yield toCoreInterface(toCamelWithMetadata(entry))\n        }\n      } else {\n        yield toCoreInterface(toCamelWithMetadata(result))\n      }\n    }\n  }\n\n  return ls\n})\n\nfunction toCoreInterface (entry) {\n  if (entry.hash) {\n    entry.cid = new CID(entry.hash)\n  }\n\n  delete entry.hash\n\n  entry.type = entry.type === 1 ? 'directory' : 'file'\n\n  return entry\n}\n"]},"metadata":{},"sourceType":"script"}