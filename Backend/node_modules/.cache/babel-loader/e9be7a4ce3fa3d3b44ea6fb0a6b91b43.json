{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nconst sha3 = require('js-sha3'); // @ts-ignore - no types available\n\n\nconst mur = require('murmurhash3js-revisited');\n\nconst _require = require('./sha'),\n      sha = _require.factory;\n\nconst _require2 = require('./utils'),\n      fromNumberTo32BitBuf = _require2.fromNumberTo32BitBuf;\n\nconst uint8ArrayFromString = require('uint8arrays/from-string'); // Note that although this function doesn't do any asynchronous work, we mark\n// the function as async because it must return a Promise to match the API\n// for other functions that do perform asynchronous work (see sha.browser.js)\n// eslint-disable-next-line\n\n/**\n * @param {string} algorithm\n * @returns {import('./types').Digest}\n */\n\n\nconst hash = algorithm => /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(data) {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          _context.t0 = algorithm;\n          _context.next = _context.t0 === 'sha3-224' ? 3 : _context.t0 === 'sha3-256' ? 4 : _context.t0 === 'sha3-384' ? 5 : _context.t0 === 'sha3-512' ? 6 : _context.t0 === 'shake-128' ? 7 : _context.t0 === 'shake-256' ? 8 : _context.t0 === 'keccak-224' ? 9 : _context.t0 === 'keccak-256' ? 10 : _context.t0 === 'keccak-384' ? 11 : _context.t0 === 'keccak-512' ? 12 : _context.t0 === 'murmur3-128' ? 13 : _context.t0 === 'murmur3-32' ? 14 : 15;\n          break;\n\n        case 3:\n          return _context.abrupt(\"return\", new Uint8Array(sha3.sha3_224.arrayBuffer(data)));\n\n        case 4:\n          return _context.abrupt(\"return\", new Uint8Array(sha3.sha3_256.arrayBuffer(data)));\n\n        case 5:\n          return _context.abrupt(\"return\", new Uint8Array(sha3.sha3_384.arrayBuffer(data)));\n\n        case 6:\n          return _context.abrupt(\"return\", new Uint8Array(sha3.sha3_512.arrayBuffer(data)));\n\n        case 7:\n          return _context.abrupt(\"return\", new Uint8Array(sha3.shake128.create(128).update(data).arrayBuffer()));\n\n        case 8:\n          return _context.abrupt(\"return\", new Uint8Array(sha3.shake256.create(256).update(data).arrayBuffer()));\n\n        case 9:\n          return _context.abrupt(\"return\", new Uint8Array(sha3.keccak224.arrayBuffer(data)));\n\n        case 10:\n          return _context.abrupt(\"return\", new Uint8Array(sha3.keccak256.arrayBuffer(data)));\n\n        case 11:\n          return _context.abrupt(\"return\", new Uint8Array(sha3.keccak384.arrayBuffer(data)));\n\n        case 12:\n          return _context.abrupt(\"return\", new Uint8Array(sha3.keccak512.arrayBuffer(data)));\n\n        case 13:\n          return _context.abrupt(\"return\", uint8ArrayFromString(mur.x64.hash128(data), 'base16'));\n\n        case 14:\n          return _context.abrupt(\"return\", fromNumberTo32BitBuf(mur.x86.hash32(data)));\n\n        case 15:\n          throw new TypeError(\"\".concat(algorithm, \" is not a supported algorithm\"));\n\n        case 16:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n/** @type {import('./types').Digest} */\n\n\nconst identity = data => data;\n\nmodule.exports = {\n  identity,\n  sha1: sha('sha1'),\n  sha2256: sha('sha2-256'),\n  sha2512: sha('sha2-512'),\n  dblSha2256: sha('dbl-sha2-256'),\n  sha3224: hash('sha3-224'),\n  sha3256: hash('sha3-256'),\n  sha3384: hash('sha3-384'),\n  sha3512: hash('sha3-512'),\n  shake128: hash('shake-128'),\n  shake256: hash('shake-256'),\n  keccak224: hash('keccak-224'),\n  keccak256: hash('keccak-256'),\n  keccak384: hash('keccak-384'),\n  keccak512: hash('keccak-512'),\n  murmur3128: hash('murmur3-128'),\n  murmur332: hash('murmur3-32'),\n  addBlake: require('./blake')\n};","map":{"version":3,"sources":["C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/multihashing-async/src/crypto.js"],"names":["sha3","require","mur","sha","factory","fromNumberTo32BitBuf","uint8ArrayFromString","hash","algorithm","data","Uint8Array","sha3_224","arrayBuffer","sha3_256","sha3_384","sha3_512","shake128","create","update","shake256","keccak224","keccak256","keccak384","keccak512","x64","hash128","x86","hash32","TypeError","identity","module","exports","sha1","sha2256","sha2512","dblSha2256","sha3224","sha3256","sha3384","sha3512","murmur3128","murmur332","addBlake"],"mappings":"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","sourcesContent":["'use strict'\n\nconst sha3 = require('js-sha3')\n// @ts-ignore - no types available\nconst mur = require('murmurhash3js-revisited')\nconst { factory: sha } = require('./sha')\nconst { fromNumberTo32BitBuf } = require('./utils')\nconst uint8ArrayFromString = require('uint8arrays/from-string')\n\n// Note that although this function doesn't do any asynchronous work, we mark\n// the function as async because it must return a Promise to match the API\n// for other functions that do perform asynchronous work (see sha.browser.js)\n// eslint-disable-next-line\n/**\n * @param {string} algorithm\n * @returns {import('./types').Digest}\n */\nconst hash = (algorithm) => async (data) => {\n  switch (algorithm) {\n    case 'sha3-224':\n      return new Uint8Array(sha3.sha3_224.arrayBuffer(data))\n    case 'sha3-256':\n      return new Uint8Array(sha3.sha3_256.arrayBuffer(data))\n    case 'sha3-384':\n      return new Uint8Array(sha3.sha3_384.arrayBuffer(data))\n    case 'sha3-512':\n      return new Uint8Array(sha3.sha3_512.arrayBuffer(data))\n    case 'shake-128':\n      return new Uint8Array(sha3.shake128.create(128).update(data).arrayBuffer())\n    case 'shake-256':\n      return new Uint8Array(sha3.shake256.create(256).update(data).arrayBuffer())\n    case 'keccak-224':\n      return new Uint8Array(sha3.keccak224.arrayBuffer(data))\n    case 'keccak-256':\n      return new Uint8Array(sha3.keccak256.arrayBuffer(data))\n    case 'keccak-384':\n      return new Uint8Array(sha3.keccak384.arrayBuffer(data))\n    case 'keccak-512':\n      return new Uint8Array(sha3.keccak512.arrayBuffer(data))\n    case 'murmur3-128':\n      return uint8ArrayFromString(mur.x64.hash128(data), 'base16')\n    case 'murmur3-32':\n      return fromNumberTo32BitBuf(mur.x86.hash32(data))\n\n    default:\n      throw new TypeError(`${algorithm} is not a supported algorithm`)\n  }\n}\n\n/** @type {import('./types').Digest} */\nconst identity = data => data\n\nmodule.exports = {\n  identity,\n  sha1: sha('sha1'),\n  sha2256: sha('sha2-256'),\n  sha2512: sha('sha2-512'),\n  dblSha2256: sha('dbl-sha2-256'),\n  sha3224: hash('sha3-224'),\n  sha3256: hash('sha3-256'),\n  sha3384: hash('sha3-384'),\n  sha3512: hash('sha3-512'),\n  shake128: hash('shake-128'),\n  shake256: hash('shake-256'),\n  keccak224: hash('keccak-224'),\n  keccak256: hash('keccak-256'),\n  keccak384: hash('keccak-384'),\n  keccak512: hash('keccak-512'),\n  murmur3128: hash('murmur3-128'),\n  murmur332: hash('murmur3-32'),\n  addBlake: require('./blake')\n}\n"]},"metadata":{},"sourceType":"script"}