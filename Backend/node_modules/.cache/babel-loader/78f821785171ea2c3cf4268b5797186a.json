{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nconst configure = require('../lib/configure');\n\nconst multicodec = require('multicodec');\n\nconst loadFormat = require('../lib/ipld-formats');\n\nmodule.exports = configure((api, opts) => {\n  const getBlock = require('../block/get')(opts);\n\n  const dagResolve = require('./resolve')(opts);\n\n  const load = loadFormat(opts.ipld);\n  /**\n   * @type {import('..').Implements<typeof import('ipfs-core/src/components/dag/get')>}\n   */\n\n  const get = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(cid, options = {}) {\n      var resolved, block, codecName, format;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return dagResolve(cid, options);\n\n          case 2:\n            resolved = _context.sent;\n            _context.next = 5;\n            return getBlock(resolved.cid, options);\n\n          case 5:\n            block = _context.sent;\n            codecName = multicodec.getName(resolved.cid.code);\n            _context.next = 9;\n            return load(codecName);\n\n          case 9:\n            format = _context.sent;\n\n            if (resolved.cid.code === multicodec.RAW && !resolved.remainderPath) {\n              resolved.remainderPath = '/';\n            }\n\n            return _context.abrupt(\"return\", format.resolver.resolve(block.data, resolved.remainderPath));\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n\n    return function get(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return get;\n});","map":{"version":3,"sources":["C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/ipfs-http-client/src/dag/get.js"],"names":["configure","require","multicodec","loadFormat","module","exports","api","opts","getBlock","dagResolve","load","ipld","get","cid","options","resolved","block","codecName","getName","code","format","RAW","remainderPath","resolver","resolve","data"],"mappings":"AAAA;;;;;;AAEA,MAAMA,SAAS,GAAGC,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAMC,UAAU,GAAGD,OAAO,CAAC,YAAD,CAA1B;;AACA,MAAME,UAAU,GAAGF,OAAO,CAAC,qBAAD,CAA1B;;AAEAG,MAAM,CAACC,OAAP,GAAiBL,SAAS,CAAC,CAACM,GAAD,EAAMC,IAAN,KAAe;AACxC,QAAMC,QAAQ,GAAGP,OAAO,CAAC,cAAD,CAAP,CAAwBM,IAAxB,CAAjB;;AACA,QAAME,UAAU,GAAGR,OAAO,CAAC,WAAD,CAAP,CAAqBM,IAArB,CAAnB;;AACA,QAAMG,IAAI,GAAGP,UAAU,CAACI,IAAI,CAACI,IAAN,CAAvB;AAEA;AACF;AACA;;AACE,QAAMC,GAAG;AAAA,wEAAG,iBAAOC,GAAP,EAAYC,OAAO,GAAG,EAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACaL,UAAU,CAACI,GAAD,EAAMC,OAAN,CADvB;;AAAA;AACJC,YAAAA,QADI;AAAA;AAAA,mBAEUP,QAAQ,CAACO,QAAQ,CAACF,GAAV,EAAeC,OAAf,CAFlB;;AAAA;AAEJE,YAAAA,KAFI;AAIJC,YAAAA,SAJI,GAIQf,UAAU,CAACgB,OAAX,CAAmBH,QAAQ,CAACF,GAAT,CAAaM,IAAhC,CAJR;AAAA;AAAA,mBAKWT,IAAI,CAACO,SAAD,CALf;;AAAA;AAKJG,YAAAA,MALI;;AAOV,gBAAIL,QAAQ,CAACF,GAAT,CAAaM,IAAb,KAAsBjB,UAAU,CAACmB,GAAjC,IAAwC,CAACN,QAAQ,CAACO,aAAtD,EAAqE;AACnEP,cAAAA,QAAQ,CAACO,aAAT,GAAyB,GAAzB;AACD;;AATS,6CAWHF,MAAM,CAACG,QAAP,CAAgBC,OAAhB,CAAwBR,KAAK,CAACS,IAA9B,EAAoCV,QAAQ,CAACO,aAA7C,CAXG;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAHV,GAAG;AAAA;AAAA;AAAA,KAAT;;AAcA,SAAOA,GAAP;AACD,CAvByB,CAA1B","sourcesContent":["'use strict'\n\nconst configure = require('../lib/configure')\nconst multicodec = require('multicodec')\nconst loadFormat = require('../lib/ipld-formats')\n\nmodule.exports = configure((api, opts) => {\n  const getBlock = require('../block/get')(opts)\n  const dagResolve = require('./resolve')(opts)\n  const load = loadFormat(opts.ipld)\n\n  /**\n   * @type {import('..').Implements<typeof import('ipfs-core/src/components/dag/get')>}\n   */\n  const get = async (cid, options = {}) => {\n    const resolved = await dagResolve(cid, options)\n    const block = await getBlock(resolved.cid, options)\n\n    const codecName = multicodec.getName(resolved.cid.code)\n    const format = await load(codecName)\n\n    if (resolved.cid.code === multicodec.RAW && !resolved.remainderPath) {\n      resolved.remainderPath = '/'\n    }\n\n    return format.resolver.resolve(block.data, resolved.remainderPath)\n  }\n\n  return get\n})\n"]},"metadata":{},"sourceType":"script"}