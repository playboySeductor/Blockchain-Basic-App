{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _objectSpread = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _asyncToGenerator = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nconst modeToString = require('../lib/mode-to-string');\n\nconst _require = require('ipfs-core-utils/src/files/normalise-input/utils'),\n      mtimeToObject = _require.mtimeToObject;\n\nconst configure = require('../lib/configure');\n\nconst multipartRequest = require('../lib/multipart-request');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\nconst abortSignal = require('../lib/abort-signal');\n\nconst _require2 = require('native-abort-controller'),\n      AbortController = _require2.AbortController;\n\nmodule.exports = configure(api => {\n  /**\n   * @type {import('..').Implements<typeof import('ipfs-core/src/components/files/write')>}\n   */\n  function write(_x, _x2) {\n    return _write.apply(this, arguments);\n  }\n\n  function _write() {\n    _write = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(path, input, options = {}) {\n      var controller, signal, res;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            // allow aborting requests on body errors\n            controller = new AbortController();\n            signal = abortSignal(controller.signal, options.signal); // @ts-ignore https://github.com/ipfs/js-ipfs-utils/issues/90\n\n            _context.t0 = api;\n            _context.t1 = _objectSpread;\n            _context.t2 = {\n              timeout: options.timeout,\n              signal,\n              searchParams: toUrlSearchParams(_objectSpread({\n                arg: path,\n                streamChannels: true,\n                count: options.length\n              }, options))\n            };\n            _context.next = 7;\n            return multipartRequest({\n              content: input,\n              path: 'arg',\n              mode: modeToString(options.mode),\n              mtime: mtimeToObject(options.mtime)\n            }, controller, options.headers);\n\n          case 7:\n            _context.t3 = _context.sent;\n            _context.t4 = (0, _context.t1)(_context.t2, _context.t3);\n            _context.next = 11;\n            return _context.t0.post.call(_context.t0, 'files/write', _context.t4);\n\n          case 11:\n            res = _context.sent;\n            _context.next = 14;\n            return res.text();\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n    return _write.apply(this, arguments);\n  }\n\n  return write;\n});","map":{"version":3,"sources":["C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/ipfs-http-client/src/files/write.js"],"names":["modeToString","require","mtimeToObject","configure","multipartRequest","toUrlSearchParams","abortSignal","AbortController","module","exports","api","write","path","input","options","controller","signal","timeout","searchParams","arg","streamChannels","count","length","content","mode","mtime","headers","post","res","text"],"mappings":"AAAA;;;;;;;;AAEA,MAAMA,YAAY,GAAGC,OAAO,CAAC,uBAAD,CAA5B;;iBAC0BA,OAAO,CAAC,iDAAD,C;MAAzBC,a,YAAAA,a;;AACR,MAAMC,SAAS,GAAGF,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAMG,gBAAgB,GAAGH,OAAO,CAAC,0BAAD,CAAhC;;AACA,MAAMI,iBAAiB,GAAGJ,OAAO,CAAC,6BAAD,CAAjC;;AACA,MAAMK,WAAW,GAAGL,OAAO,CAAC,qBAAD,CAA3B;;kBAC4BA,OAAO,CAAC,yBAAD,C;MAA3BM,e,aAAAA,e;;AAERC,MAAM,CAACC,OAAP,GAAiBN,SAAS,CAACO,GAAG,IAAI;AAChC;AACF;AACA;AAHkC,WAIjBC,KAJiB;AAAA;AAAA;;AAAA;AAAA,sEAIhC,iBAAsBC,IAAtB,EAA4BC,KAA5B,EAAmCC,OAAO,GAAG,EAA7C;AAAA;AAAA;AAAA;AAAA;AACE;AACMC,YAAAA,UAFR,GAEqB,IAAIR,eAAJ,EAFrB;AAGQS,YAAAA,MAHR,GAGiBV,WAAW,CAACS,UAAU,CAACC,MAAZ,EAAoBF,OAAO,CAACE,MAA5B,CAH5B,EAKE;;AALF,0BAMoBN,GANpB;AAAA;AAAA;AAOIO,cAAAA,OAAO,EAAEH,OAAO,CAACG,OAPrB;AAQID,cAAAA,MARJ;AASIE,cAAAA,YAAY,EAAEb,iBAAiB;AAC7Bc,gBAAAA,GAAG,EAAEP,IADwB;AAE7BQ,gBAAAA,cAAc,EAAE,IAFa;AAG7BC,gBAAAA,KAAK,EAAEP,OAAO,CAACQ;AAHc,iBAI1BR,OAJ0B;AATnC;AAAA;AAAA,mBAgBYV,gBAAgB,CAAC;AACrBmB,cAAAA,OAAO,EAAEV,KADY;AAErBD,cAAAA,IAAI,EAAE,KAFe;AAGrBY,cAAAA,IAAI,EAAExB,YAAY,CAACc,OAAO,CAACU,IAAT,CAHG;AAIrBC,cAAAA,KAAK,EAAEvB,aAAa,CAACY,OAAO,CAACW,KAAT;AAJC,aAAD,EAKnBV,UALmB,EAKPD,OAAO,CAACY,OALD,CAhB5B;;AAAA;AAAA;AAAA;AAAA;AAAA,+BAMwBC,IANxB,mBAM6B,aAN7B;;AAAA;AAMQC,YAAAA,GANR;AAAA;AAAA,mBAyBQA,GAAG,CAACC,IAAJ,EAzBR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAJgC;AAAA;AAAA;;AAgChC,SAAOlB,KAAP;AACD,CAjCyB,CAA1B","sourcesContent":["'use strict'\n\nconst modeToString = require('../lib/mode-to-string')\nconst { mtimeToObject } = require('ipfs-core-utils/src/files/normalise-input/utils')\nconst configure = require('../lib/configure')\nconst multipartRequest = require('../lib/multipart-request')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\nconst abortSignal = require('../lib/abort-signal')\nconst { AbortController } = require('native-abort-controller')\n\nmodule.exports = configure(api => {\n  /**\n   * @type {import('..').Implements<typeof import('ipfs-core/src/components/files/write')>}\n   */\n  async function write (path, input, options = {}) {\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n\n    // @ts-ignore https://github.com/ipfs/js-ipfs-utils/issues/90\n    const res = await api.post('files/write', {\n      timeout: options.timeout,\n      signal,\n      searchParams: toUrlSearchParams({\n        arg: path,\n        streamChannels: true,\n        count: options.length,\n        ...options\n      }),\n      ...(\n        await multipartRequest({\n          content: input,\n          path: 'arg',\n          mode: modeToString(options.mode),\n          mtime: mtimeToObject(options.mtime)\n        }, controller, options.headers)\n      )\n    })\n\n    await res.text()\n  }\n\n  return write\n})\n"]},"metadata":{},"sourceType":"script"}