{"ast":null,"code":"/* eslint-disable require-await */\n'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nconst multihash = require('multihashes');\n/**\n * @typedef {import('multihashes').HashName} HashName\n * @typedef {import('./types').Digest} Digest\n */\n\n/**\n * @type {Crypto}\n */\n\n\nconst crypto = self.crypto ||\n/** @type {typeof window.crypto} */\n// @ts-ignore - unknown property\nself.msCrypto;\n/**\n *\n * @param {Uint8Array} data\n * @param {HashName} alg\n * @returns {Promise<Uint8Array>}\n */\n\nconst digest = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(data, alg) {\n    var d;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          if (!(typeof self === 'undefined' || !crypto)) {\n            _context.next = 2;\n            break;\n          }\n\n          throw new Error('Please use a browser with webcrypto support and ensure the code has been delivered securely via HTTPS/TLS and run within a Secure Context');\n\n        case 2:\n          _context.t0 = alg;\n          _context.next = _context.t0 === 'sha1' ? 5 : _context.t0 === 'sha2-256' ? 10 : _context.t0 === 'sha2-512' ? 15 : _context.t0 === 'dbl-sha2-256' ? 20 : 28;\n          break;\n\n        case 5:\n          _context.t1 = Uint8Array;\n          _context.next = 8;\n          return crypto.subtle.digest({\n            name: 'SHA-1'\n          }, data);\n\n        case 8:\n          _context.t2 = _context.sent;\n          return _context.abrupt(\"return\", new _context.t1(_context.t2));\n\n        case 10:\n          _context.t3 = Uint8Array;\n          _context.next = 13;\n          return crypto.subtle.digest({\n            name: 'SHA-256'\n          }, data);\n\n        case 13:\n          _context.t4 = _context.sent;\n          return _context.abrupt(\"return\", new _context.t3(_context.t4));\n\n        case 15:\n          _context.t5 = Uint8Array;\n          _context.next = 18;\n          return crypto.subtle.digest({\n            name: 'SHA-512'\n          }, data);\n\n        case 18:\n          _context.t6 = _context.sent;\n          return _context.abrupt(\"return\", new _context.t5(_context.t6));\n\n        case 20:\n          _context.next = 22;\n          return crypto.subtle.digest({\n            name: 'SHA-256'\n          }, data);\n\n        case 22:\n          d = _context.sent;\n          _context.t7 = Uint8Array;\n          _context.next = 26;\n          return crypto.subtle.digest({\n            name: 'SHA-256'\n          }, d);\n\n        case 26:\n          _context.t8 = _context.sent;\n          return _context.abrupt(\"return\", new _context.t7(_context.t8));\n\n        case 28:\n          throw new Error(\"\".concat(alg, \" is not a supported algorithm\"));\n\n        case 29:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n\n  return function digest(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nmodule.exports = {\n  /**\n   * @param {HashName} alg\n   * @returns {Digest}\n   */\n  factory: alg => /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(data) {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            return _context2.abrupt(\"return\", digest(data, alg));\n\n          case 1:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2);\n    }));\n\n    return function (_x3) {\n      return _ref2.apply(this, arguments);\n    };\n  }(),\n  digest,\n\n  /**\n   * @param {Uint8Array} buf\n   * @param {HashName} alg\n   * @param {number} [length]\n   */\n  multihashing: function () {\n    var _multihashing = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(buf, alg, length) {\n      var h;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return digest(buf, alg);\n\n          case 2:\n            h = _context3.sent;\n            return _context3.abrupt(\"return\", multihash.encode(h, alg, length));\n\n          case 4:\n          case \"end\":\n            return _context3.stop();\n        }\n      }, _callee3);\n    }));\n\n    function multihashing(_x4, _x5, _x6) {\n      return _multihashing.apply(this, arguments);\n    }\n\n    return multihashing;\n  }()\n};","map":{"version":3,"sources":["C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/multihashing-async/src/sha.browser.js"],"names":["multihash","require","crypto","self","msCrypto","digest","data","alg","Error","Uint8Array","subtle","name","d","module","exports","factory","multihashing","buf","length","h","encode"],"mappings":"AAAA;AACA;;;;;;AAEA,MAAMA,SAAS,GAAGC,OAAO,CAAC,aAAD,CAAzB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AACA,MAAMC,MAAM,GACVC,IAAI,CAACD,MAAL;AACA;AACA;AACCC,IAAI,CAACC,QAJR;AAMA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,MAAM;AAAA,sEAAG,iBAAOC,IAAP,EAAaC,GAAb;AAAA;AAAA;AAAA;AAAA;AAAA,gBACT,OAAOJ,IAAP,KAAgB,WAAhB,IAA+B,CAACD,MADvB;AAAA;AAAA;AAAA;;AAAA,gBAEL,IAAIM,KAAJ,CACJ,2IADI,CAFK;;AAAA;AAAA,wBAMLD,GANK;AAAA,0CAON,MAPM,uBASN,UATM,wBAWN,UAXM,wBAaN,cAbM;AAAA;;AAAA;AAAA,wBAQEE,UARF;AAAA;AAAA,iBAQmBP,MAAM,CAACQ,MAAP,CAAcL,MAAd,CAAqB;AAAEM,YAAAA,IAAI,EAAE;AAAR,WAArB,EAAwCL,IAAxC,CARnB;;AAAA;AAAA;AAAA;;AAAA;AAAA,wBAUEG,UAVF;AAAA;AAAA,iBAUmBP,MAAM,CAACQ,MAAP,CAAcL,MAAd,CAAqB;AAAEM,YAAAA,IAAI,EAAE;AAAR,WAArB,EAA0CL,IAA1C,CAVnB;;AAAA;AAAA;AAAA;;AAAA;AAAA,wBAYEG,UAZF;AAAA;AAAA,iBAYmBP,MAAM,CAACQ,MAAP,CAAcL,MAAd,CAAqB;AAAEM,YAAAA,IAAI,EAAE;AAAR,WAArB,EAA0CL,IAA1C,CAZnB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,iBAcOJ,MAAM,CAACQ,MAAP,CAAcL,MAAd,CAAqB;AAAEM,YAAAA,IAAI,EAAE;AAAR,WAArB,EAA0CL,IAA1C,CAdP;;AAAA;AAcHM,UAAAA,CAdG;AAAA,wBAeEH,UAfF;AAAA;AAAA,iBAemBP,MAAM,CAACQ,MAAP,CAAcL,MAAd,CAAqB;AAAEM,YAAAA,IAAI,EAAE;AAAR,WAArB,EAA0CC,CAA1C,CAfnB;;AAAA;AAAA;AAAA;;AAAA;AAAA,gBAkBH,IAAIJ,KAAJ,WAAaD,GAAb,mCAlBG;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAANF,MAAM;AAAA;AAAA;AAAA,GAAZ;;AAsBAQ,MAAM,CAACC,OAAP,GAAiB;AACf;AACF;AACA;AACA;AACEC,EAAAA,OAAO,EAAGR,GAAD;AAAA,yEAAS,kBAAOD,IAAP;AAAA;AAAA;AAAA;AAAA,8CACTD,MAAM,CAACC,IAAD,EAAOC,GAAP,CADG;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAT;;AAAA;AAAA;AAAA;AAAA,KALM;AAQfF,EAAAA,MARe;;AASf;AACF;AACA;AACA;AACA;AACEW,EAAAA,YAAY;AAAA,iFAAE,kBAAOC,GAAP,EAAYV,GAAZ,EAAiBW,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACIb,MAAM,CAACY,GAAD,EAAMV,GAAN,CADV;;AAAA;AACNY,YAAAA,CADM;AAAA,8CAELnB,SAAS,CAACoB,MAAV,CAAiBD,CAAjB,EAAoBZ,GAApB,EAAyBW,MAAzB,CAFK;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAdG,CAAjB","sourcesContent":["/* eslint-disable require-await */\n'use strict'\n\nconst multihash = require('multihashes')\n/**\n * @typedef {import('multihashes').HashName} HashName\n * @typedef {import('./types').Digest} Digest\n */\n\n/**\n * @type {Crypto}\n */\nconst crypto =\n  self.crypto ||\n  /** @type {typeof window.crypto} */\n  // @ts-ignore - unknown property\n  (self.msCrypto)\n\n/**\n *\n * @param {Uint8Array} data\n * @param {HashName} alg\n * @returns {Promise<Uint8Array>}\n */\nconst digest = async (data, alg) => {\n  if (typeof self === 'undefined' || !crypto) {\n    throw new Error(\n      'Please use a browser with webcrypto support and ensure the code has been delivered securely via HTTPS/TLS and run within a Secure Context'\n    )\n  }\n  switch (alg) {\n    case 'sha1':\n      return new Uint8Array(await crypto.subtle.digest({ name: 'SHA-1' }, data))\n    case 'sha2-256':\n      return new Uint8Array(await crypto.subtle.digest({ name: 'SHA-256' }, data))\n    case 'sha2-512':\n      return new Uint8Array(await crypto.subtle.digest({ name: 'SHA-512' }, data))\n    case 'dbl-sha2-256': {\n      const d = await crypto.subtle.digest({ name: 'SHA-256' }, data)\n      return new Uint8Array(await crypto.subtle.digest({ name: 'SHA-256' }, d))\n    }\n    default:\n      throw new Error(`${alg} is not a supported algorithm`)\n  }\n}\n\nmodule.exports = {\n  /**\n   * @param {HashName} alg\n   * @returns {Digest}\n   */\n  factory: (alg) => async (data) => {\n    return digest(data, alg)\n  },\n  digest,\n  /**\n   * @param {Uint8Array} buf\n   * @param {HashName} alg\n   * @param {number} [length]\n   */\n  multihashing: async (buf, alg, length) => {\n    const h = await digest(buf, alg)\n    return multihash.encode(h, alg, length)\n  }\n}\n"]},"metadata":{},"sourceType":"script"}