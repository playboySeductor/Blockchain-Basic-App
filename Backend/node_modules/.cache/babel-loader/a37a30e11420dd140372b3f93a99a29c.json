{"ast":null,"code":"'use strict';\n\nvar _createForOfIteratorHelper = require(\"C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nconst _require = require('./util'),\n      encodeText = _require.encodeText;\n/** @typedef {import('./types').CodecFactory} CodecFactory */\n\n/** @typedef {import(\"./types\").BaseName} BaseName */\n\n/** @typedef {import(\"./types\").BaseCode} BaseCode */\n\n/**\n * Class to encode/decode in the supported Bases\n *\n */\n\n\nclass Base {\n  /**\n   * @param {BaseName} name\n   * @param {BaseCode} code\n   * @param {CodecFactory} factory\n   * @param {string} alphabet\n   */\n  constructor(name, code, factory, alphabet) {\n    this.name = name;\n    this.code = code;\n    this.codeBuf = encodeText(this.code);\n    this.alphabet = alphabet;\n    this.codec = factory(alphabet);\n  }\n  /**\n   * @param {Uint8Array} buf\n   * @returns {string}\n   */\n\n\n  encode(buf) {\n    return this.codec.encode(buf);\n  }\n  /**\n   * @param {string} string\n   * @returns {Uint8Array}\n   */\n\n\n  decode(string) {\n    var _iterator = _createForOfIteratorHelper(string),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        const char = _step.value;\n\n        if (this.alphabet && this.alphabet.indexOf(char) < 0) {\n          throw new Error(\"invalid character '\".concat(char, \"' in '\").concat(string, \"'\"));\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    return this.codec.decode(string);\n  }\n\n}\n\nmodule.exports = Base;","map":{"version":3,"sources":["C:/Users/SAINIK/Desktop/LEARNING BTC/NFT-Auction-Marketplace/node_modules/ipld-raw/node_modules/multibase/src/base.js"],"names":["require","encodeText","Base","constructor","name","code","factory","alphabet","codeBuf","codec","encode","buf","decode","string","char","indexOf","Error","module","exports"],"mappings":"AAAA;;;;iBAEuBA,OAAO,CAAC,QAAD,C;MAAtBC,U,YAAAA,U;AAER;;AACA;;AACA;;AAEA;AACA;AACA;AACA;;;AACA,MAAMC,IAAN,CAAW;AACT;AACF;AACA;AACA;AACA;AACA;AACEC,EAAAA,WAAW,CAAEC,IAAF,EAAQC,IAAR,EAAcC,OAAd,EAAuBC,QAAvB,EAAiC;AAC1C,SAAKH,IAAL,GAAYA,IAAZ;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACA,SAAKG,OAAL,GAAeP,UAAU,CAAC,KAAKI,IAAN,CAAzB;AACA,SAAKE,QAAL,GAAgBA,QAAhB;AACA,SAAKE,KAAL,GAAaH,OAAO,CAACC,QAAD,CAApB;AACD;AAED;AACF;AACA;AACA;;;AACEG,EAAAA,MAAM,CAAEC,GAAF,EAAO;AACX,WAAO,KAAKF,KAAL,CAAWC,MAAX,CAAkBC,GAAlB,CAAP;AACD;AAED;AACF;AACA;AACA;;;AACEC,EAAAA,MAAM,CAAEC,MAAF,EAAU;AAAA,+CACKA,MADL;AAAA;;AAAA;AACd,0DAA2B;AAAA,cAAhBC,IAAgB;;AACzB,YAAI,KAAKP,QAAL,IAAiB,KAAKA,QAAL,CAAcQ,OAAd,CAAsBD,IAAtB,IAA8B,CAAnD,EAAsD;AACpD,gBAAM,IAAIE,KAAJ,8BAAgCF,IAAhC,mBAA6CD,MAA7C,OAAN;AACD;AACF;AALa;AAAA;AAAA;AAAA;AAAA;;AAMd,WAAO,KAAKJ,KAAL,CAAWG,MAAX,CAAkBC,MAAlB,CAAP;AACD;;AAlCQ;;AAqCXI,MAAM,CAACC,OAAP,GAAiBhB,IAAjB","sourcesContent":["'use strict'\n\nconst { encodeText } = require('./util')\n\n/** @typedef {import('./types').CodecFactory} CodecFactory */\n/** @typedef {import(\"./types\").BaseName} BaseName */\n/** @typedef {import(\"./types\").BaseCode} BaseCode */\n\n/**\n * Class to encode/decode in the supported Bases\n *\n */\nclass Base {\n  /**\n   * @param {BaseName} name\n   * @param {BaseCode} code\n   * @param {CodecFactory} factory\n   * @param {string} alphabet\n   */\n  constructor (name, code, factory, alphabet) {\n    this.name = name\n    this.code = code\n    this.codeBuf = encodeText(this.code)\n    this.alphabet = alphabet\n    this.codec = factory(alphabet)\n  }\n\n  /**\n   * @param {Uint8Array} buf\n   * @returns {string}\n   */\n  encode (buf) {\n    return this.codec.encode(buf)\n  }\n\n  /**\n   * @param {string} string\n   * @returns {Uint8Array}\n   */\n  decode (string) {\n    for (const char of string) {\n      if (this.alphabet && this.alphabet.indexOf(char) < 0) {\n        throw new Error(`invalid character '${char}' in '${string}'`)\n      }\n    }\n    return this.codec.decode(string)\n  }\n}\n\nmodule.exports = Base\n"]},"metadata":{},"sourceType":"script"}